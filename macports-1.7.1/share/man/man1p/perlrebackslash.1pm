.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLREBACKSLASH 1pm"
.TH PERLREBACKSLASH 1pm "2007-11-18" "perl v5.8.9" "Perl Programmers Reference Guide"
.SH "NAME"
perlrebackslash \- Perl Regular Expression Backslash Sequences and Escapes
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The top level documentation about Perl regular expressions
is found in perlre.
.PP
This document describes all backslash and escape sequences. After
explaining the role of the backslash, it lists all the sequences that have
a special meaning in Perl regular expressions (in alphabetical order),
then describes each of them.
.PP
Most sequences are described in detail in different documents; the primary
purpose of this document is to have a quick reference guide describing all
backslash and escape sequences.
.Sh "The backslash"
.IX Subsection "The backslash"
In a regular expression, the backslash can perform one of two tasks:
it either takes away the special meaning of the character following it
(for instance, \f(CW\*(C`\e|\*(C'\fR matches a vertical bar, it's not an alternation),
or it is the start of a backslash or escape sequence.
.PP
The rules determining what it is are quite simple: if the character
following the backslash is a punctuation (non\-word) character (that is,
anything that is not a letter, digit or underscore), then the backslash
just takes away the special meaning (if any) of the character following
it.
.PP
If the character following the backslash is a letter or a digit, then the
sequence may be special; if so, it's listed below. A few letters have not
been used yet, and escaping them with a backslash is safe for now, but a
future version of Perl may assign a special meaning to it. However, if you
have warnings turned on, Perl will issue a warning if you use such a sequence.
[1].
.PP
It is however guaranteed that backslash or escape sequences never have a
punctuation character following the backslash, not now, and not in a future
version of Perl 5. So it is safe to put a backslash in front of a non-word
character.
.PP
Note that the backslash itself is special; if you want to match a backslash,
you have to escape the backslash with a backslash: \f(CW\*(C`/\e\e/\*(C'\fR matches a single
backslash.
.IP "[1]" 4
.IX Item "[1]"
There is one exception. If you use an alphanumerical character as the
delimiter of your pattern (which you probably shouldn't do for readability
reasons), you will have to escape the delimiter if you want to match
it. Perl won't warn then. See also \*(L"Gory details of parsing quoted constructs\*(R" in perlop.
.Sh "All the sequences and escapes"
.IX Subsection "All the sequences and escapes"
.Vb 33
\& \e000              Octal escape sequence.
\& \e1                Absolute backreference.
\& \ea                Alarm or bell.
\& \eA                Beginning of string.
\& \eb                Word/non-word boundary. (Backspace in a char class).
\& \eB                Not a word/non-word boundary.
\& \ecX               Control-X (X can be any ASCII character).
\& \eC                Single octet, even under UTF-8.
\& \ed                Character class for digits.
\& \eD                Character class for non-digits.
\& \ee                Escape character.
\& \eE                Turn off \eQ, \eL and \eU processing.
\& \ef                Form feed.
\& \eG                Pos assertion.
\& \el                Lowercase next character.
\& \eL                Lowercase till \eE.
\& \en                (Logical) newline character.
\& \eN{}              Named (Unicode) character.
\& \ep{}, \epP         Character with a Unicode property.
\& \eP{}, \ePP         Character without a Unicode property.
\& \eQ                Quotemeta till \eE.
\& \er                Return character.
\& \es                Character class for white space.
\& \eS                Character class for non white space.
\& \et                Tab character.
\& \eu                Titlecase next character.
\& \eU                Uppercase till \eE.
\& \ew                Character class for word characters.
\& \eW                Character class for non-word characters.
\& \ex{}, \ex00        Hexadecimal escape sequence.
\& \eX                Extended Unicode "combining character sequence".
\& \ez                End of string.
\& \eZ                End of string.
.Ve
.Sh "Character Escapes"
.IX Subsection "Character Escapes"
\fIFixed characters\fR
.IX Subsection "Fixed characters"
.PP
A handful of characters have a dedicated \fIcharacter escape\fR. The following
table shows them, along with their code points (in decimal and hex), their
\&\s-1ASCII\s0 name, the control escape (see below) and a short description.
.PP
.Vb 9
\& Seq.  Code Point  ASCII   Cntr    Description.
\&       Dec    Hex
\&  \ea     7     07    BEL    \ecG    alarm or bell
\&  \eb     8     08     BS    \ecH    backspace [1]
\&  \ee    27     1B    ESC    \ec[    escape character
\&  \ef    12     0C     FF    \ecL    form feed
\&  \en    10     0A     LF    \ecJ    line feed [2]
\&  \er    13     0D     CR    \ecM    carriage return
\&  \et     9     09    TAB    \ecI    tab
.Ve
.IP "[1]" 4
.IX Item "[1]"
\&\f(CW\*(C`\eb\*(C'\fR is only the backspace character inside a character class. Outside a
character class, \f(CW\*(C`\eb\*(C'\fR is a word/non\-word boundary.
.IP "[2]" 4
.IX Item "[2]"
\&\f(CW\*(C`\en\*(C'\fR matches a logical newline. Perl will convert between \f(CW\*(C`\en\*(C'\fR and your
OSses native newline character when reading from or writing to text files.
.PP
Example
.IX Subsection "Example"
.PP
.Vb 1
\& $str =~ /\et/;   # Matches if $str contains a (horizontal) tab.
.Ve
.PP
\fIControl characters\fR
.IX Subsection "Control characters"
.PP
\&\f(CW\*(C`\ec\*(C'\fR is used to denote a control character; the character following \f(CW\*(C`\ec\*(C'\fR
is the name of the control character. For instance, \f(CW\*(C`/\ecM/\*(C'\fR matches the
character \fIcontrol-M\fR (a carriage return, code point 13). The case of the
character following \f(CW\*(C`\ec\*(C'\fR doesn't matter: \f(CW\*(C`\ecM\*(C'\fR and \f(CW\*(C`\ecm\*(C'\fR match the same
character.
.PP
Mnemonic: \fIc\fRontrol character.
.PP
Example
.IX Subsection "Example"
.PP
.Vb 1
\& $str =~ /\ecK/;  # Matches if $str contains a vertical tab (control-K).
.Ve
.PP
\fINamed characters\fR
.IX Subsection "Named characters"
.PP
All Unicode characters have a Unicode name, and characters in various scripts
have names as well. It is even possible to give your own names to characters.
You can use a character by name by using the \f(CW\*(C`\eN{}\*(C'\fR construct; the name of
the character goes between the curly braces. You do have to \f(CW\*(C`use charnames\*(C'\fR
to load the names of the characters, otherwise Perl will complain you use
a name it doesn't know about. For more details, see charnames.
.PP
Mnemonic: \fIN\fRamed character.
.PP
Example
.IX Subsection "Example"
.PP
.Vb 2
\& use charnames ':full';               # Loads the Unicode names.
\& $str =~ /\eN{THAI CHARACTER SO SO}/;  # Matches the Thai SO SO character
.Ve
.PP
.Vb 2
\& use charnames 'Cyrillic';            # Loads Cyrillic names.
\& $str =~ /\eN{ZHE}\eN{KA}/;             # Match "ZHE" followed by "KA".
.Ve
.PP
\fIOctal escapes\fR
.IX Subsection "Octal escapes"
.PP
Octal escapes consist of a backslash followed by two or three octal digits
matching the code point of the character you want to use. This allows for
512 characters (\f(CW\*(C`\e00\*(C'\fR up to \f(CW\*(C`\e777\*(C'\fR) that can be expressed this way.
Enough in pre-Unicode days, but most Unicode characters cannot be escaped
this way.
.PP
Note that a character that is expressed as an octal escape is considered
as a character without special meaning by the regex engine, and will match
\&\*(L"as is\*(R".
.PP
Examples
.IX Subsection "Examples"
.PP
.Vb 4
\& $str = "Perl";
\& $str =~ /\e120/;    # Match, "\e120" is "P".
\& $str =~ /\e120+/;   # Match, "\e120" is "P", it is repeated at least once.
\& $str =~ /P\e053/;   # No match, "\e053" is "+" and taken literally.
.Ve
.PP
Caveat
.IX Subsection "Caveat"
.PP
Octal escapes potentially clash with backreferences. They both consist
of a backslash followed by numbers. So Perl has to use heuristics to
determine whether it is a backreference or an octal escape. Perl uses
the following rules:
.IP "1" 4
.IX Item "1"
If the backslash is followed by a single digit, it's a backreference.
.IP "2" 4
.IX Item "2"
If the first digit following the backslash is a 0, it's an octal escape.
.IP "3" 4
.IX Item "3"
If the number following the backslash is N (decimal), and Perl already has
seen N capture groups, Perl will consider this to be a backreference.
Otherwise, it will consider it to be an octal escape. Note that if N > 999,
Perl only takes the first three digits for the octal escape; the rest is
matched as is.
.Sp
.Vb 6
\& my $pat  = "(" x 999;
\&    $pat .= "a";
\&    $pat .= ")" x 999;
\& /^($pat)\e1000$/;   #  Matches 'aa'; there are 1000 capture groups.
\& /^$pat\e1000$/;     #  Matches 'a@0'; there are 999 capture groups
\&                    #    and \e1000 is seen as \e100 (a '@') and a '0'.
.Ve
.PP
\fIHexadecimal escapes\fR
.IX Subsection "Hexadecimal escapes"
.PP
Hexadecimal escapes start with \f(CW\*(C`\ex\*(C'\fR and are then either followed by
two digit hexadecimal number, or a hexadecimal number of arbitrary length
surrounded by curly braces. The hexadecimal number is the code point of
the character you want to express.
.PP
Note that a character that is expressed as a hexadecimal escape is considered
as a character without special meaning by the regex engine, and will match
\&\*(L"as is\*(R".
.PP
Mnemonic: he\fIx\fRadecimal.
.PP
Examples
.IX Subsection "Examples"
.PP
.Vb 4
\& $str = "Perl";
\& $str =~ /\ex50/;    # Match, "\ex50" is "P".
\& $str =~ /\ex50+/;   # Match, "\ex50" is "P", it is repeated at least once.
\& $str =~ /P\ex2B/;   # No match, "\ex2B" is "+" and taken literally.
.Ve
.PP
.Vb 5
\& /\ex{2603}\ex{2602}/ # Snowman with an umbrella.
\&                    # The Unicode character 2603 is a snowman,
\&                    # the Unicode character 2602 is an umbrella.
\& /\ex{263B}/         # Black smiling face.
\& /\ex{263b}/         # Same, the hex digits A - F are case insensitive.
.Ve
.Sh "Modifiers"
.IX Subsection "Modifiers"
A number of backslash sequences have to do with changing the character,
or characters following them. \f(CW\*(C`\el\*(C'\fR will lowercase the character following
it, while \f(CW\*(C`\eu\*(C'\fR will uppercase (or, more accurately, titlecase) the
character following it. (They perform similar functionality as the
functions \f(CW\*(C`lcfirst\*(C'\fR and \f(CW\*(C`ucfirst\*(C'\fR).
.PP
To uppercase or lowercase several characters, one might want to use
\&\f(CW\*(C`\eL\*(C'\fR or \f(CW\*(C`\eU\*(C'\fR, which will lowercase/uppercase all characters following
them, until either the end of the pattern, or the next occurrence of
\&\f(CW\*(C`\eE\*(C'\fR, whatever comes first. They perform similar functionality as the
functions \f(CW\*(C`lc\*(C'\fR and \f(CW\*(C`uc\*(C'\fR do.
.PP
\&\f(CW\*(C`\eQ\*(C'\fR is used to escape all characters following, up to the next \f(CW\*(C`\eE\*(C'\fR
or the end of the pattern. \f(CW\*(C`\eQ\*(C'\fR adds a backslash to any character that
isn't a letter, digit or underscore. This will ensure that any character
between \f(CW\*(C`\eQ\*(C'\fR and \f(CW\*(C`\eE\*(C'\fR is matched literally, and will not be interpreted
by the regexp engine.
.PP
Mnemonic: \fIL\fRowercase, \fIU\fRppercase, \fIQ\fRuotemeta, \fIE\fRnd.
.PP
Examples
.IX Subsection "Examples"
.PP
.Vb 7
\& $sid     = "sid";
\& $greg    = "GrEg";
\& $miranda = "(Miranda)";
\& $str     =~ /\eu$sid/;        # Matches 'Sid'
\& $str     =~ /\eL$greg/;       # Matches 'greg'
\& $str     =~ /\eQ$miranda\eE/;  # Matches '(Miranda)', as if the pattern
\&                              #   had been written as /\e(Miranda\e)/
.Ve
.Sh "Character classes"
.IX Subsection "Character classes"
Perl regular expressions have a large range of character classes. Some of
the character classes are written as a backslash sequence. We will briefly
discuss those here; full details of character classes can be found in
perlrecharclass.
.PP
\&\f(CW\*(C`\ew\*(C'\fR is a character class that matches any \fIword\fR character (letters,
digits, underscore). \f(CW\*(C`\ed\*(C'\fR is a character class that matches any digit,
while the character class \f(CW\*(C`\es\*(C'\fR matches any white space character.
.PP
The uppercase variants (\f(CW\*(C`\eW\*(C'\fR, \f(CW\*(C`\eD\*(C'\fR, \f(CW\*(C`\eS\*(C'\fR) are
character classes that match any character that isn't a word character,
digit or white space.
.PP
Mnemonics: \fIw\fRord, \fId\fRigit, \fIs\fRpace
.PP
\fIUnicode classes\fR
.IX Subsection "Unicode classes"
.PP
\&\f(CW\*(C`\epP\*(C'\fR (where \f(CW\*(C`P\*(C'\fR is a single letter) and \f(CW\*(C`\ep{Property}\*(C'\fR are used to
match a character that matches the given Unicode property; properties
include things like \*(L"letter\*(R", or \*(L"thai character\*(R". Capitalizing the
sequence to \f(CW\*(C`\ePP\*(C'\fR and \f(CW\*(C`\eP{Property}\*(C'\fR make the sequence match a character
that doesn't match the given Unicode property. For more details, see
\&\*(L"Backslashed sequences\*(R" in perlrecharclass and
\&\*(L"Unicode Character Properties\*(R" in perlunicode.
.PP
Mnemonic: \fIp\fRroperty.
.Sh "Referencing"
.IX Subsection "Referencing"
If capturing parenthesis are used in a regular expression, we can refer
to the part of the source string that was matched, and match exactly the
same thing. In Perl 5.8.x and earlier there is only one way of referring to
a \fIbackreference\fR, by absolution number. Perl 5.10 adds the ability to
reference relatively and by name.
.PP
\fIAbsolute referencing\fR
.IX Subsection "Absolute referencing"
.PP
A backslash sequence that starts with a backslash and is followed by a
number is an absolute reference (but be aware of the caveat mentioned above).
If the number is \fIN\fR, it refers to the Nth set of parenthesis \- whatever
has been matched by that set of parenthesis has to be matched by the \f(CW\*(C`\eN\*(C'\fR
as well.
.PP
Examples
.IX Subsection "Examples"
.PP
.Vb 2
\& /(\ew+) \e1/;    # Finds a duplicated word, (e.g. "cat cat").
\& /(.)(.)\e2\e1/;  # Match a four letter palindrome (e.g. "ABBA").
.Ve
.Sh "Assertions"
.IX Subsection "Assertions"
Assertions are conditions that have to be true \*(-- they don't actually
match parts of the substring. There are six assertions that are written as
backslash sequences.
.IP "\eA" 4
.IX Item "A"
\&\f(CW\*(C`\eA\*(C'\fR only matches at the beginning of the string. If the \f(CW\*(C`/m\*(C'\fR modifier
isn't used, then \f(CW\*(C`/\eA/\*(C'\fR is equivalent with \f(CW\*(C`/^/\*(C'\fR. However, if the \f(CW\*(C`/m\*(C'\fR
modifier is used, then \f(CW\*(C`/^/\*(C'\fR matches internal newlines, but the meaning
of \f(CW\*(C`/\eA/\*(C'\fR isn't changed by the \f(CW\*(C`/m\*(C'\fR modifier. \f(CW\*(C`\eA\*(C'\fR matches at the beginning
of the string regardless whether the \f(CW\*(C`/m\*(C'\fR modifier is used.
.IP "\ez, \eZ" 4
.IX Item "z, Z"
\&\f(CW\*(C`\ez\*(C'\fR and \f(CW\*(C`\eZ\*(C'\fR match at the end of the string. If the \f(CW\*(C`/m\*(C'\fR modifier isn't
used, then \f(CW\*(C`/\eZ/\*(C'\fR is equivalent with \f(CW\*(C`/$/\*(C'\fR, that is, it matches at the
end of the string, or before the newline at the end of the string. If the
\&\f(CW\*(C`/m\*(C'\fR modifier is used, then \f(CW\*(C`/$/\*(C'\fR matches at internal newlines, but the
meaning of \f(CW\*(C`/\eZ/\*(C'\fR isn't changed by the \f(CW\*(C`/m\*(C'\fR modifier. \f(CW\*(C`\eZ\*(C'\fR matches at
the end of the string (or just before a trailing newline) regardless whether
the \f(CW\*(C`/m\*(C'\fR modifier is used.
.Sp
\&\f(CW\*(C`\ez\*(C'\fR is just like \f(CW\*(C`\eZ\*(C'\fR, except that it will not match before a trailing
newline. \f(CW\*(C`\ez\*(C'\fR will only match at the end of the string \- regardless of the
modifiers used, and not before a newline.
.IP "\eG" 4
.IX Item "G"
\&\f(CW\*(C`\eG\*(C'\fR is usually only used in combination with the \f(CW\*(C`/g\*(C'\fR modifier. If the
\&\f(CW\*(C`/g\*(C'\fR modifier is used (and the match is done in scalar context), Perl will
remember where in the source string the last match ended, and the next time,
it will start the match from where it ended the previous time.
.Sp
\&\f(CW\*(C`\eG\*(C'\fR matches the point where the previous match ended, or the beginning
of the string if there was no previous match.
.Sp
Mnemonic: \fIG\fRlobal.
.IP "\eb, \eB" 4
.IX Item "b, B"
\&\f(CW\*(C`\eb\*(C'\fR matches at any place between a word and a non-word character; \f(CW\*(C`\eB\*(C'\fR
matches at any place between characters where \f(CW\*(C`\eb\*(C'\fR doesn't match. \f(CW\*(C`\eb\*(C'\fR
and \f(CW\*(C`\eB\*(C'\fR assume there's a non-word character before the beginning and after
the end of the source string; so \f(CW\*(C`\eb\*(C'\fR will match at the beginning (or end)
of the source string if the source string begins (or ends) with a word
character. Otherwise, \f(CW\*(C`\eB\*(C'\fR will match.
.Sp
Mnemonic: \fIb\fRoundary.
.PP
Examples
.IX Subsection "Examples"
.PP
.Vb 4
\&  "cat"   =~ /\eAcat/;     # Match.
\&  "cat"   =~ /cat\eZ/;     # Match.
\&  "cat\en" =~ /cat\eZ/;     # Match.
\&  "cat\en" =~ /cat\ez/;     # No match.
.Ve
.PP
.Vb 4
\&  "cat"   =~ /\ebcat\eb/;   # Matches.
\&  "cats"  =~ /\ebcat\eb/;   # No match.
\&  "cat"   =~ /\ebcat\eB/;   # No match.
\&  "cats"  =~ /\ebcat\eB/;   # Match.
.Ve
.PP
.Vb 6
\&  while ("cat dog" =~ /(\ew+)/g) {
\&      print $1;           # Prints 'catdog'
\&  }
\&  while ("cat dog" =~ /\eG(\ew+)/g) {
\&      print $1;           # Prints 'cat'
\&  }
.Ve
.Sh "Misc"
.IX Subsection "Misc"
Here we document the backslash sequences that don't fall in one of the
categories above. They are:
.IP "\eC" 4
.IX Item "C"
\&\f(CW\*(C`\eC\*(C'\fR always matches a single octet, even if the source string is encoded
in \s-1UTF\-8\s0 format, and the character to be matched is a multi-octet character.
\&\f(CW\*(C`\eC\*(C'\fR was introduced in perl 5.6.
.Sp
Mnemonic: o\fIC\fRtet.
.IP "\eX" 4
.IX Item "X"
This matches an extended Unicode \fIcombining character sequence\fR, and
is equivalent to \f(CW\*(C`(?>\ePM\epM*)\*(C'\fR. \f(CW\*(C`\ePM\*(C'\fR matches any character that is
not considered a Unicode mark character, while \f(CW\*(C`\epM\*(C'\fR matches any character
that is considered a Unicode mark character; so \f(CW\*(C`\eX\*(C'\fR matches any non
mark character followed by zero or more mark characters. Mark characters
include (but are not restricted to) \fIcombining characters\fR and
\&\fIvowel signs\fR.
.Sp
\&\f(CW\*(C`\eX\*(C'\fR matches quite well what normal (non\-Unicode\-programmer) usage
would consider a single character: for example a base character
(the \f(CW\*(C`\ePM\*(C'\fR above), for example a letter, followed by zero or more
diacritics, which are \fIcombining characters\fR (the \f(CW\*(C`\epM*\*(C'\fR above).
.Sp
Mnemonic: e\fIX\fRtended Unicode character.
.PP
Examples
.IX Subsection "Examples"
.PP
.Vb 1
\& "\ex{256}" =~ /^\eC\eC$/;    # Match as chr (256) takes 2 octets in UTF-8.
.Ve
.PP
.Vb 2
\& $str =~ s/foo\eKbar/baz/g; # Change any 'bar' following a 'foo' to 'baz'.
\& $str =~ s/(.)\eK\e1//g;     # Delete duplicated characters.
.Ve
.PP
.Vb 3
\& "\en"   =~ /^\eR$/;         # Match, \en   is a generic newline.
\& "\er"   =~ /^\eR$/;         # Match, \er   is a generic newline.
\& "\er\en" =~ /^\eR$/;         # Match, \er\en is a generic newline.
.Ve
.PP
.Vb 1
\& "P\ex{0307}" =~ /^\eX$/     # \eX matches a P with a dot above.
.Ve
