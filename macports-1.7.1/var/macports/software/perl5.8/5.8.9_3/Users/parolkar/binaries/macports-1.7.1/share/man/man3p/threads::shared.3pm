.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "threads::shared 3pm"
.TH threads::shared 3pm "2001-09-21" "perl v5.8.9" "Perl Programmers Reference Guide"
.SH "NAME"
threads::shared \- Perl extension for sharing data structures between threads
.SH "VERSION"
.IX Header "VERSION"
This document describes threads::shared version 1.27
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use threads;
\&  use threads::shared;
.Ve
.PP
.Vb 3
\&  my $var :shared;
\&  my %hsh :shared;
\&  my @ary :shared;
.Ve
.PP
.Vb 4
\&  my ($scalar, @array, %hash);
\&  share($scalar);
\&  share(@array);
\&  share(%hash);
.Ve
.PP
.Vb 4
\&  $var = $scalar_value;
\&  $var = $shared_ref_value;
\&  $var = shared_clone($non_shared_ref_value);
\&  $var = shared_clone({'foo' => [qw/foo bar baz/]});
.Ve
.PP
.Vb 4
\&  $hsh{'foo'} = $scalar_value;
\&  $hsh{'bar'} = $shared_ref_value;
\&  $hsh{'baz'} = shared_clone($non_shared_ref_value);
\&  $hsh{'quz'} = shared_clone([1..3]);
.Ve
.PP
.Vb 4
\&  $ary[0] = $scalar_value;
\&  $ary[1] = $shared_ref_value;
\&  $ary[2] = shared_clone($non_shared_ref_value);
\&  $ary[3] = shared_clone([ {}, [] ]);
.Ve
.PP
.Vb 1
\&  { lock(%hash); ...  }
.Ve
.PP
.Vb 4
\&  cond_wait($scalar);
\&  cond_timedwait($scalar, time() + 30);
\&  cond_broadcast(@array);
\&  cond_signal(%hash);
.Ve
.PP
.Vb 4
\&  my $lockvar :shared;
\&  # condition var != lock var
\&  cond_wait($var, $lockvar);
\&  cond_timedwait($var, time()+30, $lockvar);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
By default, variables are private to each thread, and each newly created
thread gets a private copy of each existing variable.  This module allows you
to share variables across different threads (and pseudo-forks on Win32).  It
is used together with the threads module.
.PP
This module supports the sharing of the following data types only:  scalars
and scalar refs, arrays and array refs, and hashes and hash refs.
.SH "EXPORT"
.IX Header "EXPORT"
The following functions are exported by this module: \f(CW\*(C`share\*(C'\fR,
\&\f(CW\*(C`shared_clone\*(C'\fR, \f(CW\*(C`is_shared\*(C'\fR, \f(CW\*(C`cond_wait\*(C'\fR, \f(CW\*(C`cond_timedwait\*(C'\fR, \f(CW\*(C`cond_signal\*(C'\fR
and \f(CW\*(C`cond_broadcast\*(C'\fR
.PP
Note that if this module is imported when threads has not yet been loaded,
then these functions all become no\-ops.  This makes it possible to write
modules that will work in both threaded and non-threaded environments.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "share \s-1VARIABLE\s0" 4
.IX Item "share VARIABLE"
\&\f(CW\*(C`share\*(C'\fR takes a variable and marks it as shared:
.Sp
.Vb 4
\&  my ($scalar, @array, %hash);
\&  share($scalar);
\&  share(@array);
\&  share(%hash);
.Ve
.Sp
\&\f(CW\*(C`share\*(C'\fR will return the shared rvalue, but always as a reference.
.Sp
Variables can also be marked as shared at compile time by using the
\&\f(CW\*(C`:shared\*(C'\fR attribute:
.Sp
.Vb 1
\&  my ($var, %hash, @array) :shared;
.Ve
.Sp
Shared variables can only store scalars, refs of shared variables, or
refs of shared data (discussed in next section):
.Sp
.Vb 2
\&  my ($var, %hash, @array) :shared;
\&  my $bork;
.Ve
.Sp
.Vb 4
\&  # Storing scalars
\&  $var = 1;
\&  $hash{'foo'} = 'bar';
\&  $array[0] = 1.5;
.Ve
.Sp
.Vb 4
\&  # Storing shared refs
\&  $var = \e%hash;
\&  $hash{'ary'} = \e@array;
\&  $array[1] = \e$var;
.Ve
.Sp
.Vb 4
\&  # The following are errors:
\&  #   $var = \e$bork;                    # ref of non-shared variable
\&  #   $hash{'bork'} = [];               # non-shared array ref
\&  #   push(@array, { 'x' => 1 });       # non-shared hash ref
.Ve
.IP "shared_clone \s-1REF\s0" 4
.IX Item "shared_clone REF"
\&\f(CW\*(C`shared_clone\*(C'\fR takes a reference, and returns a shared version of its
argument, performing a deep copy on any non-shared elements.  Any shared
elements in the argument are used as is (i.e., they are not cloned).
.Sp
.Vb 1
\&  my $cpy = shared_clone({'foo' => [qw/foo bar baz/]});
.Ve
.Sp
Object status (i.e., the class an object is blessed into) is also cloned.
.Sp
.Vb 4
\&  my $obj = {'foo' => [qw/foo bar baz/]};
\&  bless($obj, 'Foo');
\&  my $cpy = shared_clone($obj);
\&  print(ref($cpy), "\en");         # Outputs 'Foo'
.Ve
.Sp
For cloning empty array or hash refs, the following may also be used:
.Sp
.Vb 2
\&  $var = &share([]);   # Same as $var = shared_clone([]);
\&  $var = &share({});   # Same as $var = shared_clone({});
.Ve
.IP "is_shared \s-1VARIABLE\s0" 4
.IX Item "is_shared VARIABLE"
\&\f(CW\*(C`is_shared\*(C'\fR checks if the specified variable is shared or not.  If shared,
returns the variable's internal \s-1ID\s0 (similar to
\&\fIrefaddr()\fR).  Otherwise, returns \f(CW\*(C`undef\*(C'\fR.
.Sp
.Vb 5
\&  if (is_shared($var)) {
\&      print("\e$var is shared\en");
\&  } else {
\&      print("\e$var is not shared\en");
\&  }
.Ve
.IP "lock \s-1VARIABLE\s0" 4
.IX Item "lock VARIABLE"
\&\f(CW\*(C`lock\*(C'\fR places a lock on a variable until the lock goes out of scope.  If the
variable is locked by another thread, the \f(CW\*(C`lock\*(C'\fR call will block until it's
available.  Multiple calls to \f(CW\*(C`lock\*(C'\fR by the same thread from within
dynamically nested scopes are safe \*(-- the variable will remain locked until
the outermost lock on the variable goes out of scope.
.Sp
Locking a container object, such as a hash or array, doesn't lock the elements
of that container. For example, if a thread does a \f(CW\*(C`lock(@a)\*(C'\fR, any other
thread doing a \f(CW\*(C`lock($a[12])\*(C'\fR won't block.
.Sp
\&\f(CW\*(C`lock()\*(C'\fR follows references exactly \fIone\fR level.  \f(CW\*(C`lock(\e$a)\*(C'\fR is equivalent
to \f(CW\*(C`lock($a)\*(C'\fR, while \f(CW\*(C`lock(\e\e$a)\*(C'\fR is not.
.Sp
Note that you cannot explicitly unlock a variable; you can only wait for the
lock to go out of scope.  This is most easily accomplished by locking the
variable inside a block.
.Sp
.Vb 7
\&  my $var :shared;
\&  {
\&      lock($var);
\&      # $var is locked from here to the end of the block
\&      ...
\&  }
\&  # $var is now unlocked
.Ve
.Sp
If you need more fine-grained control over shared variable access, see
Thread::Semaphore.
.IP "cond_wait \s-1VARIABLE\s0" 4
.IX Item "cond_wait VARIABLE"
.PD 0
.IP "cond_wait \s-1CONDVAR\s0, \s-1LOCKVAR\s0" 4
.IX Item "cond_wait CONDVAR, LOCKVAR"
.PD
The \f(CW\*(C`cond_wait\*(C'\fR function takes a \fBlocked\fR variable as a parameter, unlocks
the variable, and blocks until another thread does a \f(CW\*(C`cond_signal\*(C'\fR or
\&\f(CW\*(C`cond_broadcast\*(C'\fR for that same locked variable.  The variable that
\&\f(CW\*(C`cond_wait\*(C'\fR blocked on is relocked after the \f(CW\*(C`cond_wait\*(C'\fR is satisfied.  If
there are multiple threads \f(CW\*(C`cond_wait\*(C'\fRing on the same variable, all but one
will re-block waiting to reacquire the lock on the variable. (So if you're only
using \f(CW\*(C`cond_wait\*(C'\fR for synchronisation, give up the lock as soon as possible).
The two actions of unlocking the variable and entering the blocked wait state
are atomic, the two actions of exiting from the blocked wait state and
re-locking the variable are not.
.Sp
In its second form, \f(CW\*(C`cond_wait\*(C'\fR takes a shared, \fBunlocked\fR variable followed
by a shared, \fBlocked\fR variable.  The second variable is unlocked and thread
execution suspended until another thread signals the first variable.
.Sp
It is important to note that the variable can be notified even if no thread
\&\f(CW\*(C`cond_signal\*(C'\fR or \f(CW\*(C`cond_broadcast\*(C'\fR on the variable.  It is therefore
important to check the value of the variable and go back to waiting if the
requirement is not fulfilled.  For example, to pause until a shared counter
drops to zero:
.Sp
.Vb 1
\&  { lock($counter); cond_wait($count) until $counter == 0; }
.Ve
.IP "cond_timedwait \s-1VARIABLE\s0, \s-1ABS_TIMEOUT\s0" 4
.IX Item "cond_timedwait VARIABLE, ABS_TIMEOUT"
.PD 0
.IP "cond_timedwait \s-1CONDVAR\s0, \s-1ABS_TIMEOUT\s0, \s-1LOCKVAR\s0" 4
.IX Item "cond_timedwait CONDVAR, ABS_TIMEOUT, LOCKVAR"
.PD
In its two-argument form, \f(CW\*(C`cond_timedwait\*(C'\fR takes a \fBlocked\fR variable and an
absolute timeout as parameters, unlocks the variable, and blocks until the
timeout is reached or another thread signals the variable.  A false value is
returned if the timeout is reached, and a true value otherwise.  In either
case, the variable is re-locked upon return.
.Sp
Like \f(CW\*(C`cond_wait\*(C'\fR, this function may take a shared, \fBlocked\fR variable as an
additional parameter; in this case the first parameter is an \fBunlocked\fR
condition variable protected by a distinct lock variable.
.Sp
Again like \f(CW\*(C`cond_wait\*(C'\fR, waking up and reacquiring the lock are not atomic,
and you should always check your desired condition after this function
returns.  Since the timeout is an absolute value, however, it does not have to
be recalculated with each pass:
.Sp
.Vb 6
\&  lock($var);
\&  my $abs = time() + 15;
\&  until ($ok = desired_condition($var)) {
\&      last if !cond_timedwait($var, $abs);
\&  }
\&  # we got it if $ok, otherwise we timed out!
.Ve
.IP "cond_signal \s-1VARIABLE\s0" 4
.IX Item "cond_signal VARIABLE"
The \f(CW\*(C`cond_signal\*(C'\fR function takes a \fBlocked\fR variable as a parameter and
unblocks one thread that's \f(CW\*(C`cond_wait\*(C'\fRing on that variable. If more than one
thread is blocked in a \f(CW\*(C`cond_wait\*(C'\fR on that variable, only one (and which one
is indeterminate) will be unblocked.
.Sp
If there are no threads blocked in a \f(CW\*(C`cond_wait\*(C'\fR on the variable, the signal
is discarded. By always locking before signaling, you can (with care), avoid
signaling before another thread has entered \fIcond_wait()\fR.
.Sp
\&\f(CW\*(C`cond_signal\*(C'\fR will normally generate a warning if you attempt to use it on an
unlocked variable. On the rare occasions where doing this may be sensible, you
can suppress the warning with:
.Sp
.Vb 1
\&  { no warnings 'threads'; cond_signal($foo); }
.Ve
.IP "cond_broadcast \s-1VARIABLE\s0" 4
.IX Item "cond_broadcast VARIABLE"
The \f(CW\*(C`cond_broadcast\*(C'\fR function works similarly to \f(CW\*(C`cond_signal\*(C'\fR.
\&\f(CW\*(C`cond_broadcast\*(C'\fR, though, will unblock \fBall\fR the threads that are blocked in
a \f(CW\*(C`cond_wait\*(C'\fR on the locked variable, rather than only one.
.SH "OBJECTS"
.IX Header "OBJECTS"
threads::shared exports a version of \fIbless()\fR that
works on shared objects such that \fIblessings\fR propagate across threads.
.PP
.Vb 3
\&  # Create a shared 'Foo' object
\&  my $foo :shared = shared_clone({});
\&  bless($foo, 'Foo');
.Ve
.PP
.Vb 3
\&  # Create a shared 'Bar' object
\&  my $bar :shared = shared_clone({});
\&  bless($bar, 'Bar');
.Ve
.PP
.Vb 2
\&  # Put 'bar' inside 'foo'
\&  $foo->{'bar'} = $bar;
.Ve
.PP
.Vb 4
\&  # Rebless the objects via a thread
\&  threads->create(sub {
\&      # Rebless the outer object
\&      bless($foo, 'Yin');
.Ve
.PP
.Vb 2
\&      # Cannot directly rebless the inner object
\&      #bless($foo->{'bar'}, 'Yang');
.Ve
.PP
.Vb 4
\&      # Retrieve and rebless the inner object
\&      my $obj = $foo->{'bar'};
\&      bless($obj, 'Yang');
\&      $foo->{'bar'} = $obj;
.Ve
.PP
.Vb 1
\&  })->join();
.Ve
.PP
.Vb 3
\&  print(ref($foo),          "\en");    # Prints 'Yin'
\&  print(ref($foo->{'bar'}), "\en");    # Prints 'Yang'
\&  print(ref($bar),          "\en");    # Also prints 'Yang'
.Ve
.SH "NOTES"
.IX Header "NOTES"
threads::shared is designed to disable itself silently if threads are not
available.  This allows you to write modules and packages that can be used
in both threaded and non-threaded applications.
.PP
If you want access to threads, you must \f(CW\*(C`use threads\*(C'\fR before you
\&\f(CW\*(C`use threads::shared\*(C'\fR.  threads will emit a warning if you use it after
threads::shared.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
When \f(CW\*(C`share\*(C'\fR is used on arrays, hashes, array refs or hash refs, any data
they contain will be lost.
.PP
.Vb 3
\&  my @arr = qw(foo bar baz);
\&  share(@arr);
\&  # @arr is now empty (i.e., == ());
.Ve
.PP
.Vb 3
\&  # Create a 'foo' object
\&  my $foo = { 'data' => 99 };
\&  bless($foo, 'foo');
.Ve
.PP
.Vb 4
\&  # Share the object
\&  share($foo);        # Contents are now wiped out
\&  print("ERROR: \e$foo is empty\en")
\&      if (! exists($foo->{'data'}));
.Ve
.PP
Therefore, populate such variables \fBafter\fR declaring them as shared.  (Scalar
and scalar refs are not affected by this problem.)
.PP
It is often not wise to share an object unless the class itself has been
written to support sharing.  For example, an object's destructor may get
called multiple times, once for each thread's scope exit.  Another danger is
that the contents of hash-based objects will be lost due to the above
mentioned limitation.  See \fIexamples/class.pl\fR (in the \s-1CPAN\s0 distribution of
this module) for how to create a class that supports object sharing.
.PP
Does not support \f(CW\*(C`splice\*(C'\fR on arrays!
.PP
Taking references to the elements of shared arrays and hashes does not
autovivify the elements, and neither does slicing a shared array/hash over
non-existent indices/keys autovivify the elements.
.PP
\&\f(CW\*(C`share()\*(C'\fR allows you to \f(CW\*(C`share($hashref\->{key})\*(C'\fR without giving any
error message.  But the \f(CW\*(C`$hashref\->{key}\*(C'\fR is \fBnot\fR shared, causing the
error \*(L"locking can only be used on shared values\*(R" to occur when you attempt to
\&\f(CW\*(C`lock($hasref\->{key})\*(C'\fR.
.PP
Using \fIrefaddr()\fR) is unreliable for testing
whether or not two shared references are equivalent (e.g., when testing for
circular references).  Use \*(L"is_shared \s-1VARIABLE\s0\*(R" in \fIis_shared()\fR, instead:
.PP
.Vb 3
\&    use threads;
\&    use threads::shared;
\&    use Scalar::Util qw(refaddr);
.Ve
.PP
.Vb 4
\&    # If ref is shared, use threads::shared's internal ID.
\&    # Otherwise, use refaddr().
\&    my $addr1 = is_shared($ref1) || refaddr($ref1);
\&    my $addr2 = is_shared($ref2) || refaddr($ref2);
.Ve
.PP
.Vb 3
\&    if ($addr1 == $addr2) {
\&        # The refs are equivalent
\&    }
.Ve
.PP
\&\fIeach()\fR does not work properly on shared references
embedded in shared structures.  For example:
.PP
.Vb 2
\&    my %foo :shared;
\&    $foo{'bar'} = shared_clone({'a'=>'x', 'b'=>'y', 'c'=>'z'});
.Ve
.PP
.Vb 3
\&    while (my ($key, $val) = each(%{$foo{'bar'}})) {
\&        ...
\&    }
.Ve
.PP
Either of the following will work instead:
.PP
.Vb 4
\&    my $ref = $foo{'bar'};
\&    while (my ($key, $val) = each(%{$ref})) {
\&        ...
\&    }
.Ve
.PP
.Vb 4
\&    foreach my $key (keys(%{$foo{'bar'}})) {
\&        my $val = $foo{'bar'}{$key};
\&        ...
\&    }
.Ve
.PP
View existing bug reports at, and submit any new bugs, problems, patches, etc.
to: <http://rt.cpan.org/Public/Dist/Display.html?Name=threads\-shared>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
threads::shared Discussion Forum on \s-1CPAN:\s0
<http://www.cpanforum.com/dist/threads\-shared>
.PP
Annotated \s-1POD\s0 for threads::shared:
<http://annocpan.org/~JDHEDDEN/threads\-shared\-1.27/shared.pm>
.PP
Source repository:
<http://code.google.com/p/threads\-shared/>
.PP
threads, perlthrtut
.PP
<http://www.perl.com/pub/a/2002/06/11/threads.html> and
<http://www.perl.com/pub/a/2002/09/04/threads.html>
.PP
Perl threads mailing list:
<http://lists.cpan.org/showlist.cgi?name=iThreads>
.SH "AUTHOR"
.IX Header "AUTHOR"
Artur Bergman <sky \s-1AT\s0 crucially \s-1DOT\s0 net>
.PP
Documentation borrowed from the old Thread.pm.
.PP
\&\s-1CPAN\s0 version produced by Jerry D. Hedden <jdhedden \s-1AT\s0 cpan \s-1DOT\s0 org>.
.SH "LICENSE"
.IX Header "LICENSE"
threads::shared is released under the same license as Perl.
