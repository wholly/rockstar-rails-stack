# $Id: Portfile 49990 2009-04-21 23:54:39Z mcalhoun@macports.org $

PortSystem      1.0
PortGroup       muniversal 1.0

name            libart_lgpl
version         2.3.20
set branch      [join [lrange [split ${version} .] 0 1] .]
categories      graphics
platforms       darwin
maintainers     nomaintainer
description     fast 2D image manipulation library

long_description \
    Libart is a library for high-performance 2D graphics. \
    It supports a very powerful imaging model, basically the \
    same as SVG and the Java 2D API. It includes all \
    PostScript imaging operations, and adds antialiasing and \
    alpha-transparency. It is also highly tuned for \
    incremental rendering. It contains data structures and \
    algorithms suited to rapid, precise computation of Region \
    of Interest, and a two-phase rendering pipeline optimized \
    for interactive display.

homepage        http://www.levien.com/libart/
master_sites    gnome:sources/${name}/${branch}/
use_bzip2       yes

checksums       md5 d0ce67f2ebcef1e51a83136c69242a73 \
                sha1 40aa6c6c5fb27a8a45cd7aaa302a835ff374d13a \
                rmd160 184cd3dd96e9cfadcba327644bc8c9dd32da26fa

use_parallel_build  yes

pre-configure {
    # Check to see if universal_archs order is correct for post-configure below.
    if { [variant_isset universal] } {
        set ppcv     [lsearch ${universal_archs} ppc]
        set i386v    [lsearch ${universal_archs} i386]
        set ppc64v   [lsearch ${universal_archs} ppc64]
        set x86_64v  [lsearch ${universal_archs} x86_64]

        if { ${os.arch}=="i386" } {
            if { ${os.major} >= 10 } {
                if { (${ppcv}>0 && ${i386v}<0) || (${ppcv} < ${i386v}) } {
                    ui_msg "When building a universal binary of ${name}, make sure i386 is before ppc in universal_archs in ${prefix}/etc/macports/macports.conf"
                    error "incompatible universal_archs value"
                }
            }

            if { (${ppc64v}>0 && ${x86_64v}<0) || (${ppc64v} < ${x86_64v}) } {
                ui_msg "When building a universal binary of ${name}, make sure x86_64 is before ppc64 in universal_archs in ${prefix}/etc/macports/macports.conf"
                error "incompatible universal_archs value"
            }
        } else {
             if { (${ppcv}<0 && ${i386v}>0) || (${ppcv} > ${i386v}) } {
                ui_msg "When building a universal binary of ${name}, make sure ppc is before i386 in universal_archs in ${prefix}/etc/macports/macports.conf"
                error "incompatible universal_archs value"
            }

            if { (${ppc64v}<0 && ${x86_64v}>0) || (${ppc64v} > ${x86_64v}) } {
                ui_msg "When building a universal binary of ${name}, make sure ppc64 is before x86_64 in universal_archs in ${prefix}/etc/macports/macports.conf"
                error "incompatible universal_archs value"
            }
        }
    }
}

# There is a small program called gen_art_config which outputs the various sizeof values into a header file.
# The answers should be the same on PowerPC and Intel as long the same 32/64-bit mode is the same.
# The only problem might be if ART_SIZEOF_BOOL (from C99) were ever added (32-bit Intel and PowerPC would be different).
post-configure {
    if { [variant_isset universal] } {
        if { ${os.arch}=="i386" } {
            if { ${os.major}>=10 && [file exists ${worksrcpath}-ppc] } {
                reinplace "s|./gen_art_config|${worksrcpath}-i386/gen_art_config|" \
                    ${worksrcpath}-ppc/Makefile
            }
            if { [file exists ${worksrcpath}-ppc64] } {
                reinplace "s|./gen_art_config|${worksrcpath}-x86_64/gen_art_config|" \
                    ${worksrcpath}-ppc64/Makefile
            }
        } else {
            if { [file exists ${worksrcpath}-i386] } {
                reinplace "s|./gen_art_config|${worksrcpath}-ppc/gen_art_config|" \
                    ${worksrcpath}-i386/Makefile
            }
            if { [file exists ${worksrcpath}-x86_64] } {
                reinplace "s|./gen_art_config|${worksrcpath}-ppc64/gen_art_config|" \
                    ${worksrcpath}-x86_64/Makefile
            }
        }
    }
}

platform darwin 6 {
    depends_lib-append lib:libdl:dlcompat
}

livecheck.check regex
livecheck.url   http://ftp.gnome.org/pub/gnome/sources/${name}/${branch}/
livecheck.regex {LATEST-IS-(\d+(?:\.\d+)*)}
