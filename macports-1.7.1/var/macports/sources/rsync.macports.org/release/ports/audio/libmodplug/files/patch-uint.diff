diff -u src.orig/load_abc.cpp src/load_abc.cpp
--- src.orig/load_abc.cpp	2008-11-07 17:18:20.000000000 +0100
+++ src/load_abc.cpp	2008-11-07 17:19:08.000000000 +0100
@@ -3713,10 +3713,10 @@
 #define m_nDefaultTempo	of->inittempo
 #else
 	ABCHANDLE *h;
-	uint numpat;
+	unsigned int numpat;
 	MMFILE mm, *mmfile;
 #endif
-	uint t;
+	unsigned int t;
 	char	*line, *p, *pp, ch, ch0=0;
 	char barsig[52];	// for propagated accidental key signature within bar
 	char *abcparts;
@@ -5023,7 +5023,7 @@
 	m_nMinPeriod    = 28 << 2;
 	m_nMaxPeriod    = 1712 << 3;
 	// orderlist
-	for(t=0; t < (uint)orderlen; t++)
+	for(t=0; t < (unsigned int)orderlen; t++)
 		Order[t] = orderlist[t];
 	free(orderlist);	// get rid of orderlist memory
 #endif
diff -u src.orig/load_mid.cpp src/load_mid.cpp
--- src.orig/load_mid.cpp	2008-11-07 17:18:20.000000000 +0100
+++ src/load_mid.cpp	2008-11-07 17:19:21.000000000 +0100
@@ -1408,7 +1408,7 @@
 #endif
 	int ch, dmulti, maxtempo, panlow, panhigh, numchans, numtracks;
 	MIDTRACK *ttp;
-	uint t, numpats;
+	unsigned int t, numpats;
 	char buf[256];
 	long miditracklen;
 	BYTE runningstatus;
@@ -1493,7 +1493,7 @@
 		printf("Multiplying resolution and deltatimes by %d to get %d miditicks per patternrow\n",
 			dmulti, h->midispeed);
 	}
-	for( t=0; t<(uint)h->miditracks; t++ ) {
+	for( t=0; t<(unsigned int)h->miditracks; t++ ) {
 		if( h->verbose ) printf("Parsing track %d\n", t+1);
 		mmreadSBYTES(buf,4,h->mmf);
 		buf[4] = '\0';
diff -u src.orig/load_pat.cpp src/load_pat.cpp
--- src.orig/load_pat.cpp	2008-11-07 17:18:20.000000000 +0100
+++ src/load_pat.cpp	2008-11-07 17:19:33.000000000 +0100
@@ -1289,7 +1289,7 @@
 // =====================================================================================
 BOOL PAT_Load_Instruments(void *c)
 {
-	uint t;
+	unsigned int t;
 #ifdef NEWMIKMOD
 	UNIMOD *of = (UNIMOD *)c;
 	INSTRUMENT *d;
