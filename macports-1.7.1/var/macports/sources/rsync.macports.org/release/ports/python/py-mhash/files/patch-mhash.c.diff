--- mhash.c	Sat Feb 16 00:41:08 2002
+++ mhash.c.new	Fri Oct 17 15:40:31 2003
@@ -202,34 +202,7 @@
 };
 
 static char MHASH__doc__[] =
-"This is the base class, offering basic hashing functionality. MHASH is\n\
-implmented as a newstyle class. It means you may subclass it in your\n\
-python programs and extend its functionality. Don't forget to call its\n\
-__init__ method if you do this.\n\
-\n\
-Constructor:\n\
-\n\
-MHASH(algorithm [, string])\n\
-\n\
-The first parameter is one of the MHASH_* constants provided in the mhash\n\
-module. This will select the hashing algorithm you want to use. The second\n\
-is a string which will update the hash state. It's useful when you want a\n\
-oneliner hash, such as the following:\n\
-\n\
-MHASH(MHASH_SHA1, \"My hashed string\").hexdigest()\n\
-\n\
-Methods:\n\
-\n\
-update(string)  - Update the hash state with 'string'.\n\
-digest()        - Retrieve the currect digest.\n\
-hexdigest()     - Retrieve the current digest in hex format.\n\
-copy()          - Create a new MHASH object, copying the current state.\n\
-\n\
-Attributes:\n\
-\n\
-type            - Selected algorithm.\n\
-digest_size     - Digest size of the selected algorithm.
-";
+"This is the base class, offering basic hashing functionality. MHASH is implmented as a newstyle class. It means you may subclass it in your python programs and extend its functionality. Don't forget to call its __init__ method if you do this. Constructor: MHASH(algorithm [, string])  The first parameter is one of the MHASH_* constants provided in the mhash module. This will select the hashing algorithm you want to use. The second is a string which will update the hash state. It's useful when you want a oneliner hash, such as the following: MHASH(MHASH_SHA1, My hashed string).hexdigest() Methods: update(string)  - Update the hash state with 'string'. digest()        - Retrieve the currect digest. hexdigest()     - Retrieve the current digest in hex format. copy()          - Create a new MHASH object, copying the current state. Attributes: type            - Selected algorithm. digest_size     - Digest size of the selected algorithm.  ";
 
 statichere PyTypeObject MHASH_Type = {
 	PyObject_HEAD_INIT(NULL)
@@ -305,27 +278,7 @@
 }
 
 static char HMAC__doc__[] =
-"This class implements HMAC, a mechanism for message authentication\n\
-using cryptographic hash functions, described in RFC2104. HMAC can\n\
-be used to create message digests using a secret key, so that these\n\
-message digests cannot be regenerated (or replaced) by someone else.\n\
-\n\
-HMAC is implemented as a newstyle class subclassing MHASH. It has the\n\
-the same methods and the same attributes, differing only in the\n\
-constructor, explained here:\n\
-\n\
-Constructor:\n\
-\n\
-HMAC(algorithm, password [, string])\n\
-\n\
-The first parameter is one of the MHASH_* constants provided in the mhash\n\
-module, and will select the hashing algorithm you want to use. The second\n\
-is the secret key you want to use in the digest, and the third is a\n\
-string which will update the hash state. It's useful when you want a\n\
-oneliner hash, such as the following:\n\
-\n\
-MHASH(MHASH_MD5, \"My secret key\", \"My hashed string\").hexdigest()\n\
-";
+"This class implements HMAC, a mechanism for message authentication using cryptographic hash functions, described in RFC2104. HMAC can be used to create message digests using a secret key, so that these message digests cannot be regenerated (or replaced) by someone else.  HMAC is implemented as a newstyle class subclassing MHASH. It has the the same methods and the same attributes, differing only in the constructor, explained here: Constructor: HMAC(algorithm, password [, string]) The first parameter is one of the MHASH_* constants provided in the mhash module, and will select the hashing algorithm you want to use. The second is the secret key you want to use in the digest, and the third is a string which will update the hash state. It's useful when you want a oneliner hash, such as the following: MHASH(MHASH_MD5, \"My secret key\", \"My hashed string\").hexdigest()";
 
 statichere PyTypeObject HMAC_Type = {
 	PyObject_HEAD_INIT(NULL)
