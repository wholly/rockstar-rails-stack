# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 49710 2009-04-16 01:33:38Z jeremyhu@macports.org $

PortSystem 1.0

name		x264
version		20090408
categories	multimedia
platforms	darwin
maintainers	devans openmaintainer
description	x264 - a free h264/avc encoder
long_description x264 is a free library for encoding H264/AVC video streams. \
		The code is written by Laurent Aimar, Eric Petit(OS X), Min \
		Chen (vfw/nasm), Justin Clay(vfw), Måns Rullgård and Loren \
		Merritt from scratch. It is released under the terms of the \
		GPL license.
homepage	http://www.videolan.org/x264.html
master_sites	ftp://ftp.videolan.org/pub/videolan/x264/snapshots/
distname	${name}-snapshot-${version}-2245

checksums       md5     d1c7323a052740b1c16f4aea917cb561 \
                sha1    9dae6f86da058dc0a96b49102ff0dedb33c5a5a8 \
                rmd160  98e2e0089be071165363324946c0eb296a6f002e

use_bzip2	yes

depends_build	port:yasm

pre-extract {
    if {"darwin" == ${os.platform} && 9 == ${os.major}} {
        set minimum_xcodeversion 3.1
        set current_xcodeversion [exec defaults read /Developer/Applications/Xcode.app/Contents/Info CFBundleShortVersionString]
        if {[rpm-vercomp ${current_xcodeversion} ${minimum_xcodeversion}] < 0} {
            ui_error "On Mac OS X ${macosx_version}, ${name} ${version} requires Xcode ${minimum_xcodeversion} or later but you have Xcode ${current_xcodeversion}."
            return -code error "incompatible Xcode version"
        }
    }
}

configure.args \
		--enable-pthread --enable-pic --enable-shared

configure.cflags-append -I. -fno-common -read_only_relocs suppress

destroot.args	DIR_INSTALL=${destroot}${prefix}

build.target	default

variant noasm description {disable assembler optimization and remove yasm dep} {
	depends_build-delete	port:yasm
	configure.args-append	--disable-asm
}

variant G5 description {G5 specific optimizations} {
	if {! [variant_isset universal]} {
		configure.cflags-append "-mcpu=970 -mtune=970 -mpowerpc64 -mpowerpc-gpopt -fast -mabi=altivec -maltivec"
	}
}

if {![info exists universal_archs]} {
    set universal_archs {i386 ppc}
}

set first_arch [lindex ${universal_archs} 0]

set my_worksrcpaths ${worksrcpath}

variant universal {
  set my_worksrcpaths {}
  foreach arch ${universal_archs} {
    lappend my_worksrcpaths ${workpath}/${arch}
  }

  post-patch {
    foreach arch ${universal_archs} {
      if {[string equal ${arch} ${first_arch}]} {
        move ${worksrcpath} ${workpath}/${first_arch}
      } else {
        copy ${workpath}/${first_arch} ${workpath}/${arch}
      }
    }
  }

  configure {
    foreach arch ${universal_archs} {
      set my_arch_flag "-arch ${arch}"
      set my_cflags "${configure.cflags} -isysroot ${sysroot} ${my_arch_flag} -I${prefix}/include -L${prefix}/lib"
      set my_ldflags "${configure.ldflags} ${my_arch_flag}"
      set my_configure_args "--host=${arch}-apple-darwin"
      if {[string equal ${arch} ppc ] || [string equal ${arch} ppc64 ]} {
         set my_configure_args "${my_configure_args} --disable-asm"

         if {[variant_isset G5] || [string equal ${arch} ppc64 ]} {
             set my_cflags "${my_cflags} -mcpu=970 -mtune=970 -mpowerpc64 -mpowerpc-gpopt -fast -mabi=altivec -maltivec"
         }
      }
      system "cd ${workpath}/${arch} && CFLAGS=\"${my_cflags}\" CXXFLAGS=\"${my_cflags}\" LDFLAGS=\"${my_ldflags}\" ${configure.cmd} ${configure.pre_args} ${configure.args} ${my_configure_args}"
    }
  }

  build {
    foreach arch ${universal_archs} {
      system "cd ${workpath}/${arch} && ${build.cmd} ${build.pre_args}"
      # This was a first look at dylib. Needs some more investigation as I don't know ins&outs of macports
      #system "cd ${workpath}/${arch} && gcc -dynamiclib -arch ${arch} -o ${workpath}/${arch}/libx264.dylib common/*.o common/${arch}/*.o encoder/*.o"
    }
  }

  destroot {
    system "cd ${workpath}/${first_arch} && ${destroot.cmd} ${destroot.pre_args} ${destroot.post_args}"
    foreach lib [list libx264.67.dylib libx264.a] {
      set output_lib ${destroot}${prefix}/lib/${lib}
      set lipo_args {}
      foreach arch ${universal_archs} {
        lappend lipo_args -arch ${arch} ${workpath}/${arch}/${lib}
      }
      lappend lipo_args -create -output ${output_lib}
      delete ${output_lib}
      system "lipo ${lipo_args}"
    }
 
    set output_bin ${destroot}${prefix}/bin/x264
    set lipo_args {}
    foreach arch ${universal_archs} {
      lappend lipo_args -arch ${arch} ${workpath}/${arch}/x264
    }
    lappend lipo_args -create -output ${output_bin}
    delete ${output_bin}
    system "lipo ${lipo_args}"
  }
}

livecheck.check none
