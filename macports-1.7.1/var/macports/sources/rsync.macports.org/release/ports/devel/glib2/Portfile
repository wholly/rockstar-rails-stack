# $Id: Portfile 49602 2009-04-13 05:27:19Z ryandesign@macports.org $

PortSystem              1.0
PortGroup               muniversal 1.0

name                    glib2
set my_name             glib
version                 2.20.1
set branch              [join [lrange [split ${version} .] 0 1] .]
categories              devel
maintainers             ryandesign
homepage                http://www.gtk.org/
platforms               darwin
distname                ${my_name}-${version}
use_bzip2               yes
use_parallel_build      yes

description \
    Library with data structure functions and other constructs

long_description \
    Glib is a library which includes support routines for \
    C, such as lists, trees, hashes, memory allocation, and \
    many other things.

master_sites \
    gnome:sources/${my_name}/${branch}/ \
    ftp://ftp.gtk.org/pub/${my_name}/${branch}/

checksums \
    md5     d7ef53c7b65827a1baa4bad1c6893fa3 \
    sha1    4a0eceb959daa81ee1c867bfc7df8e1459d408a2 \
    rmd160  b2f1b23c8db482b335e7fa5f1c2fbb3165d43e9a

# ${prefix}/include/glib-2.0/glib/gi18n.h requires -I${prefix}/include to find libintl.h
# See http://trac.macports.org/changeset/27148
patchfiles \
    patch-glib-2.0.pc.in.diff \
    patch-gi18n.h.diff \
    patch-gio_xdgmime_xdgmime.c.diff

if { ${os.major} < 9 } {
    # Prior to Leopard, which returns 0 even if it can not find the program.
    patchfiles-append patch-which.diff
}

depends_build \
    port:pkgconfig

depends_lib \
    port:gettext \
    port:libiconv \
    path:bin/perl:perl5 \
    bin:python:python_select

configure.ldflags-append \
    -bind_at_load

configure.cflags-append \
    -fstrict-aliasing

configure.args \
    --enable-static

configure.perl    ${prefix}/bin/perl
configure.env-append  PERL_PATH=${configure.perl}

post-patch {
    reinplace "s|data_dirs = \"/usr|data_dirs = \"${prefix}/share:/usr|g" ${worksrcpath}/glib/gutils.c
    reinplace "s|path = \"/bin|path = \"${prefix}/bin:/bin|g" ${worksrcpath}/glib/gutils.c ${worksrcpath}/glib/gspawn.c
    reinplace "s|@@PREFIX@@|${prefix}|g" ${worksrcpath}/gio/xdgmime/xdgmime.c

    # Allow endian.h to be found.
    #reinplace "s|endian.h|machine/endian.h|g" ${worksrcpath}/configure
}

platform darwin {
    patchfiles-append \
        patch-child-test.c.diff
}

test.run                yes
test.target             check

post-destroot {
    file delete ${destroot}${prefix}/lib/charset.alias
}

platform darwin 6 {
    depends_lib-append lib:libdl:dlcompat
    post-configure {
        reinplace "s|#define HAVE_WCHAR_T 1|#undef HAVE_WCHAR_T|" \
            ${worksrcpath}/config.h
    }
}

if {[variant_isset universal]} {
    # When cross-compiling, use --config-cache to answer questions configure can't determine without running a program.
    # When cross-compiling, configure script does not find correct value of NM,
    #     so replicate NM value found when not cross-compiling.
    pre-configure {
        global merger_configure_args merger_configure_env merger_configure_cppflags merger_configure_ldflags

        # See http://trac.macports.org/ticket/19196.
        if { ${universal_sysroot}=="/Developer/SDKs/MacOSX10.4u.sdk" } {
            set merger_configure_cppflags(ppc64)   "-D __LP64__"
            set merger_configure_ldflags(ppc64)    "-framework Carbon"
            set merger_configure_cppflags(x86_64)  "-D __LP64__"
            set merger_configure_ldflags(x86_64)   "-framework Carbon"
        }

        if { ${os.arch}=="i386" } {
            # Determine if any cross-compiling is required.
            set need_cross  "no"
            foreach arch ${universal_archs_to_use} {
                if { ${arch}=="ppc64" || (${os.major} >= 10 && ${arch}=="ppc") } {
                    set need_cross "yes"
                }
            }

            # Find an architecture whose binaries will run on this platform.
            set run_arch ""
            foreach arch ${universal_archs_to_use} {
                if { ${arch}=="i386" || ${arch}=="x86_64" || (${os.major} < 10 && ${arch}=="ppc") } {
                    set run_arch ${arch}
                    break
                }
            }

            if { ${need_cross}=="yes" && ${run_arch}=="" } {
                ui_msg "When building a universal binary of ${name}, put i386 first in universal_archs in ${prefix}/etc/macports/macports.conf" 
 		return -code error "incompatible universal_archs value" 
            }

            if { ${os.major} >= 10 } { set merger_configure_args(ppc)  --config-cache }
            set merger_configure_args(ppc64)  --config-cache
            if { ${os.major} >= 10 } {
                set merger_configure_env(ppc)  "NM='/usr/bin/nm -p' GLIB_GENMARSHAL=${worksrcpath}-${run_arch}/gobject/glib-genmarshal"
            } else {
                set merger_configure_env(ppc)  "NM='/usr/bin/nm -p'"
            }
            set merger_configure_env(ppc64)    "NM='/usr/bin/nm -p' GLIB_GENMARSHAL=${worksrcpath}-${run_arch}/gobject/glib-genmarshal"
        } else {
            # Determine if any cross-compiling is required.
            set need_cross  "no"
            foreach arch ${universal_archs_to_use} {
                if { ${arch}=="i386" || ${arch}=="x86_64" } {
                    set need_cross "yes"
                }
            }

            # Find an architecture whose binaries will run on this platform.
            set run_arch ""
            foreach arch ${universal_archs_to_use} {
                if { ${arch}=="ppc" || ${arch}=="ppc64" } {
                    set run_arch ${arch}
                    break
                }
            }

            if { ${need_cross}=="yes" && ${run_arch}=="" } {
                ui_msg "When building a universal binary of ${name}, put ppc first in universal_archs in ${prefix}/etc/macports/macports.conf" 
 		return -code error "incompatible universal_archs value"
            }
            array set merger_configure_args {
                i386    --config-cache
                x86_64  --config-cache
            }
            set merger_configure_env(i386)    "NM='/usr/bin/nm -p' GLIB_GENMARSHAL=${worksrcpath}-${run_arch}/gobject/glib-genmarshal"
            set merger_configure_env(x86_64)  "NM='/usr/bin/nm -p' GLIB_GENMARSHAL=${worksrcpath}-${run_arch}/gobject/glib-genmarshal"
        }
    }

    post-extract {
        # Answers to questions configure can't determine without running a program.
        copy ${filespath}/config.cache ${worksrcpath}
    }

    pre-destroot {
        global merger_dont_diff

        # These tests must be done in pre-destroot to ensure universal_archs_to_use has the correct values.
        if { [llength ${universal_archs_to_use}] > 2 } {
            set merger_dont_diff ${prefix}/lib/glib-2.0/include/glibconfig.h
        }
    }
}

livecheck.check         regex
livecheck.url           http://ftp.gnome.org/pub/GNOME/sources/${my_name}/${branch}/?C=M&O=D
livecheck.regex         ${my_name}-(\[0-9.\]+)\\.tar
