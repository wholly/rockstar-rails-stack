--- darwin.c.orig	2006-02-25 19:40:17.000000000 +0100
+++ darwin.c	2006-04-27 22:15:22.000000000 +0200
@@ -189,6 +189,8 @@
     return "invalid argument";
   case kIOReturnAborted:
     return "transaction aborted";
+  case kIOReturnNotResponding:
+    return "the device is not responding";
   default:
     return "unknown error";
   }
@@ -207,6 +209,7 @@
   case kIOUSBNoAsyncPortErr:
     return ENXIO;
   case kIOReturnExclusiveAccess:
+  case kIOReturnNotResponding:
     return EBUSY;
   case kIOUSBPipeStalled:
     return LUSBDARWINSTALL;
@@ -838,19 +841,13 @@
 
   if (result == kIOReturnSuccess) {
     /* wait for write to complete */
-    if (CFRunLoopRunInMode(kCFRunLoopDefaultMode, (timeout+999)/1000, true) == kCFRunLoopRunTimedOut) {
-      (*(device->interface))->AbortPipe(device->interface, pipeRef);
-      CFRunLoopRunInMode(kCFRunLoopDefaultMode, 0, true); /* Pick up aborted callback */
-      if (usb_debug)
-	fprintf(stderr, "usb_bulk_read: input timed out\n");
-    }
+    CFRunLoopRun();
   }
 
   CFRunLoopRemoveSource(CFRunLoopGetCurrent(), cfSource, kCFRunLoopDefaultMode);
   
   /* Check the return code of both the write and completion functions. */
-  if (result != kIOReturnSuccess || (rw_arg.result != kIOReturnSuccess && 
-      rw_arg.result != kIOReturnAborted) ) {
+  if (result != kIOReturnSuccess || rw_arg.result != kIOReturnSuccess) {
     int error_code;
     char *error_str;
 
