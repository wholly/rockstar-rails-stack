Index: src/psiaccount.cpp
===================================================================
--- src/psiaccount.cpp	(Revision 1195)
+++ src/psiaccount.cpp	(Arbeitskopie)
@@ -1243,6 +1243,9 @@
 // disconnect or stop reconnecting
 void PsiAccount::logout(bool fast, const Status &s)
 {
+#ifdef PSI_PLUGINS	
+	PluginManager::instance()->logout(jid().node() + "@" + jid().domain());
+#endif
 	if(!isActive())
 		return;
 
@@ -1447,6 +1450,9 @@
 
 	// ask for roster
 	d->client->rosterRequest();
+#ifdef PSI_PLUGINS
+	PluginManager::instance()->login(jid().node() + "@" + jid().domain());
+#endif
 }
 
 void PsiAccount::cs_connectionClosed()
@@ -1618,7 +1624,7 @@
 		str = tr("Broken security layer (SASL)");
 	else
 		str = tr("None");
-	//printf("str[%s], reconn=%d\n", str.latin1(), reconn);
+//printf("str[%s], reconn=%d\n", str.latin1(), reconn);
 	*_str = str;
 	*_reconn = reconn;
 }
@@ -1864,6 +1870,11 @@
 		UserResourceList::Iterator rit = u->userResourceList().find(j.resource());
 		bool found = (rit == u->userResourceList().end()) ? false: true;
 		if(!found) {
+#ifdef PSI_PLUGINS
+			PluginManager::instance()->contactOnline(
+				jid().node() + "@" + jid().domain(),
+				j.node() + "@" + j.domain());
+#endif
 			popupType = PopupOnline;
 
 			UserResource ur(r);
@@ -1949,6 +1960,15 @@
 			}
 		}
 	}
+#ifdef PSI_PLUGINS
+	PluginManager::instance()->statusChanged(
+		jid().node() + "@" + jid().domain(),
+		j.node() + "@" + j.domain(),
+		r.name(),
+		r.priority(),
+		r.status().show(),
+		r.status().status());
+#endif
 }
 
 void PsiAccount::client_resourceUnavailable(const Jid &j, const Resource &r)
@@ -2019,6 +2039,11 @@
 		PsiGrowlNotifier::instance()->popup(this, PsiPopup::AlertOffline, j, r, u);
 #endif
 	}
+#ifdef PSI_PLUGINS
+	PluginManager::instance()->contactOffline(
+		jid().node() + "@" + jid().domain(),
+		j.node() + "@" + j.domain());
+#endif
 }
 
 void PsiAccount::client_presenceError(const Jid &j, int, const QString &str)
@@ -3493,6 +3518,14 @@
 		}
 	}
 
+#ifdef PSI_PLUGINS
+        if (! nm.body().isEmpty()) {
+                nm.setBody(PluginManager::instance()->outgoingMessage(this, nm.to(), nm.body()));
+        }
+#endif
+
+
+
 	d->client->sendMessage(nm);
 
 	// only toggle if not an invite or body is not empty
@@ -3764,6 +3797,32 @@
 	//FIXME(KIS): must now cause the event to be recreated from this xml or such. Horrid. 	
 #endif
 	
+#ifdef PSI_PLUGINS
+	if(e->type() == PsiEvent::Message) {
+		MessageEvent *me = (MessageEvent *)e;
+		Message msg = me->message();
+		UserListItem *ulItem=NULL;
+		if ( !ul.isEmpty() ) {
+			ulItem=ul.first();
+		}
+		
+		if (msg.containsHTML() && ! msg.html().text().isEmpty() ) {
+			HTMLElement htmlPart = PluginManager::instance()->incomingMessage(this,
+				msg.from(),
+				msg.html());
+			msg.setHTML(htmlPart, msg.lang());
+			msg.setBody(htmlPart.text());
+		}
+        	else if (! msg.body().isEmpty()) {
+                	msg.setBody( PluginManager::instance()->incomingMessage(this, 
+							      msg.from(),
+							      msg.body()));
+        	}
+		me->setMessage(msg);
+		e = me;
+	}
+#endif
+	
 	if(d->acc.opt_log && activationType != FromXml) {
 		if(e->type() == PsiEvent::Message || e->type() == PsiEvent::Auth) {
 			// don't log private messages
@@ -3772,10 +3831,14 @@
 		}
 	}
 
+	
 	if(e->type() == PsiEvent::Message) {
+	
 		MessageEvent *me = (MessageEvent *)e;
-		const Message &m = me->message();
+		Message msg = me->message();
+		const Message &m = msg;
 
+
 		// Pass message events to chat window
 		if ((m.containsEvents() || m.chatState() != StateNone) && m.body().isEmpty()) {
 			if (PsiOptions::instance()->getOption("options.messages.send-composing-events").toBool()) {
@@ -3840,13 +3903,7 @@
 			// FIXME: handle message errors
 			//msg.text = QString(tr("<big>[Error Message]</big><br>%1").arg(plain2rich(msg.text)));
 		}
-#ifdef PSI_PLUGINS
-		UserListItem *ulItem=NULL;
-		if ( !ul.isEmpty() )
-			ulItem=ul.first();
-		PluginManager::instance()->message(this,e->from(),ulItem,((MessageEvent*)e)->message().body());
-#endif
-	}
+}
 	else if(e->type() == PsiEvent::HttpAuth) {
 		playSound(PsiOptions::instance()->getOption("options.ui.notifications.sounds.system-message").toString());
 	}
