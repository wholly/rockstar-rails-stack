Index: src/pluginmanager.cpp
===================================================================
--- src/pluginmanager.cpp	(Revision 1195)
+++ src/pluginmanager.cpp	(Arbeitskopie)
@@ -7,6 +7,7 @@
 #include "userlist.h"
 #include "applicationinfo.h"
 #include "psioptions.h"
+#include "psiaccount.h"
 #include <QtCrypto>
 #include "xmpp_client.h"
 
@@ -71,6 +72,7 @@
  */
 void PluginManager::optionChanged(const QString& option)
 {
+	Q_UNUSED(option);
 	//QString("%1.%2").arg(loadOptionPrefix).arg(shortNames_[plugin]);
 }
 
@@ -164,12 +166,17 @@
 	plugins_.insert( plugin->name(), plugin );
 	
 	qDebug() << "connecting to plugin " << plugin->name();
+	connect(plugin, SIGNAL(sendStanza(const QString&, const QString&)),
+		this,   SLOT(sendStanza(const QString&, const QString&)));
 	connect( plugin, SIGNAL(sendStanza(const PsiAccount*, const QDomElement&)), this, SLOT(sendStanza(const PsiAccount*, const QDomElement&)));
 	connect( plugin, SIGNAL(sendStanza(const PsiAccount*, const QString&)), this, SLOT(sendStanza(const PsiAccount*, const QString&)));
 	connect( plugin, SIGNAL(setPluginOption( const QString&, const QVariant& )), this, SLOT( setPluginOption( const QString&, const QVariant& )));
 	connect( plugin, SIGNAL(getPluginOption( const QString&, QVariant&)), this, SLOT( getPluginOption( const QString&, QVariant&)));
 	connect( plugin, SIGNAL(setGlobalOption( const QString&, const QVariant& )), this, SLOT( setGlobalOption( const QString&, const QVariant& )));
 	connect( plugin, SIGNAL(getGlobalOption( const QString&, QVariant&)), this, SLOT( getGlobalOption( const QString&, QVariant&)));
+	connect(plugin, SIGNAL(getHomeDir(QString&)),
+		this, SLOT(getHomeDir(QString&)));
+	plugin->init();
 	return true;
 }
 
@@ -274,6 +281,9 @@
 		QDir dir(d);
 		foreach(QString file, dir.entryList()) {
 		  	file=dir.absoluteFilePath(file);
+		  	if (file.endsWith("..") || file.endsWith(".") ) {
+		  		continue;
+		  	}
 			qWarning(qPrintable(QString("Found plugin: %1").arg(file)));
 			if ( !loaders_.contains(file) ) { 
 				loadPlugin(file);
@@ -341,7 +351,8 @@
  */
 void PluginManager::getPluginOption( const QString& option, QVariant& value)
 {
-	
+	Q_UNUSED(option);
+	Q_UNUSED(value);
 }
 
 /**
@@ -373,17 +384,82 @@
 	else
 		qDebug("not valid option");
 }
-	
-void PluginManager::message(PsiAccount* account, const XMPP::Jid& from, const UserListItem* ul, const QString& message)
+
+
+
+QList<QAction*> PluginManager::getChatDlgMenuEntries(QWidget* parent, 
+                                                     PsiAccount* account,
+					           						 const XMPP::Jid& otherjid)
 {
-	QString fromString=QString("%1").arg(from.full());
+	const QString accountString = QString("%1").arg(account->jid().full());
+	const QString otherJidString = QString("%1").arg(otherjid.full());
+	QList<QAction*> res;
+ 	foreach(PsiPlugin* plugin, plugins_.values() ) 
+	{
+		QAction* m = plugin->getChatDlgMenuEntry(parent, accountString,
+											     otherJidString);
+		if (m) {
+			res.append(m);
+		}
+	}
+	return res;
+}
+
+
+
+/**
+ * incomingMessage. Function is only for non-HTML messages.
+ */
+QString PluginManager::incomingMessage(PsiAccount* account, const XMPP::Jid& from, 
+	QString message) {
+	const QString toString = QString("%1").arg(account->jid().full());
+	const QString fromString=QString("%1").arg(from.full());
+	//qDebug() << "pluginmanager: incomming message from " << fromString 
+	//	 << " to " << toString;
 	qDebug() << "message from" << fromString;
 	foreach(PsiPlugin* plugin, plugins_.values() ) {
-		plugin->message( account, message , fromString , from.full() );
+		message = plugin->incomingMessage(fromString, toString, message );
+		//qDebug() << plugin->shortName() << " returned: " << endl
+		//	<< message << "\n--\n";
 	}
+	//qDebug() << "PluginManager::incomingMessage:\n" << message << endl << "--";
+	return message;
 }
 
 /**
+ * incommingMessage with HTML content.
+ */
+HTMLElement PluginManager::incomingMessage(PsiAccount* account, const XMPP::Jid& from,
+                                           HTMLElement htmlMessage)
+{
+	const QString toString = QString("%1").arg(account->jid().full());
+	const QString fromString=QString("%1").arg(from.full());
+	//qDebug() << "pluginmanager: incomming message from " << fromString 
+	//	 << " to " << toString;
+	QDomElement body = htmlMessage.body();
+
+	//QString str;
+	//QTextStream ts( &str, IO_WriteOnly );
+	//body.save(ts, 8);
+	//qDebug() << "--\n" << str << "\n--\n\n";
+
+	foreach(PsiPlugin* plugin, plugins_.values())
+	{
+		body = plugin->incomingMessage(fromString, toString, body);
+		//qDebug() << plugin->shortName() << " returned: " << endl
+		//	<< message << "\n--\n";
+	}
+	
+	//QString str;
+	//QTextStream ts( &str, IO_WriteOnly );
+	//body.save(ts, 2);
+	//qDebug() << "pluginmanager: modified message:\n" << str << "\n--\n";
+		
+	htmlMessage.setBody(body);
+	return htmlMessage;
+}
+
+/**
  * \brief Give each plugin the opportunity to process the incoming event
  * 
  * Each plugin is passed the event in turn. Any plugin may then modify the event
@@ -429,7 +505,27 @@
 	clients_[account]->send(stanza);
 }
 
+
 /**
+ * Sends a stanza from the account spezified with fromJid.
+ *
+ */
+void PluginManager::sendStanza(const QString& fromJid, const QString& stanza) {
+	//qDebug() << "pluginmanager: sending stanza from account " << fromJid 
+	//	<< endl << stanza << "\n--";
+	QMapIterator<const PsiAccount*, XMPP::Client*> iterator(clients_);
+	while (iterator.hasNext()) {
+		iterator.next();
+		const PsiAccount* account = iterator.key();
+		if ( ! QString::compare(account->jid().full(), fromJid, Qt::CaseInsensitive)) {
+			clients_.value(account)->send(stanza);
+			break;
+		}
+	}
+}
+
+
+/**
  * Tells the plugin manager about an XMPP::Client and the owning PsiAccount
  */
 void PluginManager::addAccount( const PsiAccount* account, XMPP::Client* client)
@@ -447,6 +543,83 @@
 	return true;
 }
 
+
+/**
+ * process an outgoing message
+ */
+QString PluginManager::outgoingMessage( PsiAccount* account, const XMPP::Jid& to, QString message ) {
+	const QString toString=QString("%1").arg(to.full());
+	const QString fromString = QString("%1").arg(account->jid().full());
+	//qDebug() << "pluginmanager: outgoing message from " << fromString << " to "
+	//	<< toString;
+	foreach(PsiPlugin* plugin, plugins_.values() ) {
+		message = plugin->outgoingMessage( fromString, toString, message );
+	}
+	return message;
+
+}
+
+/**
+ * Get the home-directory used by psi.
+ */
+void PluginManager::getHomeDir(QString& dir) {
+	dir = ApplicationInfo::homeDir();
+}
+
+/**
+ * A user from the roster has changed his status.
+ */
+void PluginManager::statusChanged(QString account, QString jid, QString resource, int prio, QString status, QString text) {
+	foreach(PsiPlugin* plugin, plugins_.values() ) {
+		plugin->statusChanged(account, jid, resource, prio, status, text);
+	}
+}
+
+/**
+ * A user from the roster has gone offline
+ */
+void PluginManager::contactOffline(QString account, QString jid) {
+	foreach(PsiPlugin* plugin, plugins_.values() ) {
+		plugin->contactOffline(account, jid);
+	}
+}
+
+/**
+ * A user from the roster has become available
+ */
+void PluginManager::contactOnline(QString account, QString jid) {
+	foreach(PsiPlugin* plugin, plugins_.values() ) {
+		plugin->contactOnline(account, jid);
+	}
+}
+
+/**
+ * A local account has succsesfully logged in
+ */
+void PluginManager::login(QString jid) {
+	foreach(PsiPlugin* plugin, plugins_.values() ) {
+		plugin->login(jid);
+	}
+
+}
+
+/**
+ * Account has logged of from the server.
+ */
+void PluginManager::logout(QString jid) {
+	foreach(PsiPlugin* plugin, plugins_.values() ) {
+		plugin->logout(jid);
+	}
+
+}
+
+void PluginManager::quitProgram() {
+	foreach(PsiPlugin* plugin, plugins_.values() ) {
+		plugin->quitProgram();
+	}
+}
+
+	
 PluginManager* PluginManager::instance_ = NULL;
 const QString PluginManager::loadOptionPrefix = "plugins.auto-load";
 const QString PluginManager::pluginOptionPrefix = "plugins.options";
