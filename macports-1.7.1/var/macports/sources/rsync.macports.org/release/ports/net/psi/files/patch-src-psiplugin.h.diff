Index: src/psiplugin.h
===================================================================
--- src/psiplugin.h	(Revision 1195)
+++ src/psiplugin.h	(Arbeitskopie)
@@ -28,7 +28,9 @@
 
 #include <QObject>
 #include <QtCore>
-#include <QDomNode>
+#include <QtXml>
+#include <QAction>
+#include <QToolButton>
 
 class PsiAccount;
 class QDomElement;
@@ -53,6 +55,7 @@
 	 * \return Plugin name
 	 */
 	virtual QString name() const = 0;
+
 	/** \brief Short name for the plugin
 	 *	This is the short name of the plugin, used for options structures. 
 	 * It must consist of only alphanumerics (no spaces or punctuation).
@@ -66,11 +69,40 @@
 	 * \return Plugin version string
 	 */
 	virtual QString version() const = 0; 
-	
-	virtual void message( const PsiAccount* account, const QString& message, const QString& fromJid, const QString& fromDisplay) 
-	{Q_UNUSED(account);Q_UNUSED(message);Q_UNUSED(fromJid);Q_UNUSED(fromDisplay);}
 
 	/**
+	 * Allows the plugin to add a entry to the chat dialog menu.
+	 */
+	virtual QAction* getChatDlgMenuEntry(QWidget* parent,
+				       	     const QString& fromJid,
+				             const QString& toJid)
+	{Q_UNUSED(parent);Q_UNUSED(fromJid);Q_UNUSED(toJid);return NULL;}
+
+	/**
+	 * process incoming message
+	 */
+	virtual QString incomingMessage( const QString& fromJid,
+			      const QString& toJid, 
+			      const QString& message) 
+	{Q_UNUSED(fromJid);Q_UNUSED(toJid);Q_UNUSED(message);return NULL;}
+
+	/**
+	 * process incoming HTML message
+	 */
+	virtual QDomElement incomingMessage( const QString& fromJid,
+			      const QString& toJid, 
+			      const QDomElement& html) 
+	{Q_UNUSED(fromJid);Q_UNUSED(toJid);Q_UNUSED(html);return QDomElement();}
+
+	/** 
+	 * process outgoing message
+	 */
+	virtual QString outgoingMessage(const QString& fromJid, 
+					const QString& toJid, 
+					const QString& message)
+	{Q_UNUSED(fromJid);Q_UNUSED(toJid);Q_UNUSED(message); return NULL;}
+
+	/**
 	 * \brief Plugin options widget
 	 * This method is called by the Psi options system to retrieve
 	 * a widget containing the options for this plugin.
@@ -81,10 +113,17 @@
 	virtual QWidget* options() {return NULL;} 
 	
 
-	virtual bool processEvent( const PsiAccount* account, QDomNode &event ) {Q_UNUSED(account);Q_UNUSED(event);return true;}
+	/**
+	 * 
+	 *
+	 */
+	virtual bool processEvent( const PsiAccount* account, QDomNode &event ) 
+	{Q_UNUSED(account);Q_UNUSED(event);return true;}
 
+
 	/**
-	 * Convenience method for plugins, allowing them to convert a QDomElement to a QString
+	 * Convenience method for plugins, allowing them to convert a QDomElement 
+	 * to a QString
 	 */
 	static QString toString(const QDomNode& xml)
 	{
@@ -93,7 +132,53 @@
 		xml.save(stream, 0);
 		return QString(*stream.string());
 	}
-	
+
+	/* initialize the plugin. called from the pluginmanager after loading */
+	virtual void init() {return;}
+
+	/* a contact has become available */
+	virtual void contactOnline(QString account, QString jid) {
+		Q_UNUSED(jid);
+		Q_UNUSED(account);
+		return;
+	}
+
+	/* a contact has become unavailable */
+	virtual void contactOffline(QString account, QString jid) {
+		Q_UNUSED(jid);
+		Q_UNUSED(account);
+		return;
+	}
+
+	/* a contact has changed its status */
+	virtual void statusChanged(QString account, QString jid, QString resource, int prio, 
+		QString status, QString text) {
+		Q_UNUSED(account);
+		Q_UNUSED(jid);
+		Q_UNUSED(resource);
+		Q_UNUSED(prio);
+		Q_UNUSED(status);
+		Q_UNUSED(text);
+		return;
+	}
+
+	/* account logged in */
+	virtual void login(QString jid) {
+		Q_UNUSED(jid);
+		return;
+	}
+
+	/* account went offline */
+	virtual void logout(QString jid) {
+		Q_UNUSED(jid);
+		return;
+	}
+
+	/* user want to exit psi */
+	virtual void quitProgram() {
+		return;
+	}
+
 signals:
 	/**
 	 *	\brief Signals that the plugin wants to send a stanza.
@@ -101,7 +186,7 @@
 	 * \param account The account name, as used by the plugin interface.
 	 * \param stanza The stanza to be sent.
 	 */
-	//void sendStanza( const PsiAccount* account, const QDomElement& stanza);
+	void sendStanza( const PsiAccount* account, const QDomElement& stanza);
 
 	/**
 	 *	\brief Signals that the plugin wants to send a stanza.
@@ -111,7 +196,14 @@
 	 */
 	void sendStanza( const PsiAccount* account, const QString& stanza);
 	
+	
 	/**
+	 * Send a stanza from the account with the jid fromJid.
+	 *
+	 */
+	void sendStanza( const QString& fromJid, const QString& stanza);
+	
+	/**
 	 * \brief Requests an item in the Psi menu for the plugin
 	 * 
 	 * \param label The text to be inserted in the menu
@@ -162,6 +254,11 @@
 	 */
 	void getGlobalOption( const QString& option, QVariant& value);
 	
+	/**
+	 * Returns the home-directory used by psi
+	 */
+	void getHomeDir(QString& dir);
+
 //protected:
 
 	
