/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse MYSQLparse
#define yylex   MYSQLlex
#define yyerror MYSQLerror
#define yylval  MYSQLlval
#define yychar  MYSQLchar
#define yydebug MYSQLdebug
#define yynerrs MYSQLnerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYZE_SYM = 269,
     AND_AND_SYM = 270,
     AND_SYM = 271,
     ANY_SYM = 272,
     AS = 273,
     ASC = 274,
     ASCII_SYM = 275,
     ASENSITIVE_SYM = 276,
     AT_SYM = 277,
     AUTHORS_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CHAIN_SYM = 309,
     CHANGE = 310,
     CHANGED = 311,
     CHARSET = 312,
     CHAR_SYM = 313,
     CHECKSUM_SYM = 314,
     CHECK_SYM = 315,
     CIPHER_SYM = 316,
     CLIENT_SYM = 317,
     CLOSE_SYM = 318,
     COALESCE = 319,
     CODE_SYM = 320,
     COLLATE_SYM = 321,
     COLLATION_SYM = 322,
     COLUMNS = 323,
     COLUMN_SYM = 324,
     COMMENT_SYM = 325,
     COMMITTED_SYM = 326,
     COMMIT_SYM = 327,
     COMPACT_SYM = 328,
     COMPLETION_SYM = 329,
     COMPRESSED_SYM = 330,
     CONCURRENT = 331,
     CONDITION_SYM = 332,
     CONNECTION_SYM = 333,
     CONSISTENT_SYM = 334,
     CONSTRAINT = 335,
     CONTAINS_SYM = 336,
     CONTEXT_SYM = 337,
     CONTINUE_SYM = 338,
     CONTRIBUTORS_SYM = 339,
     CONVERT_SYM = 340,
     COUNT_SYM = 341,
     CPU_SYM = 342,
     CREATE = 343,
     CROSS = 344,
     CUBE_SYM = 345,
     CURDATE = 346,
     CURRENT_USER = 347,
     CURSOR_SYM = 348,
     CURTIME = 349,
     DATABASE = 350,
     DATABASES = 351,
     DATAFILE_SYM = 352,
     DATA_SYM = 353,
     DATETIME = 354,
     DATE_ADD_INTERVAL = 355,
     DATE_SUB_INTERVAL = 356,
     DATE_SYM = 357,
     DAY_HOUR_SYM = 358,
     DAY_MICROSECOND_SYM = 359,
     DAY_MINUTE_SYM = 360,
     DAY_SECOND_SYM = 361,
     DAY_SYM = 362,
     DEALLOCATE_SYM = 363,
     DECIMAL_NUM = 364,
     DECIMAL_SYM = 365,
     DECLARE_SYM = 366,
     DEFAULT = 367,
     DEFINER_SYM = 368,
     DELAYED_SYM = 369,
     DELAY_KEY_WRITE_SYM = 370,
     DELETE_SYM = 371,
     DESC = 372,
     DESCRIBE = 373,
     DES_KEY_FILE = 374,
     DETERMINISTIC_SYM = 375,
     DIRECTORY_SYM = 376,
     DISABLE_SYM = 377,
     DISCARD = 378,
     DISK_SYM = 379,
     DISTINCT = 380,
     DIV_SYM = 381,
     DOUBLE_SYM = 382,
     DO_SYM = 383,
     DROP = 384,
     DUAL_SYM = 385,
     DUMPFILE = 386,
     DUPLICATE_SYM = 387,
     DYNAMIC_SYM = 388,
     EACH_SYM = 389,
     ELSE = 390,
     ELSEIF_SYM = 391,
     ENABLE_SYM = 392,
     ENCLOSED = 393,
     END = 394,
     ENDS_SYM = 395,
     END_OF_INPUT = 396,
     ENGINES_SYM = 397,
     ENGINE_SYM = 398,
     ENUM = 399,
     EQ = 400,
     EQUAL_SYM = 401,
     ERRORS = 402,
     ESCAPED = 403,
     ESCAPE_SYM = 404,
     EVENTS_SYM = 405,
     EVENT_SYM = 406,
     EVERY_SYM = 407,
     EXECUTE_SYM = 408,
     EXISTS = 409,
     EXIT_SYM = 410,
     EXPANSION_SYM = 411,
     EXTENDED_SYM = 412,
     EXTENT_SIZE_SYM = 413,
     EXTRACT_SYM = 414,
     FALSE_SYM = 415,
     FAST_SYM = 416,
     FAULTS_SYM = 417,
     FETCH_SYM = 418,
     FILE_SYM = 419,
     FIRST_SYM = 420,
     FIXED_SYM = 421,
     FLOAT_NUM = 422,
     FLOAT_SYM = 423,
     FLUSH_SYM = 424,
     FORCE_SYM = 425,
     FOREIGN = 426,
     FOR_SYM = 427,
     FOUND_SYM = 428,
     FRAC_SECOND_SYM = 429,
     FROM = 430,
     FULL = 431,
     FULLTEXT_SYM = 432,
     FUNCTION_SYM = 433,
     GE = 434,
     GEOMETRYCOLLECTION = 435,
     GEOMETRY_SYM = 436,
     GET_FORMAT = 437,
     GLOBAL_SYM = 438,
     GRANT = 439,
     GRANTS = 440,
     GROUP_SYM = 441,
     GROUP_CONCAT_SYM = 442,
     GT_SYM = 443,
     HANDLER_SYM = 444,
     HASH_SYM = 445,
     HAVING = 446,
     HELP_SYM = 447,
     HEX_NUM = 448,
     HIGH_PRIORITY = 449,
     HOST_SYM = 450,
     HOSTS_SYM = 451,
     HOUR_MICROSECOND_SYM = 452,
     HOUR_MINUTE_SYM = 453,
     HOUR_SECOND_SYM = 454,
     HOUR_SYM = 455,
     IDENT = 456,
     IDENTIFIED_SYM = 457,
     IDENT_QUOTED = 458,
     IF = 459,
     IGNORE_SYM = 460,
     IMPORT = 461,
     INDEXES = 462,
     INDEX_SYM = 463,
     INFILE = 464,
     INITIAL_SIZE_SYM = 465,
     INNER_SYM = 466,
     INNOBASE_SYM = 467,
     INOUT_SYM = 468,
     INSENSITIVE_SYM = 469,
     INSERT = 470,
     INSERT_METHOD = 471,
     INSTALL_SYM = 472,
     INTERVAL_SYM = 473,
     INTO = 474,
     INT_SYM = 475,
     INVOKER_SYM = 476,
     IN_SYM = 477,
     IO_SYM = 478,
     IPC_SYM = 479,
     IS = 480,
     ISOLATION = 481,
     ISSUER_SYM = 482,
     ITERATE_SYM = 483,
     JOIN_SYM = 484,
     KEYS = 485,
     KEY_BLOCK_SIZE = 486,
     KEY_SYM = 487,
     KILL_SYM = 488,
     LANGUAGE_SYM = 489,
     LAST_SYM = 490,
     LE = 491,
     LEADING = 492,
     LEAVES = 493,
     LEAVE_SYM = 494,
     LEFT = 495,
     LESS_SYM = 496,
     LEVEL_SYM = 497,
     LEX_HOSTNAME = 498,
     LIKE = 499,
     LIMIT = 500,
     LINEAR_SYM = 501,
     LINES = 502,
     LINESTRING = 503,
     LIST_SYM = 504,
     LOAD = 505,
     LOCAL_SYM = 506,
     LOCATOR_SYM = 507,
     LOCKS_SYM = 508,
     LOCK_SYM = 509,
     LOGFILE_SYM = 510,
     LOGS_SYM = 511,
     LONGBLOB = 512,
     LONGTEXT = 513,
     LONG_NUM = 514,
     LONG_SYM = 515,
     LOOP_SYM = 516,
     LOW_PRIORITY = 517,
     LT = 518,
     MASTER_CONNECT_RETRY_SYM = 519,
     MASTER_HOST_SYM = 520,
     MASTER_LOG_FILE_SYM = 521,
     MASTER_LOG_POS_SYM = 522,
     MASTER_PASSWORD_SYM = 523,
     MASTER_PORT_SYM = 524,
     MASTER_SERVER_ID_SYM = 525,
     MASTER_SSL_CAPATH_SYM = 526,
     MASTER_SSL_CA_SYM = 527,
     MASTER_SSL_CERT_SYM = 528,
     MASTER_SSL_CIPHER_SYM = 529,
     MASTER_SSL_KEY_SYM = 530,
     MASTER_SSL_SYM = 531,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 532,
     MASTER_SYM = 533,
     MASTER_USER_SYM = 534,
     MATCH = 535,
     MAX_CONNECTIONS_PER_HOUR = 536,
     MAX_QUERIES_PER_HOUR = 537,
     MAX_ROWS = 538,
     MAX_SIZE_SYM = 539,
     MAX_SYM = 540,
     MAX_UPDATES_PER_HOUR = 541,
     MAX_USER_CONNECTIONS_SYM = 542,
     MAX_VALUE_SYM = 543,
     MEDIUMBLOB = 544,
     MEDIUMINT = 545,
     MEDIUMTEXT = 546,
     MEDIUM_SYM = 547,
     MEMORY_SYM = 548,
     MERGE_SYM = 549,
     MICROSECOND_SYM = 550,
     MIGRATE_SYM = 551,
     MINUTE_MICROSECOND_SYM = 552,
     MINUTE_SECOND_SYM = 553,
     MINUTE_SYM = 554,
     MIN_ROWS = 555,
     MIN_SYM = 556,
     MODE_SYM = 557,
     MODIFIES_SYM = 558,
     MODIFY_SYM = 559,
     MOD_SYM = 560,
     MONTH_SYM = 561,
     MULTILINESTRING = 562,
     MULTIPOINT = 563,
     MULTIPOLYGON = 564,
     MUTEX_SYM = 565,
     NAMES_SYM = 566,
     NAME_SYM = 567,
     NATIONAL_SYM = 568,
     NATURAL = 569,
     NCHAR_STRING = 570,
     NCHAR_SYM = 571,
     NDBCLUSTER_SYM = 572,
     NE = 573,
     NEG = 574,
     NEW_SYM = 575,
     NEXT_SYM = 576,
     NODEGROUP_SYM = 577,
     NONE_SYM = 578,
     NOT2_SYM = 579,
     NOT_SYM = 580,
     NOW_SYM = 581,
     NO_SYM = 582,
     NO_WAIT_SYM = 583,
     NO_WRITE_TO_BINLOG = 584,
     NULL_SYM = 585,
     NUM = 586,
     NUMERIC_SYM = 587,
     NVARCHAR_SYM = 588,
     OFFSET_SYM = 589,
     OLD_PASSWORD = 590,
     ON = 591,
     ONE_SHOT_SYM = 592,
     ONE_SYM = 593,
     OPEN_SYM = 594,
     OPTIMIZE = 595,
     OPTIONS_SYM = 596,
     OPTION = 597,
     OPTIONALLY = 598,
     OR2_SYM = 599,
     ORDER_SYM = 600,
     OR_OR_SYM = 601,
     OR_SYM = 602,
     OUTER = 603,
     OUTFILE = 604,
     OUT_SYM = 605,
     OWNER_SYM = 606,
     PACK_KEYS_SYM = 607,
     PAGE_SYM = 608,
     PAGE_CHECKSUM_SYM = 609,
     PARAM_MARKER = 610,
     PARSER_SYM = 611,
     PARTIAL = 612,
     PARTITIONING_SYM = 613,
     PARTITIONS_SYM = 614,
     PARTITION_SYM = 615,
     PASSWORD = 616,
     PHASE_SYM = 617,
     PLUGINS_SYM = 618,
     PLUGIN_SYM = 619,
     POINT_SYM = 620,
     POLYGON = 621,
     PORT_SYM = 622,
     POSITION_SYM = 623,
     PRECISION = 624,
     PREPARE_SYM = 625,
     PRESERVE_SYM = 626,
     PREV_SYM = 627,
     PRIMARY_SYM = 628,
     PRIVILEGES = 629,
     PROCEDURE = 630,
     PROCESS = 631,
     PROCESSLIST_SYM = 632,
     PROFILE_SYM = 633,
     PROFILES_SYM = 634,
     PURGE = 635,
     QUARTER_SYM = 636,
     QUERY_SYM = 637,
     QUICK = 638,
     RANGE_SYM = 639,
     READS_SYM = 640,
     READ_ONLY_SYM = 641,
     READ_SYM = 642,
     READ_WRITE_SYM = 643,
     REAL = 644,
     REBUILD_SYM = 645,
     RECOVER_SYM = 646,
     REDOFILE_SYM = 647,
     REDO_BUFFER_SIZE_SYM = 648,
     REDUNDANT_SYM = 649,
     REFERENCES = 650,
     REGEXP = 651,
     RELAY_LOG_FILE_SYM = 652,
     RELAY_LOG_POS_SYM = 653,
     RELAY_THREAD = 654,
     RELEASE_SYM = 655,
     RELOAD = 656,
     REMOVE_SYM = 657,
     RENAME = 658,
     REORGANIZE_SYM = 659,
     REPAIR = 660,
     REPEATABLE_SYM = 661,
     REPEAT_SYM = 662,
     REPLACE = 663,
     REPLICATION = 664,
     REQUIRE_SYM = 665,
     RESET_SYM = 666,
     RESOURCES = 667,
     RESTORE_SYM = 668,
     RESTRICT = 669,
     RESUME_SYM = 670,
     RETURNS_SYM = 671,
     RETURN_SYM = 672,
     REVOKE = 673,
     RIGHT = 674,
     ROLLBACK_SYM = 675,
     ROLLUP_SYM = 676,
     ROUTINE_SYM = 677,
     ROWS_SYM = 678,
     ROW_FORMAT_SYM = 679,
     ROW_SYM = 680,
     RTREE_SYM = 681,
     SAVEPOINT_SYM = 682,
     SCHEDULE_SYM = 683,
     SECOND_MICROSECOND_SYM = 684,
     SECOND_SYM = 685,
     SECURITY_SYM = 686,
     SELECT_SYM = 687,
     SENSITIVE_SYM = 688,
     SEPARATOR_SYM = 689,
     SERIALIZABLE_SYM = 690,
     SERIAL_SYM = 691,
     SESSION_SYM = 692,
     SERVER_SYM = 693,
     SERVER_OPTIONS = 694,
     SET = 695,
     SET_VAR = 696,
     SHARE_SYM = 697,
     SHIFT_LEFT = 698,
     SHIFT_RIGHT = 699,
     SHOW = 700,
     SHUTDOWN = 701,
     SIGNED_SYM = 702,
     SIMPLE_SYM = 703,
     SLAVE = 704,
     SMALLINT = 705,
     SNAPSHOT_SYM = 706,
     SOCKET_SYM = 707,
     SONAME_SYM = 708,
     SOUNDS_SYM = 709,
     SOURCE_SYM = 710,
     SPATIAL_SYM = 711,
     SPECIFIC_SYM = 712,
     SQLEXCEPTION_SYM = 713,
     SQLSTATE_SYM = 714,
     SQLWARNING_SYM = 715,
     SQL_BIG_RESULT = 716,
     SQL_BUFFER_RESULT = 717,
     SQL_CACHE_SYM = 718,
     SQL_CALC_FOUND_ROWS = 719,
     SQL_NO_CACHE_SYM = 720,
     SQL_SMALL_RESULT = 721,
     SQL_SYM = 722,
     SQL_THREAD = 723,
     SSL_SYM = 724,
     STARTING = 725,
     STARTS_SYM = 726,
     START_SYM = 727,
     STATUS_SYM = 728,
     STDDEV_SAMP_SYM = 729,
     STD_SYM = 730,
     STOP_SYM = 731,
     STORAGE_SYM = 732,
     STRAIGHT_JOIN = 733,
     STRING_SYM = 734,
     SUBDATE_SYM = 735,
     SUBJECT_SYM = 736,
     SUBPARTITIONS_SYM = 737,
     SUBPARTITION_SYM = 738,
     SUBSTRING = 739,
     SUM_SYM = 740,
     SUPER_SYM = 741,
     SUSPEND_SYM = 742,
     SWAPS_SYM = 743,
     SWITCHES_SYM = 744,
     SYSDATE = 745,
     TABLES = 746,
     TABLESPACE = 747,
     TABLE_REF_PRIORITY = 748,
     TABLE_SYM = 749,
     TABLE_CHECKSUM_SYM = 750,
     TEMPORARY = 751,
     TEMPTABLE_SYM = 752,
     TERMINATED = 753,
     TEXT_STRING = 754,
     TEXT_SYM = 755,
     THAN_SYM = 756,
     THEN_SYM = 757,
     TIMESTAMP = 758,
     TIMESTAMP_ADD = 759,
     TIMESTAMP_DIFF = 760,
     TIME_SYM = 761,
     TINYBLOB = 762,
     TINYINT = 763,
     TINYTEXT = 764,
     TO_SYM = 765,
     TRAILING = 766,
     TRANSACTION_SYM = 767,
     TRANSACTIONAL_SYM = 768,
     TRIGGERS_SYM = 769,
     TRIGGER_SYM = 770,
     TRIM = 771,
     TRUE_SYM = 772,
     TRUNCATE_SYM = 773,
     TYPES_SYM = 774,
     TYPE_SYM = 775,
     UDF_RETURNS_SYM = 776,
     ULONGLONG_NUM = 777,
     UNCOMMITTED_SYM = 778,
     UNDEFINED_SYM = 779,
     UNDERSCORE_CHARSET = 780,
     UNDOFILE_SYM = 781,
     UNDO_BUFFER_SIZE_SYM = 782,
     UNDO_SYM = 783,
     UNICODE_SYM = 784,
     UNINSTALL_SYM = 785,
     UNION_SYM = 786,
     UNIQUE_SYM = 787,
     UNKNOWN_SYM = 788,
     UNLOCK_SYM = 789,
     UNSIGNED = 790,
     UNTIL_SYM = 791,
     UPDATE_SYM = 792,
     UPGRADE_SYM = 793,
     USAGE = 794,
     USER = 795,
     USE_FRM = 796,
     USE_SYM = 797,
     USING = 798,
     UTC_DATE_SYM = 799,
     UTC_TIMESTAMP_SYM = 800,
     UTC_TIME_SYM = 801,
     VALUES = 802,
     VALUE_SYM = 803,
     VARBINARY = 804,
     VARCHAR = 805,
     VARIABLES = 806,
     VARIANCE_SYM = 807,
     VARYING = 808,
     VAR_SAMP_SYM = 809,
     VIEW_SYM = 810,
     WAIT_SYM = 811,
     WARNINGS = 812,
     WEEK_SYM = 813,
     WHEN_SYM = 814,
     WHERE = 815,
     WHILE_SYM = 816,
     WITH = 817,
     WORK_SYM = 818,
     WRAPPER_SYM = 819,
     WRITE_SYM = 820,
     X509_SYM = 821,
     XA_SYM = 822,
     XOR = 823,
     YEAR_MONTH_SYM = 824,
     YEAR_SYM = 825,
     ZEROFILL = 826
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYZE_SYM 269
#define AND_AND_SYM 270
#define AND_SYM 271
#define ANY_SYM 272
#define AS 273
#define ASC 274
#define ASCII_SYM 275
#define ASENSITIVE_SYM 276
#define AT_SYM 277
#define AUTHORS_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CHAIN_SYM 309
#define CHANGE 310
#define CHANGED 311
#define CHARSET 312
#define CHAR_SYM 313
#define CHECKSUM_SYM 314
#define CHECK_SYM 315
#define CIPHER_SYM 316
#define CLIENT_SYM 317
#define CLOSE_SYM 318
#define COALESCE 319
#define CODE_SYM 320
#define COLLATE_SYM 321
#define COLLATION_SYM 322
#define COLUMNS 323
#define COLUMN_SYM 324
#define COMMENT_SYM 325
#define COMMITTED_SYM 326
#define COMMIT_SYM 327
#define COMPACT_SYM 328
#define COMPLETION_SYM 329
#define COMPRESSED_SYM 330
#define CONCURRENT 331
#define CONDITION_SYM 332
#define CONNECTION_SYM 333
#define CONSISTENT_SYM 334
#define CONSTRAINT 335
#define CONTAINS_SYM 336
#define CONTEXT_SYM 337
#define CONTINUE_SYM 338
#define CONTRIBUTORS_SYM 339
#define CONVERT_SYM 340
#define COUNT_SYM 341
#define CPU_SYM 342
#define CREATE 343
#define CROSS 344
#define CUBE_SYM 345
#define CURDATE 346
#define CURRENT_USER 347
#define CURSOR_SYM 348
#define CURTIME 349
#define DATABASE 350
#define DATABASES 351
#define DATAFILE_SYM 352
#define DATA_SYM 353
#define DATETIME 354
#define DATE_ADD_INTERVAL 355
#define DATE_SUB_INTERVAL 356
#define DATE_SYM 357
#define DAY_HOUR_SYM 358
#define DAY_MICROSECOND_SYM 359
#define DAY_MINUTE_SYM 360
#define DAY_SECOND_SYM 361
#define DAY_SYM 362
#define DEALLOCATE_SYM 363
#define DECIMAL_NUM 364
#define DECIMAL_SYM 365
#define DECLARE_SYM 366
#define DEFAULT 367
#define DEFINER_SYM 368
#define DELAYED_SYM 369
#define DELAY_KEY_WRITE_SYM 370
#define DELETE_SYM 371
#define DESC 372
#define DESCRIBE 373
#define DES_KEY_FILE 374
#define DETERMINISTIC_SYM 375
#define DIRECTORY_SYM 376
#define DISABLE_SYM 377
#define DISCARD 378
#define DISK_SYM 379
#define DISTINCT 380
#define DIV_SYM 381
#define DOUBLE_SYM 382
#define DO_SYM 383
#define DROP 384
#define DUAL_SYM 385
#define DUMPFILE 386
#define DUPLICATE_SYM 387
#define DYNAMIC_SYM 388
#define EACH_SYM 389
#define ELSE 390
#define ELSEIF_SYM 391
#define ENABLE_SYM 392
#define ENCLOSED 393
#define END 394
#define ENDS_SYM 395
#define END_OF_INPUT 396
#define ENGINES_SYM 397
#define ENGINE_SYM 398
#define ENUM 399
#define EQ 400
#define EQUAL_SYM 401
#define ERRORS 402
#define ESCAPED 403
#define ESCAPE_SYM 404
#define EVENTS_SYM 405
#define EVENT_SYM 406
#define EVERY_SYM 407
#define EXECUTE_SYM 408
#define EXISTS 409
#define EXIT_SYM 410
#define EXPANSION_SYM 411
#define EXTENDED_SYM 412
#define EXTENT_SIZE_SYM 413
#define EXTRACT_SYM 414
#define FALSE_SYM 415
#define FAST_SYM 416
#define FAULTS_SYM 417
#define FETCH_SYM 418
#define FILE_SYM 419
#define FIRST_SYM 420
#define FIXED_SYM 421
#define FLOAT_NUM 422
#define FLOAT_SYM 423
#define FLUSH_SYM 424
#define FORCE_SYM 425
#define FOREIGN 426
#define FOR_SYM 427
#define FOUND_SYM 428
#define FRAC_SECOND_SYM 429
#define FROM 430
#define FULL 431
#define FULLTEXT_SYM 432
#define FUNCTION_SYM 433
#define GE 434
#define GEOMETRYCOLLECTION 435
#define GEOMETRY_SYM 436
#define GET_FORMAT 437
#define GLOBAL_SYM 438
#define GRANT 439
#define GRANTS 440
#define GROUP_SYM 441
#define GROUP_CONCAT_SYM 442
#define GT_SYM 443
#define HANDLER_SYM 444
#define HASH_SYM 445
#define HAVING 446
#define HELP_SYM 447
#define HEX_NUM 448
#define HIGH_PRIORITY 449
#define HOST_SYM 450
#define HOSTS_SYM 451
#define HOUR_MICROSECOND_SYM 452
#define HOUR_MINUTE_SYM 453
#define HOUR_SECOND_SYM 454
#define HOUR_SYM 455
#define IDENT 456
#define IDENTIFIED_SYM 457
#define IDENT_QUOTED 458
#define IF 459
#define IGNORE_SYM 460
#define IMPORT 461
#define INDEXES 462
#define INDEX_SYM 463
#define INFILE 464
#define INITIAL_SIZE_SYM 465
#define INNER_SYM 466
#define INNOBASE_SYM 467
#define INOUT_SYM 468
#define INSENSITIVE_SYM 469
#define INSERT 470
#define INSERT_METHOD 471
#define INSTALL_SYM 472
#define INTERVAL_SYM 473
#define INTO 474
#define INT_SYM 475
#define INVOKER_SYM 476
#define IN_SYM 477
#define IO_SYM 478
#define IPC_SYM 479
#define IS 480
#define ISOLATION 481
#define ISSUER_SYM 482
#define ITERATE_SYM 483
#define JOIN_SYM 484
#define KEYS 485
#define KEY_BLOCK_SIZE 486
#define KEY_SYM 487
#define KILL_SYM 488
#define LANGUAGE_SYM 489
#define LAST_SYM 490
#define LE 491
#define LEADING 492
#define LEAVES 493
#define LEAVE_SYM 494
#define LEFT 495
#define LESS_SYM 496
#define LEVEL_SYM 497
#define LEX_HOSTNAME 498
#define LIKE 499
#define LIMIT 500
#define LINEAR_SYM 501
#define LINES 502
#define LINESTRING 503
#define LIST_SYM 504
#define LOAD 505
#define LOCAL_SYM 506
#define LOCATOR_SYM 507
#define LOCKS_SYM 508
#define LOCK_SYM 509
#define LOGFILE_SYM 510
#define LOGS_SYM 511
#define LONGBLOB 512
#define LONGTEXT 513
#define LONG_NUM 514
#define LONG_SYM 515
#define LOOP_SYM 516
#define LOW_PRIORITY 517
#define LT 518
#define MASTER_CONNECT_RETRY_SYM 519
#define MASTER_HOST_SYM 520
#define MASTER_LOG_FILE_SYM 521
#define MASTER_LOG_POS_SYM 522
#define MASTER_PASSWORD_SYM 523
#define MASTER_PORT_SYM 524
#define MASTER_SERVER_ID_SYM 525
#define MASTER_SSL_CAPATH_SYM 526
#define MASTER_SSL_CA_SYM 527
#define MASTER_SSL_CERT_SYM 528
#define MASTER_SSL_CIPHER_SYM 529
#define MASTER_SSL_KEY_SYM 530
#define MASTER_SSL_SYM 531
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 532
#define MASTER_SYM 533
#define MASTER_USER_SYM 534
#define MATCH 535
#define MAX_CONNECTIONS_PER_HOUR 536
#define MAX_QUERIES_PER_HOUR 537
#define MAX_ROWS 538
#define MAX_SIZE_SYM 539
#define MAX_SYM 540
#define MAX_UPDATES_PER_HOUR 541
#define MAX_USER_CONNECTIONS_SYM 542
#define MAX_VALUE_SYM 543
#define MEDIUMBLOB 544
#define MEDIUMINT 545
#define MEDIUMTEXT 546
#define MEDIUM_SYM 547
#define MEMORY_SYM 548
#define MERGE_SYM 549
#define MICROSECOND_SYM 550
#define MIGRATE_SYM 551
#define MINUTE_MICROSECOND_SYM 552
#define MINUTE_SECOND_SYM 553
#define MINUTE_SYM 554
#define MIN_ROWS 555
#define MIN_SYM 556
#define MODE_SYM 557
#define MODIFIES_SYM 558
#define MODIFY_SYM 559
#define MOD_SYM 560
#define MONTH_SYM 561
#define MULTILINESTRING 562
#define MULTIPOINT 563
#define MULTIPOLYGON 564
#define MUTEX_SYM 565
#define NAMES_SYM 566
#define NAME_SYM 567
#define NATIONAL_SYM 568
#define NATURAL 569
#define NCHAR_STRING 570
#define NCHAR_SYM 571
#define NDBCLUSTER_SYM 572
#define NE 573
#define NEG 574
#define NEW_SYM 575
#define NEXT_SYM 576
#define NODEGROUP_SYM 577
#define NONE_SYM 578
#define NOT2_SYM 579
#define NOT_SYM 580
#define NOW_SYM 581
#define NO_SYM 582
#define NO_WAIT_SYM 583
#define NO_WRITE_TO_BINLOG 584
#define NULL_SYM 585
#define NUM 586
#define NUMERIC_SYM 587
#define NVARCHAR_SYM 588
#define OFFSET_SYM 589
#define OLD_PASSWORD 590
#define ON 591
#define ONE_SHOT_SYM 592
#define ONE_SYM 593
#define OPEN_SYM 594
#define OPTIMIZE 595
#define OPTIONS_SYM 596
#define OPTION 597
#define OPTIONALLY 598
#define OR2_SYM 599
#define ORDER_SYM 600
#define OR_OR_SYM 601
#define OR_SYM 602
#define OUTER 603
#define OUTFILE 604
#define OUT_SYM 605
#define OWNER_SYM 606
#define PACK_KEYS_SYM 607
#define PAGE_SYM 608
#define PAGE_CHECKSUM_SYM 609
#define PARAM_MARKER 610
#define PARSER_SYM 611
#define PARTIAL 612
#define PARTITIONING_SYM 613
#define PARTITIONS_SYM 614
#define PARTITION_SYM 615
#define PASSWORD 616
#define PHASE_SYM 617
#define PLUGINS_SYM 618
#define PLUGIN_SYM 619
#define POINT_SYM 620
#define POLYGON 621
#define PORT_SYM 622
#define POSITION_SYM 623
#define PRECISION 624
#define PREPARE_SYM 625
#define PRESERVE_SYM 626
#define PREV_SYM 627
#define PRIMARY_SYM 628
#define PRIVILEGES 629
#define PROCEDURE 630
#define PROCESS 631
#define PROCESSLIST_SYM 632
#define PROFILE_SYM 633
#define PROFILES_SYM 634
#define PURGE 635
#define QUARTER_SYM 636
#define QUERY_SYM 637
#define QUICK 638
#define RANGE_SYM 639
#define READS_SYM 640
#define READ_ONLY_SYM 641
#define READ_SYM 642
#define READ_WRITE_SYM 643
#define REAL 644
#define REBUILD_SYM 645
#define RECOVER_SYM 646
#define REDOFILE_SYM 647
#define REDO_BUFFER_SIZE_SYM 648
#define REDUNDANT_SYM 649
#define REFERENCES 650
#define REGEXP 651
#define RELAY_LOG_FILE_SYM 652
#define RELAY_LOG_POS_SYM 653
#define RELAY_THREAD 654
#define RELEASE_SYM 655
#define RELOAD 656
#define REMOVE_SYM 657
#define RENAME 658
#define REORGANIZE_SYM 659
#define REPAIR 660
#define REPEATABLE_SYM 661
#define REPEAT_SYM 662
#define REPLACE 663
#define REPLICATION 664
#define REQUIRE_SYM 665
#define RESET_SYM 666
#define RESOURCES 667
#define RESTORE_SYM 668
#define RESTRICT 669
#define RESUME_SYM 670
#define RETURNS_SYM 671
#define RETURN_SYM 672
#define REVOKE 673
#define RIGHT 674
#define ROLLBACK_SYM 675
#define ROLLUP_SYM 676
#define ROUTINE_SYM 677
#define ROWS_SYM 678
#define ROW_FORMAT_SYM 679
#define ROW_SYM 680
#define RTREE_SYM 681
#define SAVEPOINT_SYM 682
#define SCHEDULE_SYM 683
#define SECOND_MICROSECOND_SYM 684
#define SECOND_SYM 685
#define SECURITY_SYM 686
#define SELECT_SYM 687
#define SENSITIVE_SYM 688
#define SEPARATOR_SYM 689
#define SERIALIZABLE_SYM 690
#define SERIAL_SYM 691
#define SESSION_SYM 692
#define SERVER_SYM 693
#define SERVER_OPTIONS 694
#define SET 695
#define SET_VAR 696
#define SHARE_SYM 697
#define SHIFT_LEFT 698
#define SHIFT_RIGHT 699
#define SHOW 700
#define SHUTDOWN 701
#define SIGNED_SYM 702
#define SIMPLE_SYM 703
#define SLAVE 704
#define SMALLINT 705
#define SNAPSHOT_SYM 706
#define SOCKET_SYM 707
#define SONAME_SYM 708
#define SOUNDS_SYM 709
#define SOURCE_SYM 710
#define SPATIAL_SYM 711
#define SPECIFIC_SYM 712
#define SQLEXCEPTION_SYM 713
#define SQLSTATE_SYM 714
#define SQLWARNING_SYM 715
#define SQL_BIG_RESULT 716
#define SQL_BUFFER_RESULT 717
#define SQL_CACHE_SYM 718
#define SQL_CALC_FOUND_ROWS 719
#define SQL_NO_CACHE_SYM 720
#define SQL_SMALL_RESULT 721
#define SQL_SYM 722
#define SQL_THREAD 723
#define SSL_SYM 724
#define STARTING 725
#define STARTS_SYM 726
#define START_SYM 727
#define STATUS_SYM 728
#define STDDEV_SAMP_SYM 729
#define STD_SYM 730
#define STOP_SYM 731
#define STORAGE_SYM 732
#define STRAIGHT_JOIN 733
#define STRING_SYM 734
#define SUBDATE_SYM 735
#define SUBJECT_SYM 736
#define SUBPARTITIONS_SYM 737
#define SUBPARTITION_SYM 738
#define SUBSTRING 739
#define SUM_SYM 740
#define SUPER_SYM 741
#define SUSPEND_SYM 742
#define SWAPS_SYM 743
#define SWITCHES_SYM 744
#define SYSDATE 745
#define TABLES 746
#define TABLESPACE 747
#define TABLE_REF_PRIORITY 748
#define TABLE_SYM 749
#define TABLE_CHECKSUM_SYM 750
#define TEMPORARY 751
#define TEMPTABLE_SYM 752
#define TERMINATED 753
#define TEXT_STRING 754
#define TEXT_SYM 755
#define THAN_SYM 756
#define THEN_SYM 757
#define TIMESTAMP 758
#define TIMESTAMP_ADD 759
#define TIMESTAMP_DIFF 760
#define TIME_SYM 761
#define TINYBLOB 762
#define TINYINT 763
#define TINYTEXT 764
#define TO_SYM 765
#define TRAILING 766
#define TRANSACTION_SYM 767
#define TRANSACTIONAL_SYM 768
#define TRIGGERS_SYM 769
#define TRIGGER_SYM 770
#define TRIM 771
#define TRUE_SYM 772
#define TRUNCATE_SYM 773
#define TYPES_SYM 774
#define TYPE_SYM 775
#define UDF_RETURNS_SYM 776
#define ULONGLONG_NUM 777
#define UNCOMMITTED_SYM 778
#define UNDEFINED_SYM 779
#define UNDERSCORE_CHARSET 780
#define UNDOFILE_SYM 781
#define UNDO_BUFFER_SIZE_SYM 782
#define UNDO_SYM 783
#define UNICODE_SYM 784
#define UNINSTALL_SYM 785
#define UNION_SYM 786
#define UNIQUE_SYM 787
#define UNKNOWN_SYM 788
#define UNLOCK_SYM 789
#define UNSIGNED 790
#define UNTIL_SYM 791
#define UPDATE_SYM 792
#define UPGRADE_SYM 793
#define USAGE 794
#define USER 795
#define USE_FRM 796
#define USE_SYM 797
#define USING 798
#define UTC_DATE_SYM 799
#define UTC_TIMESTAMP_SYM 800
#define UTC_TIME_SYM 801
#define VALUES 802
#define VALUE_SYM 803
#define VARBINARY 804
#define VARCHAR 805
#define VARIABLES 806
#define VARIANCE_SYM 807
#define VARYING 808
#define VAR_SAMP_SYM 809
#define VIEW_SYM 810
#define WAIT_SYM 811
#define WARNINGS 812
#define WEEK_SYM 813
#define WHEN_SYM 814
#define WHERE 815
#define WHILE_SYM 816
#define WITH 817
#define WORK_SYM 818
#define WRAPPER_SYM 819
#define WRITE_SYM 820
#define X509_SYM 821
#define XA_SYM 822
#define XOR 823
#define YEAR_MONTH_SYM 824
#define YEAR_SYM 825
#define ZEROFILL 826




/* Copy the first part of user declarations.  */
#line 23 "sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "mysql_priv.h"
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>

int yylex(void *yylval, void *yythd);

const LEX_STRING null_lex_str= {0,0};

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  /* Push an error into the error stack */
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  (yytext ? yytext : ""),
                  lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  sp->add_instr(i);

  return 0;
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->push_backpatch(i, ctx->push_label((char *)"", 0));
  sp->add_cont_backpatch(i);
  sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

void case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  sp->add_instr(i);

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 462 "sql_yacc.yy"
{
  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  struct st_lex *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
}
/* Line 187 of yacc.c.  */
#line 1731 "sql_yacc.cc"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 507 "sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 216 of yacc.c.  */
#line 1747 "sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  550
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   46991

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  591
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  827
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2370
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4045

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   826

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   584,     2,     2,     2,   578,   573,     2,
     581,   582,   576,   575,   583,   574,   589,   577,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   590,   587,
       2,     2,     2,     2,   588,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   579,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   585,   572,   586,   580,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   127,   129,   131,   136,   138,   141,   142,   147,
     148,   151,   155,   157,   160,   161,   165,   166,   172,   174,
     178,   182,   186,   190,   194,   198,   202,   206,   210,   214,
     218,   222,   226,   228,   232,   236,   240,   244,   245,   253,
     254,   267,   268,   275,   276,   280,   285,   290,   294,   297,
     308,   310,   314,   317,   320,   323,   326,   329,   332,   335,
     336,   349,   350,   357,   360,   361,   363,   367,   369,   370,
     373,   374,   377,   378,   380,   384,   389,   390,   393,   394,
     397,   399,   401,   403,   405,   407,   409,   411,   413,   415,
     417,   419,   421,   423,   424,   428,   430,   431,   434,   435,
     438,   441,   444,   447,   450,   454,   458,   460,   462,   464,
     467,   471,   475,   476,   481,   482,   486,   487,   489,   493,
     495,   496,   498,   502,   504,   505,   509,   510,   512,   516,
     518,   523,   524,   526,   528,   530,   531,   535,   538,   542,
     543,   547,   548,   554,   560,   561,   569,   575,   576,   579,
     581,   583,   585,   589,   591,   593,   597,   598,   600,   602,
     604,   606,   609,   611,   613,   617,   618,   621,   623,   625,
     627,   629,   631,   633,   635,   637,   639,   641,   643,   645,
     647,   648,   654,   655,   658,   659,   663,   664,   667,   670,
     673,   676,   677,   684,   687,   688,   691,   693,   695,   699,
     700,   701,   702,   710,   711,   714,   717,   719,   721,   722,
     723,   732,   733,   740,   742,   745,   747,   750,   751,   752,
     759,   760,   761,   768,   769,   772,   773,   779,   780,   782,
     783,   789,   790,   793,   794,   800,   805,   806,   807,   816,
     817,   825,   827,   829,   831,   833,   835,   838,   843,   849,
     850,   855,   860,   865,   869,   873,   876,   879,   880,   883,
     885,   888,   892,   894,   896,   898,   900,   902,   905,   909,
     911,   913,   915,   917,   919,   921,   923,   925,   927,   929,
     932,   936,   938,   940,   942,   944,   946,   948,   950,   953,
     957,   959,   961,   963,   965,   967,   969,   971,   973,   975,
     978,   982,   984,   986,   988,   991,   994,   997,   999,  1001,
    1003,  1005,  1008,  1012,  1016,  1020,  1024,  1028,  1032,  1036,
    1040,  1045,  1046,  1048,  1050,  1052,  1054,  1056,  1059,  1063,
    1066,  1071,  1077,  1078,  1084,  1085,  1086,  1092,  1093,  1101,
    1102,  1104,  1105,  1109,  1110,  1114,  1120,  1126,  1127,  1132,
    1133,  1137,  1138,  1142,  1143,  1145,  1146,  1148,  1150,  1154,
    1156,  1162,  1168,  1169,  1172,  1173,  1174,  1182,  1183,  1193,
    1195,  1199,  1201,  1203,  1204,  1207,  1208,  1212,  1214,  1218,
    1219,  1226,  1228,  1229,  1234,  1240,  1242,  1244,  1246,  1250,
    1254,  1256,  1260,  1262,  1264,  1265,  1269,  1271,  1275,  1276,
    1281,  1283,  1284,  1286,  1289,  1291,  1295,  1300,  1304,  1308,
    1312,  1317,  1322,  1326,  1327,  1328,  1335,  1336,  1338,  1339,
    1341,  1343,  1346,  1348,  1350,  1351,  1353,  1355,  1358,  1360,
    1361,  1365,  1366,  1368,  1370,  1373,  1375,  1378,  1382,  1386,
    1390,  1394,  1398,  1402,  1406,  1410,  1414,  1418,  1422,  1426,
    1430,  1434,  1438,  1442,  1448,  1450,  1452,  1456,  1461,  1466,
    1469,  1472,  1475,  1479,  1483,  1487,  1492,  1497,  1499,  1501,
    1503,  1505,  1507,  1509,  1511,  1513,  1515,  1517,  1519,  1521,
    1523,  1526,  1528,  1530,  1532,  1534,  1536,  1540,  1542,  1544,
    1547,  1550,  1558,  1567,  1576,  1579,  1582,  1583,  1585,  1588,
    1589,  1591,  1594,  1595,  1600,  1604,  1608,  1612,  1614,  1617,
    1619,  1621,  1625,  1628,  1632,  1635,  1638,  1640,  1644,  1648,
    1651,  1655,  1657,  1659,  1662,  1664,  1666,  1669,  1671,  1673,
    1675,  1678,  1682,  1685,  1689,  1692,  1695,  1699,  1703,  1707,
    1708,  1715,  1716,  1723,  1726,  1728,  1730,  1732,  1734,  1736,
    1738,  1740,  1742,  1744,  1746,  1748,  1751,  1754,  1756,  1759,
    1761,  1764,  1768,  1771,  1773,  1775,  1777,  1779,  1781,  1783,
    1785,  1788,  1789,  1791,  1793,  1799,  1800,  1802,  1805,  1807,
    1809,  1811,  1813,  1817,  1821,  1825,  1829,  1830,  1832,  1833,
    1835,  1836,  1838,  1841,  1843,  1845,  1848,  1851,  1856,  1858,
    1862,  1865,  1867,  1870,  1873,  1876,  1879,  1881,  1884,  1886,
    1888,  1890,  1892,  1894,  1895,  1898,  1900,  1902,  1904,  1906,
    1908,  1909,  1912,  1914,  1916,  1917,  1919,  1920,  1923,  1925,
    1928,  1932,  1935,  1936,  1938,  1939,  1941,  1943,  1946,  1947,
    1949,  1950,  1955,  1957,  1962,  1966,  1968,  1969,  1971,  1974,
    1976,  1980,  1984,  1987,  1990,  1993,  1995,  1997,  2000,  2003,
    2006,  2008,  2011,  2014,  2017,  2020,  2022,  2024,  2025,  2027,
    2029,  2031,  2033,  2034,  2036,  2038,  2040,  2041,  2043,  2046,
    2047,  2049,  2051,  2054,  2057,  2060,  2062,  2066,  2070,  2072,
    2074,  2076,  2081,  2084,  2086,  2091,  2092,  2094,  2095,  2098,
    2100,  2104,  2105,  2112,  2113,  2119,  2127,  2128,  2134,  2135,
    2141,  2142,  2148,  2149,  2154,  2155,  2166,  2170,  2175,  2179,
    2183,  2191,  2192,  2196,  2198,  2203,  2204,  2208,  2209,  2212,
    2213,  2215,  2216,  2219,  2222,  2225,  2228,  2230,  2232,  2234,
    2238,  2243,  2244,  2251,  2256,  2257,  2263,  2264,  2271,  2276,
    2278,  2281,  2283,  2285,  2286,  2292,  2293,  2297,  2300,  2301,
    2307,  2308,  2309,  2316,  2318,  2322,  2324,  2326,  2330,  2333,
    2337,  2340,  2345,  2346,  2353,  2354,  2355,  2364,  2369,  2374,
    2378,  2382,  2385,  2388,  2395,  2401,  2405,  2411,  2413,  2415,
    2417,  2418,  2420,  2421,  2423,  2424,  2426,  2428,  2429,  2432,
    2434,  2435,  2437,  2439,  2441,  2442,  2448,  2452,  2453,  2459,
    2463,  2467,  2468,  2472,  2473,  2476,  2478,  2482,  2483,  2485,
    2487,  2488,  2491,  2493,  2497,  2498,  2505,  2506,  2513,  2514,
    2520,  2521,  2523,  2525,  2526,  2533,  2534,  2536,  2538,  2541,
    2543,  2545,  2547,  2548,  2554,  2557,  2558,  2564,  2565,  2567,
    2569,  2572,  2574,  2576,  2578,  2580,  2582,  2585,  2586,  2592,
    2593,  2595,  2597,  2598,  2603,  2608,  2612,  2618,  2620,  2624,
    2628,  2634,  2636,  2640,  2643,  2645,  2647,  2648,  2655,  2657,
    2661,  2665,  2666,  2669,  2670,  2675,  2676,  2679,  2681,  2684,
    2689,  2692,  2696,  2697,  2701,  2702,  2703,  2710,  2713,  2715,
    2717,  2720,  2723,  2732,  2737,  2738,  2740,  2743,  2745,  2747,
    2749,  2751,  2753,  2755,  2757,  2759,  2761,  2763,  2765,  2766,
    2769,  2774,  2778,  2780,  2782,  2787,  2788,  2789,  2791,  2793,
    2794,  2797,  2800,  2802,  2804,  2805,  2808,  2812,  2816,  2820,
    2823,  2827,  2832,  2836,  2841,  2845,  2850,  2852,  2856,  2861,
    2865,  2869,  2876,  2878,  2884,  2891,  2897,  2905,  2912,  2921,
    2927,  2934,  2939,  2944,  2950,  2954,  2959,  2961,  2965,  2969,
    2973,  2977,  2981,  2985,  2991,  2997,  3001,  3005,  3009,  3013,
    3017,  3021,  3023,  3025,  3027,  3029,  3031,  3033,  3035,  3037,
    3039,  3041,  3043,  3045,  3047,  3049,  3051,  3053,  3055,  3057,
    3059,  3061,  3063,  3065,  3069,  3071,  3073,  3075,  3077,  3081,
    3084,  3087,  3090,  3093,  3097,  3101,  3107,  3114,  3119,  3124,
    3132,  3135,  3142,  3148,  3155,  3162,  3167,  3172,  3178,  3183,
    3190,  3193,  3198,  3203,  3208,  3219,  3226,  3235,  3242,  3247,
    3252,  3259,  3264,  3269,  3274,  3281,  3286,  3294,  3302,  3310,
    3317,  3324,  3331,  3338,  3342,  3347,  3354,  3363,  3366,  3369,
    3374,  3383,  3392,  3399,  3406,  3409,  3414,  3421,  3428,  3437,
    3446,  3453,  3462,  3469,  3472,  3477,  3486,  3495,  3498,  3501,
    3504,  3509,  3514,  3519,  3524,  3528,  3537,  3542,  3549,  3554,
    3559,  3564,  3571,  3580,  3587,  3592,  3599,  3601,  3608,  3613,
    3618,  3623,  3628,  3633,  3640,  3645,  3646,  3652,  3659,  3662,
    3666,  3667,  3672,  3673,  3677,  3678,  3680,  3682,  3686,  3691,
    3696,  3702,  3707,  3712,  3717,  3723,  3728,  3729,  3730,  3738,
    3743,  3749,  3754,  3760,  3765,  3770,  3775,  3780,  3785,  3791,
    3792,  3801,  3802,  3806,  3810,  3812,  3817,  3818,  3820,  3821,
    3824,  3825,  3827,  3828,  3832,  3835,  3839,  3842,  3844,  3847,
    3849,  3852,  3854,  3856,  3858,  3861,  3862,  3864,  3866,  3870,
    3872,  3876,  3878,  3882,  3883,  3885,  3886,  3889,  3894,  3900,
    3902,  3904,  3906,  3908,  3913,  3915,  3919,  3923,  3927,  3928,
    3935,  3936,  3943,  3944,  3953,  3958,  3959,  3968,  3969,  3980,
    3987,  3988,  3997,  3998,  4009,  4016,  4018,  4021,  4024,  4025,
    4030,  4034,  4041,  4042,  4046,  4047,  4048,  4054,  4055,  4057,
    4058,  4060,  4061,  4064,  4068,  4072,  4074,  4076,  4077,  4085,
    4086,  4094,  4096,  4099,  4100,  4101,  4104,  4105,  4108,  4109,
    4111,  4113,  4115,  4117,  4121,  4123,  4127,  4129,  4131,  4133,
    4135,  4137,  4139,  4141,  4143,  4145,  4147,  4149,  4151,  4153,
    4155,  4157,  4159,  4161,  4163,  4165,  4167,  4169,  4171,  4173,
    4175,  4177,  4179,  4181,  4182,  4184,  4186,  4187,  4190,  4191,
    4193,  4194,  4195,  4199,  4200,  4201,  4205,  4208,  4209,  4210,
    4215,  4220,  4223,  4224,  4227,  4230,  4234,  4238,  4240,  4243,
    4244,  4246,  4247,  4252,  4257,  4260,  4261,  4263,  4265,  4266,
    4268,  4269,  4271,  4274,  4276,  4280,  4284,  4286,  4288,  4290,
    4292,  4293,  4296,  4298,  4300,  4302,  4304,  4306,  4308,  4310,
    4312,  4314,  4316,  4318,  4320,  4322,  4324,  4326,  4328,  4330,
    4332,  4334,  4336,  4338,  4340,  4342,  4344,  4346,  4347,  4348,
    4355,  4356,  4358,  4362,  4364,  4368,  4369,  4372,  4376,  4378,
    4381,  4383,  4384,  4388,  4389,  4395,  4398,  4400,  4401,  4405,
    4412,  4413,  4420,  4425,  4432,  4437,  4442,  4447,  4453,  4458,
    4463,  4469,  4476,  4481,  4483,  4487,  4489,  4491,  4495,  4497,
    4498,  4501,  4502,  4504,  4505,  4506,  4515,  4516,  4517,  4524,
    4525,  4527,  4529,  4531,  4533,  4535,  4538,  4540,  4542,  4544,
    4548,  4553,  4554,  4558,  4562,  4564,  4567,  4570,  4571,  4575,
    4576,  4582,  4586,  4588,  4592,  4594,  4598,  4600,  4602,  4603,
    4605,  4606,  4611,  4612,  4614,  4618,  4620,  4622,  4624,  4625,
    4626,  4633,  4634,  4635,  4647,  4651,  4653,  4657,  4661,  4663,
    4667,  4668,  4670,  4671,  4676,  4677,  4684,  4685,  4691,  4692,
    4699,  4701,  4705,  4709,  4715,  4716,  4719,  4720,  4723,  4725,
    4727,  4729,  4733,  4734,  4736,  4737,  4739,  4741,  4745,  4747,
    4749,  4752,  4755,  4758,  4760,  4762,  4764,  4766,  4767,  4771,
    4772,  4776,  4779,  4784,  4789,  4793,  4798,  4803,  4806,  4808,
    4812,  4816,  4823,  4840,  4843,  4846,  4847,  4854,  4860,  4863,
    4866,  4869,  4871,  4873,  4875,  4881,  4887,  4890,  4893,  4895,
    4900,  4904,  4907,  4910,  4913,  4917,  4920,  4923,  4925,  4929,
    4934,  4938,  4942,  4945,  4948,  4952,  4956,  4960,  4964,  4968,
    4972,  4976,  4980,  4982,  4984,  4986,  4988,  4990,  4991,  4993,
    4994,  4997,  4998,  5000,  5002,  5004,  5005,  5008,  5009,  5012,
    5013,  5016,  5019,  5020,  5025,  5026,  5031,  5033,  5035,  5036,
    5038,  5040,  5041,  5043,  5045,  5046,  5051,  5055,  5057,  5058,
    5062,  5067,  5070,  5072,  5074,  5076,  5078,  5080,  5082,  5084,
    5086,  5087,  5089,  5090,  5094,  5098,  5100,  5102,  5104,  5107,
    5108,  5112,  5116,  5119,  5122,  5126,  5127,  5129,  5131,  5134,
    5135,  5140,  5146,  5147,  5148,  5149,  5150,  5169,  5172,  5173,
    5175,  5176,  5178,  5180,  5181,  5183,  5185,  5186,  5189,  5192,
    5194,  5198,  5203,  5207,  5211,  5212,  5215,  5218,  5220,  5224,
    5228,  5229,  5233,  5234,  5238,  5241,  5245,  5247,  5249,  5252,
    5253,  5256,  5258,  5260,  5263,  5266,  5268,  5270,  5272,  5274,
    5276,  5279,  5282,  5284,  5286,  5288,  5290,  5292,  5294,  5296,
    5299,  5302,  5305,  5308,  5311,  5313,  5315,  5317,  5319,  5321,
    5323,  5325,  5329,  5335,  5337,  5339,  5341,  5343,  5345,  5349,
    5354,  5360,  5362,  5368,  5372,  5375,  5377,  5381,  5384,  5386,
    5388,  5390,  5392,  5394,  5396,  5398,  5400,  5402,  5404,  5406,
    5408,  5410,  5412,  5416,  5419,  5421,  5423,  5425,  5427,  5429,
    5431,  5433,  5435,  5437,  5439,  5441,  5443,  5445,  5447,  5449,
    5451,  5453,  5455,  5457,  5459,  5461,  5463,  5465,  5467,  5469,
    5471,  5473,  5475,  5477,  5479,  5481,  5483,  5485,  5487,  5489,
    5491,  5493,  5495,  5497,  5499,  5501,  5503,  5505,  5507,  5509,
    5511,  5513,  5515,  5517,  5519,  5521,  5523,  5525,  5527,  5529,
    5531,  5533,  5535,  5537,  5539,  5541,  5543,  5545,  5547,  5549,
    5551,  5553,  5555,  5557,  5559,  5561,  5563,  5565,  5567,  5569,
    5571,  5573,  5575,  5577,  5579,  5581,  5583,  5585,  5587,  5589,
    5591,  5593,  5595,  5597,  5599,  5601,  5603,  5605,  5607,  5609,
    5611,  5613,  5615,  5617,  5619,  5621,  5623,  5625,  5627,  5629,
    5631,  5633,  5635,  5637,  5639,  5641,  5643,  5645,  5647,  5649,
    5651,  5653,  5655,  5657,  5659,  5661,  5663,  5665,  5667,  5669,
    5671,  5673,  5675,  5677,  5679,  5681,  5683,  5685,  5687,  5689,
    5691,  5693,  5695,  5697,  5699,  5701,  5703,  5705,  5707,  5709,
    5711,  5713,  5715,  5717,  5719,  5721,  5723,  5725,  5727,  5729,
    5731,  5733,  5735,  5737,  5739,  5741,  5743,  5745,  5747,  5749,
    5751,  5753,  5755,  5757,  5759,  5761,  5763,  5765,  5767,  5769,
    5771,  5773,  5775,  5777,  5779,  5781,  5783,  5785,  5787,  5789,
    5791,  5793,  5795,  5797,  5799,  5801,  5803,  5805,  5807,  5809,
    5811,  5813,  5815,  5817,  5819,  5821,  5823,  5825,  5827,  5829,
    5831,  5833,  5835,  5837,  5839,  5841,  5843,  5845,  5847,  5849,
    5851,  5853,  5855,  5857,  5859,  5861,  5863,  5865,  5867,  5869,
    5871,  5873,  5875,  5877,  5879,  5881,  5883,  5885,  5887,  5889,
    5891,  5893,  5895,  5897,  5899,  5901,  5903,  5905,  5907,  5909,
    5911,  5913,  5915,  5917,  5919,  5921,  5923,  5925,  5927,  5929,
    5931,  5933,  5935,  5937,  5939,  5941,  5943,  5945,  5947,  5949,
    5951,  5953,  5955,  5957,  5959,  5961,  5963,  5965,  5967,  5969,
    5971,  5973,  5975,  5977,  5979,  5981,  5983,  5985,  5987,  5989,
    5991,  5993,  5995,  5997,  5999,  6001,  6003,  6005,  6007,  6009,
    6011,  6013,  6015,  6017,  6019,  6021,  6023,  6025,  6027,  6029,
    6031,  6033,  6035,  6037,  6039,  6041,  6043,  6044,  6049,  6050,
    6052,  6054,  6058,  6059,  6062,  6064,  6066,  6068,  6070,  6071,
    6073,  6074,  6076,  6078,  6080,  6081,  6084,  6087,  6090,  6092,
    6095,  6100,  6106,  6111,  6118,  6121,  6125,  6129,  6133,  6139,
    6141,  6145,  6149,  6152,  6155,  6158,  6160,  6162,  6167,  6172,
    6174,  6176,  6178,  6180,  6182,  6183,  6188,  6190,  6192,  6194,
    6198,  6202,  6204,  6206,  6209,  6212,  6213,  6217,  6222,  6226,
    6227,  6235,  6237,  6240,  6242,  6244,  6246,  6248,  6250,  6252,
    6253,  6259,  6261,  6263,  6265,  6267,  6269,  6273,  6280,  6287,
    6294,  6302,  6306,  6315,  6324,  6333,  6334,  6336,  6338,  6341,
    6342,  6344,  6346,  6350,  6351,  6355,  6356,  6360,  6361,  6365,
    6366,  6370,  6372,  6374,  6376,  6378,  6380,  6382,  6384,  6386,
    6388,  6390,  6392,  6395,  6398,  6400,  6404,  6407,  6410,  6413,
    6416,  6419,  6422,  6425,  6428,  6430,  6432,  6433,  6435,  6439,
    6441,  6444,  6447,  6450,  6452,  6456,  6460,  6462,  6464,  6468,
    6470,  6474,  6479,  6485,  6487,  6488,  6492,  6496,  6498,  6500,
    6501,  6504,  6507,  6510,  6513,  6514,  6517,  6520,  6522,  6525,
    6528,  6531,  6534,  6537,  6538,  6542,  6543,  6545,  6546,  6550,
    6553,  6554,  6556,  6559,  6560,  6562,  6567,  6572,  6578,  6581,
    6585,  6586,  6588,  6589,  6594,  6595,  6597,  6599,  6600,  6603,
    6606,  6608,  6609,  6611,  6613,  6614,  6620,  6627,  6628,  6629,
    6632,  6635,  6639,  6641,  6643,  6645,  6647,  6649,  6651,  6653,
    6655,  6657,  6659,  6661,  6663,  6665,  6666,  6670,  6672,  6675,
    6677,  6680,  6684,  6688,  6692,  6693,  6697,  6701,  6702,  6710,
    6711,  6715,  6717,  6721,  6722,  6726,  6729,  6734,  6735,  6739,
    6744,  6749,  6750,  6751,  6752,  6769,  6778,  6786,  6787,  6788,
    6789,  6790,  6791,  6807,  6808,  6809,  6810,  6811,  6824,  6829,
    6834,  6838,  6843,  6847,  6850,  6852,  6856,  6862,  6864,  6866,
    6867,  6869,  6871,  6872,  6875,  6876,  6877,  6881,  6882,  6885,
    6891
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     592,     0,    -1,   141,    -1,    -1,   595,   593,   587,   594,
      -1,   595,   141,    -1,    -1,   141,    -1,   596,    -1,  1352,
      -1,   909,    -1,   970,    -1,   960,    -1,   972,    -1,   641,
      -1,   608,    -1,   973,    -1,   962,    -1,  1358,    -1,   613,
      -1,   597,    -1,  1194,    -1,  1224,    -1,  1148,    -1,  1150,
      -1,   601,    -1,  1230,    -1,  1327,    -1,  1318,    -1,   606,
      -1,  1158,    -1,  1416,    -1,  1244,    -1,  1247,    -1,  1310,
      -1,   978,    -1,   986,    -1,   773,    -1,   990,    -1,   599,
      -1,  1240,    -1,  1361,    -1,   981,    -1,   965,    -1,  1161,
      -1,  1236,    -1,   958,    -1,  1325,    -1,  1359,    -1,  1360,
      -1,   998,    -1,  1293,    -1,  1211,    -1,   947,    -1,   950,
      -1,  1205,    -1,  1417,    -1,  1316,    -1,  1186,    -1,  1246,
      -1,  1408,    -1,   598,   370,  1287,    -1,   108,    -1,   129,
      -1,   370,  1287,   175,   600,    -1,  1284,    -1,   588,  1289,
      -1,    -1,   153,  1287,   602,   603,    -1,    -1,   543,   604,
      -1,   604,   583,   605,    -1,   605,    -1,   588,  1289,    -1,
      -1,   192,   607,  1289,    -1,    -1,    55,   278,   510,   609,
     610,    -1,   611,    -1,   610,   583,   611,    -1,   265,   145,
    1284,    -1,   279,   145,  1284,    -1,   268,   145,  1284,    -1,
     269,   145,  1128,    -1,   264,   145,  1128,    -1,   276,   145,
    1128,    -1,   272,   145,  1284,    -1,   271,   145,  1284,    -1,
     273,   145,  1284,    -1,   274,   145,  1284,    -1,   275,   145,
    1284,    -1,   277,   145,  1128,    -1,   612,    -1,   266,   145,
    1284,    -1,   267,   145,  1130,    -1,   397,   145,  1284,    -1,
     398,   145,  1128,    -1,    -1,    88,   821,   494,   824,  1281,
     614,   764,    -1,    -1,    88,   896,   208,  1287,   898,   336,
    1281,   615,   581,   904,   582,   899,    -1,    -1,    88,    95,
     824,  1287,   616,   818,    -1,    -1,    88,   617,  1374,    -1,
      88,   540,   634,  1343,    -1,    88,   255,   186,   727,    -1,
      88,   492,   724,    -1,    88,   618,    -1,   438,  1289,   171,
      98,   564,  1289,   341,   581,   619,   582,    -1,   620,    -1,
     619,   583,   620,    -1,   540,  1284,    -1,   195,  1284,    -1,
      95,  1284,    -1,   351,  1284,    -1,   361,  1284,    -1,   452,
    1284,    -1,   367,  1128,    -1,    -1,   151,   824,   635,   622,
     336,   428,   623,   628,   625,   630,   128,   631,    -1,    -1,
     152,  1019,  1099,   624,   626,   627,    -1,    22,  1019,    -1,
      -1,   137,    -1,   122,   336,   449,    -1,   122,    -1,    -1,
     471,  1019,    -1,    -1,   140,  1019,    -1,    -1,   629,    -1,
     336,    74,   371,    -1,   336,    74,   325,   371,    -1,    -1,
      70,  1284,    -1,    -1,   632,   633,    -1,   673,    -1,   675,
      -1,   671,    -1,   692,    -1,   710,    -1,   712,    -1,   707,
      -1,   677,    -1,   679,    -1,   680,    -1,   681,    -1,   682,
      -1,   684,    -1,    -1,  1287,   589,  1287,    -1,  1287,    -1,
      -1,   636,   638,    -1,    -1,   637,   639,    -1,    70,  1284,
      -1,   234,   467,    -1,   327,   467,    -1,    81,   467,    -1,
     385,   467,    98,    -1,   303,   467,    98,    -1,   640,    -1,
     638,    -1,   120,    -1,  1025,   120,    -1,   467,   431,   113,
      -1,   467,   431,   221,    -1,    -1,    49,   635,   642,   643,
      -1,    -1,   581,   644,   582,    -1,    -1,   645,    -1,   645,
     583,  1019,    -1,  1019,    -1,    -1,   647,    -1,   647,   583,
     649,    -1,   649,    -1,    -1,  1287,   648,   847,    -1,    -1,
     651,    -1,   651,   583,   652,    -1,   652,    -1,   653,   648,
    1287,   847,    -1,    -1,   222,    -1,   350,    -1,   213,    -1,
      -1,   654,   670,   587,    -1,   670,   587,    -1,   655,   670,
     587,    -1,    -1,   656,   657,   587,    -1,    -1,   111,   668,
     658,   847,   669,    -1,   111,  1287,    77,   172,   665,    -1,
      -1,   111,   662,   189,   172,   659,   663,   670,    -1,   111,
    1287,    93,   172,   660,    -1,    -1,   661,   998,    -1,   155,
      -1,    83,    -1,   664,    -1,   663,   583,   664,    -1,   667,
      -1,  1128,    -1,   459,   666,  1285,    -1,    -1,   548,    -1,
     665,    -1,  1287,    -1,   460,    -1,  1025,   173,    -1,   458,
      -1,  1287,    -1,   668,   583,  1287,    -1,    -1,   112,  1019,
      -1,   673,    -1,   675,    -1,   671,    -1,   692,    -1,   710,
      -1,   712,    -1,   707,    -1,   677,    -1,   679,    -1,   680,
      -1,   681,    -1,   682,    -1,   684,    -1,    -1,   204,   672,
     687,   139,   204,    -1,    -1,   674,   596,    -1,    -1,   417,
     676,  1019,    -1,    -1,   678,   716,    -1,   239,  1288,    -1,
     228,  1288,    -1,   339,  1287,    -1,    -1,   163,   685,  1287,
     219,   683,   686,    -1,    63,  1287,    -1,    -1,   321,   175,
      -1,   175,    -1,  1287,    -1,   686,   583,  1287,    -1,    -1,
      -1,    -1,   688,  1019,   502,   689,   655,   690,   691,    -1,
      -1,   136,   687,    -1,   135,   655,    -1,   693,    -1,   696,
      -1,    -1,    -1,    52,   694,  1019,   695,   698,   706,   139,
      52,    -1,    -1,    52,   697,   699,   706,   139,    52,    -1,
     700,    -1,   698,   700,    -1,   703,    -1,   699,   703,    -1,
      -1,    -1,   559,   701,  1019,   702,   502,   655,    -1,    -1,
      -1,   559,   704,  1019,   705,   502,   655,    -1,    -1,   135,
     655,    -1,    -1,  1288,   590,   708,   716,   709,    -1,    -1,
    1288,    -1,    -1,  1288,   590,   711,   714,   709,    -1,    -1,
     713,   714,    -1,    -1,    30,   715,   656,   654,   139,    -1,
     261,   655,   139,   261,    -1,    -1,    -1,   561,   717,  1019,
     128,   718,   655,   139,   561,    -1,    -1,   407,   655,   536,
     719,  1019,   139,   407,    -1,    29,    -1,     8,    -1,   215,
      -1,   537,    -1,   116,    -1,   749,   751,    -1,   749,    55,
     746,   730,    -1,   749,     6,   746,   725,   734,    -1,    -1,
     542,   255,   186,  1287,    -1,   749,     6,   746,   737,    -1,
     749,   129,   746,   737,    -1,   750,   729,   740,    -1,   750,
     729,   743,    -1,     6,   747,    -1,     6,   748,    -1,    -1,
     731,   732,    -1,   733,    -1,   732,   733,    -1,   732,   583,
     733,    -1,   752,    -1,   753,    -1,   754,    -1,   735,    -1,
     736,    -1,   735,   736,    -1,   735,   583,   736,    -1,   752,
      -1,   753,    -1,   754,    -1,   755,    -1,   758,    -1,   760,
      -1,   762,    -1,   759,    -1,   738,    -1,   739,    -1,   738,
     739,    -1,   738,   583,   739,    -1,   752,    -1,   753,    -1,
     754,    -1,   760,    -1,   762,    -1,   741,    -1,   742,    -1,
     741,   742,    -1,   741,   583,   742,    -1,   752,    -1,   756,
      -1,   757,    -1,   758,    -1,   760,    -1,   762,    -1,   759,
      -1,   744,    -1,   745,    -1,   744,   745,    -1,   744,   583,
     745,    -1,   752,    -1,   760,    -1,   762,    -1,    97,  1284,
      -1,   526,  1284,    -1,   392,  1284,    -1,  1287,    -1,  1287,
      -1,   386,    -1,   388,    -1,   325,     4,    -1,   210,  1178,
     763,    -1,    24,  1178,   763,    -1,   284,  1178,   763,    -1,
     158,  1178,   763,    -1,   527,  1178,   763,    -1,   393,  1178,
     763,    -1,   322,  1178,  1129,    -1,    70,  1178,  1284,    -1,
    1217,   143,  1178,   831,    -1,    -1,   762,    -1,   556,    -1,
     328,    -1,  1129,    -1,   201,    -1,   581,   765,    -1,   825,
     770,   767,    -1,   244,  1281,    -1,   581,   244,  1281,   582,
      -1,   837,   582,   825,   770,   767,    -1,    -1,   770,   814,
     582,   766,  1365,    -1,    -1,    -1,  1256,   817,   814,   768,
    1362,    -1,    -1,  1256,   817,   581,   814,   582,   769,  1365,
      -1,    -1,   771,    -1,    -1,   360,   772,   775,    -1,    -1,
     360,   774,   775,    -1,    46,   776,   786,   787,   794,    -1,
     780,   232,   581,   781,   582,    -1,    -1,   780,   190,   777,
     784,    -1,    -1,   384,   778,   784,    -1,    -1,   249,   779,
     784,    -1,    -1,   246,    -1,    -1,   782,    -1,   783,    -1,
     782,   583,   783,    -1,  1287,    -1,   581,  1014,   792,  1015,
     582,    -1,   581,  1014,   792,  1015,   582,    -1,    -1,   359,
    1129,    -1,    -1,    -1,   483,    46,   780,   190,   785,   788,
     793,    -1,    -1,   483,    46,   780,   232,   581,   790,   582,
     789,   793,    -1,   791,    -1,   790,   583,   791,    -1,  1287,
      -1,  1022,    -1,    -1,   482,  1129,    -1,    -1,   581,   795,
     582,    -1,   796,    -1,   795,   583,   796,    -1,    -1,   360,
     797,   798,   799,   811,   806,    -1,  1287,    -1,    -1,   547,
     241,   501,   800,    -1,   547,   222,   581,   803,   582,    -1,
     801,    -1,   802,    -1,   288,    -1,   581,   288,   582,    -1,
     581,   805,   582,    -1,   804,    -1,   803,   583,   804,    -1,
     805,    -1,  1022,    -1,    -1,   581,   807,   582,    -1,   808,
      -1,   807,   583,   808,    -1,    -1,   483,   809,   810,   811,
      -1,  1289,    -1,    -1,   812,    -1,   812,   813,    -1,   813,
      -1,   492,  1178,  1289,    -1,  1217,   143,  1178,   831,    -1,
     322,  1178,  1129,    -1,   283,  1178,  1131,    -1,   300,  1178,
    1131,    -1,    98,   121,  1178,  1284,    -1,   208,   121,  1178,
    1284,    -1,    70,  1178,  1284,    -1,    -1,    -1,   432,   815,
    1008,  1012,   816,   835,    -1,    -1,    18,    -1,    -1,   819,
      -1,   820,    -1,   819,   820,    -1,   830,    -1,   829,    -1,
      -1,   822,    -1,   823,    -1,   823,   822,    -1,   496,    -1,
      -1,   204,  1025,   154,    -1,    -1,   827,    -1,   828,    -1,
     828,   826,    -1,   828,    -1,   828,   827,    -1,   828,   583,
     827,    -1,   143,  1178,   831,    -1,   520,  1178,   831,    -1,
     283,  1178,  1130,    -1,   300,  1178,  1130,    -1,    26,  1178,
    1128,    -1,   361,  1178,  1284,    -1,    70,  1178,  1284,    -1,
      25,  1178,  1130,    -1,   352,  1178,  1128,    -1,   352,  1178,
     112,    -1,    59,  1178,  1128,    -1,   495,  1178,  1128,    -1,
     354,  1178,  1134,    -1,   115,  1178,  1128,    -1,   424,  1178,
     833,    -1,   531,  1178,   581,  1235,   582,    -1,   829,    -1,
     830,    -1,   216,  1178,   834,    -1,    98,   121,  1178,  1284,
      -1,   208,   121,  1178,  1284,    -1,   492,  1287,    -1,   477,
     124,    -1,   477,   293,    -1,    78,  1178,  1284,    -1,   231,
    1178,  1128,    -1,   513,  1178,  1134,    -1,   878,   869,  1178,
     871,    -1,   878,    66,  1178,   877,    -1,  1289,    -1,  1289,
      -1,   112,    -1,   166,    -1,   133,    -1,    75,    -1,   394,
      -1,    73,    -1,   353,    -1,   327,    -1,   165,    -1,   235,
      -1,  1123,    -1,  1007,  1011,    -1,   479,    -1,   389,    -1,
     110,    -1,   220,    -1,   838,    -1,   837,   583,   838,    -1,
     839,    -1,   840,    -1,   845,   841,    -1,   845,   883,    -1,
     891,   906,   898,   581,   904,   582,   899,    -1,   843,   892,
     906,   898,   581,   904,   582,   899,    -1,   843,   171,   232,
     906,   581,   904,   582,   883,    -1,   844,   841,    -1,   843,
     842,    -1,    -1,   842,    -1,    60,  1019,    -1,    -1,   844,
      -1,    80,   906,    -1,    -1,  1280,   846,   847,   865,    -1,
     855,   863,   859,    -1,   856,   864,   859,    -1,   168,   857,
     859,    -1,    38,    -1,    38,   862,    -1,    43,    -1,    42,
      -1,   851,   862,   879,    -1,   851,   879,    -1,   852,   862,
     880,    -1,   852,   880,    -1,    33,   862,    -1,    33,    -1,
     853,   862,   879,    -1,   854,   862,   880,    -1,   549,   862,
      -1,   570,   863,   859,    -1,   102,    -1,   506,    -1,   503,
     863,    -1,    99,    -1,   507,    -1,    40,   863,    -1,   850,
      -1,   289,    -1,   257,    -1,   260,   549,    -1,   260,   853,
     879,    -1,   509,   879,    -1,   500,   863,   879,    -1,   291,
     879,    -1,   258,   879,    -1,   110,   857,   859,    -1,   332,
     857,   859,    -1,   166,   857,   859,    -1,    -1,   144,   848,
     581,   908,   582,   879,    -1,    -1,   440,   849,   581,   908,
     582,   879,    -1,   260,   879,    -1,   436,    -1,   181,    -1,
     180,    -1,   365,    -1,   308,    -1,   248,    -1,   307,    -1,
     366,    -1,   309,    -1,    58,    -1,   316,    -1,   313,    58,
      -1,   851,   553,    -1,   550,    -1,   313,   550,    -1,   333,
      -1,   316,   550,    -1,   313,    58,   553,    -1,   316,   553,
      -1,   220,    -1,   508,    -1,   450,    -1,   290,    -1,    32,
      -1,   389,    -1,   127,    -1,   127,   369,    -1,    -1,   862,
      -1,   858,    -1,   581,   331,   583,   331,   582,    -1,    -1,
     860,    -1,   860,   861,    -1,   861,    -1,   447,    -1,   535,
      -1,   571,    -1,   581,   259,   582,    -1,   581,   522,   582,
      -1,   581,   109,   582,    -1,   581,   331,   582,    -1,    -1,
     862,    -1,    -1,   858,    -1,    -1,   866,    -1,   866,   867,
      -1,   867,    -1,   330,    -1,  1025,   330,    -1,   112,   868,
      -1,   336,   537,   326,  1018,    -1,    25,    -1,   436,   112,
     548,    -1,   882,   232,    -1,   532,    -1,   532,   232,    -1,
      70,  1284,    -1,    66,   875,    -1,   326,  1018,    -1,  1271,
      -1,    58,   440,    -1,    57,    -1,  1289,    -1,    33,    -1,
     870,    -1,   112,    -1,    -1,   869,   871,    -1,  1289,    -1,
      33,    -1,   873,    -1,   112,    -1,  1289,    -1,    -1,    66,
     877,    -1,   875,    -1,   112,    -1,    -1,   112,    -1,    -1,
      20,   880,    -1,    47,    -1,   529,   880,    -1,   869,   870,
     880,    -1,    33,   881,    -1,    -1,    33,    -1,    -1,    20,
      -1,   529,    -1,   869,   870,    -1,    -1,   373,    -1,    -1,
     395,  1281,   884,   885,    -1,   887,    -1,   581,   886,   582,
     887,    -1,   886,   583,  1287,    -1,  1287,    -1,    -1,   888,
      -1,   888,   889,    -1,   889,    -1,   336,   116,   890,    -1,
     336,   537,   890,    -1,   280,   176,    -1,   280,   357,    -1,
     280,   448,    -1,   414,    -1,    50,    -1,   440,   330,    -1,
     327,     5,    -1,   440,   112,    -1,   893,    -1,   177,   894,
      -1,   456,   894,    -1,   373,   232,    -1,   532,   894,    -1,
     232,    -1,   208,    -1,    -1,   893,    -1,   230,    -1,   208,
      -1,   207,    -1,    -1,   532,    -1,   177,    -1,   456,    -1,
      -1,   897,    -1,   897,   901,    -1,    -1,   900,    -1,   902,
      -1,   900,   902,    -1,   543,   903,    -1,   520,   903,    -1,
     901,    -1,   231,  1178,  1128,    -1,   562,   356,  1283,    -1,
      45,    -1,   426,    -1,   190,    -1,   904,   583,   905,  1121,
      -1,   905,  1121,    -1,  1287,    -1,  1287,   581,   331,   582,
      -1,    -1,  1280,    -1,    -1,   589,  1287,    -1,  1269,    -1,
     908,   583,  1269,    -1,    -1,    13,   943,   494,  1281,   910,
     921,    -1,    -1,    13,    95,   920,   911,   819,    -1,    13,
      95,  1287,   538,    98,   121,   312,    -1,    -1,    13,   375,
     635,   912,   636,    -1,    -1,    13,   178,   635,   913,   636,
      -1,    -1,    13,  1382,  1377,   914,  1384,    -1,    -1,    13,
    1377,   915,  1384,    -1,    -1,    13,  1377,   151,   635,   916,
     917,   918,   625,   630,   919,    -1,    13,   492,   726,    -1,
      13,   255,   186,   728,    -1,    13,   492,   723,    -1,    13,
     492,   722,    -1,    13,   438,  1289,   341,   581,   619,   582,
      -1,    -1,   336,   428,   623,    -1,   629,    -1,   336,   428,
     623,   629,    -1,    -1,   403,   510,   635,    -1,    -1,   128,
     631,    -1,    -1,  1287,    -1,    -1,   123,   492,    -1,   206,
     492,    -1,   936,   770,    -1,   936,   925,    -1,   925,    -1,
     771,    -1,   927,    -1,   129,   360,   934,    -1,   390,   360,
     980,   926,    -1,    -1,   340,   360,   980,   926,   922,   980,
      -1,    14,   360,   980,   926,    -1,    -1,    60,   360,   926,
     923,   975,    -1,    -1,   405,   360,   980,   926,   924,   967,
      -1,    64,   360,   980,  1129,    -1,   930,    -1,   402,   358,
      -1,    12,    -1,   934,    -1,    -1,     6,   360,   980,   928,
     929,    -1,    -1,   581,   795,   582,    -1,   359,  1129,    -1,
      -1,   404,   360,   980,   931,   932,    -1,    -1,    -1,   934,
     933,   219,   581,   795,   582,    -1,   935,    -1,   934,   583,
     935,    -1,  1287,    -1,   938,    -1,   936,   583,   938,    -1,
       6,   942,    -1,   937,   839,   945,    -1,     6,   840,    -1,
     937,   581,   837,   582,    -1,    -1,    55,   942,  1280,   939,
     845,   945,    -1,    -1,    -1,   304,   942,  1280,   940,   847,
     865,   941,   945,    -1,   129,   942,  1280,   944,    -1,   129,
     171,   232,   906,    -1,   129,   373,   232,    -1,   129,   893,
    1280,    -1,   122,   230,    -1,   137,   230,    -1,    13,   942,
    1280,   440,   112,  1271,    -1,    13,   942,  1280,   129,   112,
      -1,   403,   946,  1281,    -1,    85,   510,   869,   871,   876,
      -1,   826,    -1,   170,    -1,  1114,    -1,    -1,    69,    -1,
      -1,   205,    -1,    -1,   414,    -1,    50,    -1,    -1,     8,
    1287,    -1,   165,    -1,    -1,   510,    -1,   145,    -1,    18,
      -1,    -1,   472,   449,   952,   948,   956,    -1,   476,   449,
     952,    -1,    -1,   449,   472,   952,   949,   956,    -1,   449,
     476,   952,    -1,   472,   512,   951,    -1,    -1,   562,    79,
     451,    -1,    -1,   953,   954,    -1,   955,    -1,   954,   583,
     955,    -1,    -1,   468,    -1,   399,    -1,    -1,   536,   957,
      -1,   612,    -1,   957,   583,   612,    -1,    -1,   413,  1312,
     959,  1152,   175,  1284,    -1,    -1,    28,  1312,   961,  1152,
     510,  1284,    -1,    -1,    59,  1312,   963,  1152,   964,    -1,
      -1,   383,    -1,   157,    -1,    -1,   405,   980,  1312,   966,
    1152,   967,    -1,    -1,   968,    -1,   969,    -1,   969,   968,
      -1,   383,    -1,   157,    -1,   541,    -1,    -1,    14,   980,
    1312,   971,  1152,    -1,    34,  1284,    -1,    -1,    60,  1312,
     974,  1152,   975,    -1,    -1,   976,    -1,   977,    -1,   977,
     976,    -1,   383,    -1,   161,    -1,   292,    -1,   157,    -1,
      56,    -1,   172,   538,    -1,    -1,   340,   980,  1312,   979,
    1152,    -1,    -1,   329,    -1,   251,    -1,    -1,   403,  1312,
     982,   984,    -1,   403,   540,   634,   983,    -1,  1290,   510,
    1290,    -1,   983,   583,  1290,   510,  1290,    -1,   985,    -1,
     984,   583,   985,    -1,  1281,   510,  1281,    -1,    48,   208,
     987,   222,   989,    -1,   988,    -1,   987,   583,   988,    -1,
    1281,   994,    -1,  1287,    -1,   112,    -1,    -1,   250,   208,
     219,    48,   991,   992,    -1,   993,    -1,   992,   583,   993,
      -1,  1281,   994,   997,    -1,    -1,   995,   996,    -1,    -1,
     893,   581,  1095,   582,    -1,    -1,   205,   238,    -1,   999,
      -1,   432,  1001,    -1,   581,  1000,   582,  1365,    -1,   432,
    1003,    -1,   581,  1000,   582,    -1,    -1,  1003,  1002,  1362,
      -1,    -1,    -1,  1004,  1008,  1012,  1005,  1006,  1011,    -1,
    1117,  1123,    -1,  1144,    -1,  1007,    -1,  1144,  1007,    -1,
    1007,  1144,    -1,   175,  1063,  1106,  1111,  1108,  1117,  1123,
    1135,    -1,   175,   130,  1106,  1123,    -1,    -1,  1009,    -1,
    1009,  1010,    -1,  1010,    -1,   478,    -1,   194,    -1,   125,
      -1,   466,    -1,   461,    -1,   462,    -1,   464,    -1,   465,
      -1,   463,    -1,    12,    -1,    -1,   172,   537,    -1,   254,
     222,   442,   302,    -1,  1012,   583,  1013,    -1,  1013,    -1,
     576,    -1,  1014,  1016,  1015,  1017,    -1,    -1,    -1,  1275,
      -1,  1019,    -1,    -1,    18,  1287,    -1,    18,  1284,    -1,
    1287,    -1,  1284,    -1,    -1,   581,   582,    -1,  1019,  1023,
    1019,    -1,  1019,   568,  1019,    -1,  1019,  1024,  1019,    -1,
     325,  1019,    -1,  1020,   225,   517,    -1,  1020,   225,  1025,
     517,    -1,  1020,   225,   160,    -1,  1020,   225,  1025,   160,
      -1,  1020,   225,   533,    -1,  1020,   225,  1025,   533,    -1,
    1020,    -1,  1020,   225,   330,    -1,  1020,   225,  1025,   330,
      -1,  1020,   146,  1021,    -1,  1020,  1027,  1021,    -1,  1020,
    1027,  1028,   581,  1371,   582,    -1,  1021,    -1,  1022,   222,
     581,  1371,   582,    -1,  1022,  1025,   222,   581,  1371,   582,
      -1,  1022,   222,   581,  1019,   582,    -1,  1022,   222,   581,
    1019,   583,  1056,   582,    -1,  1022,  1025,   222,   581,  1019,
     582,    -1,  1022,  1025,   222,   581,  1019,   583,  1056,   582,
      -1,  1022,    31,  1022,    16,  1021,    -1,  1022,  1025,    31,
    1022,    16,  1021,    -1,  1022,   454,   244,  1022,    -1,  1022,
     244,  1029,  1110,    -1,  1022,  1025,   244,  1029,  1110,    -1,
    1022,   396,  1022,    -1,  1022,  1025,   396,  1022,    -1,  1022,
      -1,  1022,   572,  1022,    -1,  1022,   573,  1022,    -1,  1022,
     443,  1022,    -1,  1022,   444,  1022,    -1,  1022,   575,  1022,
      -1,  1022,   574,  1022,    -1,  1022,   575,   218,  1019,  1099,
      -1,  1022,   574,   218,  1019,  1099,    -1,  1022,   576,  1022,
      -1,  1022,   577,  1022,    -1,  1022,   578,  1022,    -1,  1022,
     126,  1022,    -1,  1022,   305,  1022,    -1,  1022,   579,  1022,
      -1,  1029,    -1,   347,    -1,   344,    -1,    16,    -1,    15,
      -1,   325,    -1,   324,    -1,   584,    -1,   324,    -1,   145,
      -1,   179,    -1,   188,    -1,   236,    -1,   263,    -1,   318,
      -1,    12,    -1,    17,    -1,  1277,    -1,  1030,    -1,  1031,
      -1,  1034,    -1,  1032,    -1,  1029,    66,  1289,    -1,  1272,
      -1,  1270,    -1,  1046,    -1,  1042,    -1,  1029,   346,  1029,
      -1,   575,  1029,    -1,   574,  1029,    -1,   580,  1029,    -1,
    1026,  1029,    -1,   581,  1371,   582,    -1,   581,  1019,   582,
      -1,   581,  1019,   583,  1056,   582,    -1,   425,   581,  1019,
     583,  1056,   582,    -1,   154,   581,  1371,   582,    -1,   585,
    1287,  1019,   586,    -1,   280,  1057,     9,   581,  1022,  1036,
     582,    -1,    33,  1029,    -1,    53,   581,  1019,    18,  1054,
     582,    -1,    52,  1059,  1061,  1060,   139,    -1,    85,   581,
    1019,   583,  1054,   582,    -1,    85,   581,  1019,   543,   870,
     582,    -1,   112,   581,  1277,   582,    -1,   547,   581,  1278,
     582,    -1,   218,  1019,  1099,   575,  1019,    -1,    58,   581,
    1056,   582,    -1,    58,   581,  1056,   543,   870,   582,    -1,
      92,  1018,    -1,   102,   581,  1019,   582,    -1,   107,   581,
    1019,   582,    -1,   200,   581,  1019,   582,    -1,   215,   581,
    1019,   583,  1019,   583,  1019,   583,  1019,   582,    -1,   218,
     581,  1019,   583,  1019,   582,    -1,   218,   581,  1019,   583,
    1019,   583,  1056,   582,    -1,   240,   581,  1019,   583,  1019,
     582,    -1,   299,   581,  1019,   582,    -1,   306,   581,  1019,
     582,    -1,   419,   581,  1019,   583,  1019,   582,    -1,   430,
     581,  1019,   582,    -1,   506,   581,  1019,   582,    -1,   503,
     581,  1019,   582,    -1,   503,   581,  1019,   583,  1019,   582,
      -1,   516,   581,  1019,   582,    -1,   516,   581,   237,  1019,
     175,  1019,   582,    -1,   516,   581,   511,  1019,   175,  1019,
     582,    -1,   516,   581,    44,  1019,   175,  1019,   582,    -1,
     516,   581,   237,   175,  1019,   582,    -1,   516,   581,   511,
     175,  1019,   582,    -1,   516,   581,    44,   175,  1019,   582,
      -1,   516,   581,  1019,   175,  1019,   582,    -1,   540,   581,
     582,    -1,   570,   581,  1019,   582,    -1,     7,   581,  1019,
     583,  1019,   582,    -1,     7,   581,  1019,   583,   218,  1019,
    1099,   582,    -1,    91,  1018,    -1,    94,  1018,    -1,    94,
     581,  1019,   582,    -1,   100,   581,  1019,   583,   218,  1019,
    1099,   582,    -1,   101,   581,  1019,   583,   218,  1019,  1099,
     582,    -1,   159,   581,  1099,   175,  1019,   582,    -1,   182,
     581,  1102,   583,  1019,   582,    -1,   326,  1018,    -1,   326,
     581,  1019,   582,    -1,   368,   581,  1022,   222,  1019,   582,
      -1,   480,   581,  1019,   583,  1019,   582,    -1,   480,   581,
    1019,   583,   218,  1019,  1099,   582,    -1,   484,   581,  1019,
     583,  1019,   583,  1019,   582,    -1,   484,   581,  1019,   583,
    1019,   582,    -1,   484,   581,  1019,   175,  1019,   172,  1019,
     582,    -1,   484,   581,  1019,   175,  1019,   582,    -1,   490,
    1018,    -1,   490,   581,  1019,   582,    -1,   504,   581,  1100,
     583,  1019,   583,  1019,   582,    -1,   505,   581,  1100,   583,
    1019,   583,  1019,   582,    -1,   544,  1018,    -1,   546,  1018,
      -1,   545,  1018,    -1,    20,   581,  1019,   582,    -1,    57,
     581,  1019,   582,    -1,    64,   581,  1056,   582,    -1,    67,
     581,  1019,   582,    -1,    95,   581,   582,    -1,   204,   581,
    1019,   583,  1019,   583,  1019,   582,    -1,   295,   581,  1019,
     582,    -1,   305,   581,  1019,   583,  1019,   582,    -1,   335,
     581,  1019,   582,    -1,   361,   581,  1019,   582,    -1,   381,
     581,  1019,   582,    -1,   407,   581,  1019,   583,  1019,   582,
      -1,   408,   581,  1019,   583,  1019,   583,  1019,   582,    -1,
     518,   581,  1019,   583,  1019,   582,    -1,   558,   581,  1019,
     582,    -1,   558,   581,  1019,   583,  1019,   582,    -1,  1033,
      -1,    81,   581,  1019,   583,  1019,   582,    -1,   180,   581,
    1056,   582,    -1,   248,   581,  1056,   582,    -1,   307,   581,
    1056,   582,    -1,   308,   581,  1056,   582,    -1,   309,   581,
    1056,   582,    -1,   365,   581,  1019,   583,  1019,   582,    -1,
     366,   581,  1056,   582,    -1,    -1,  1283,   581,  1035,  1039,
     582,    -1,  1287,   589,  1287,   581,  1055,   582,    -1,  1037,
    1038,    -1,   222,    42,   302,    -1,    -1,   222,   314,   234,
     302,    -1,    -1,   562,   382,   156,    -1,    -1,  1040,    -1,
    1041,    -1,  1040,   583,  1041,    -1,  1014,  1019,  1015,  1017,
      -1,    27,   581,  1052,   582,    -1,    27,   581,   125,  1052,
     582,    -1,    36,   581,  1052,   582,    -1,    37,   581,  1052,
     582,    -1,    39,   581,  1052,   582,    -1,    86,   581,  1105,
     576,   582,    -1,    86,   581,  1052,   582,    -1,    -1,    -1,
      86,   581,   125,  1043,  1056,  1044,   582,    -1,   301,   581,
    1052,   582,    -1,   301,   581,   125,  1052,   582,    -1,   285,
     581,  1052,   582,    -1,   285,   581,   125,  1052,   582,    -1,
     475,   581,  1052,   582,    -1,   552,   581,  1052,   582,    -1,
     474,   581,  1052,   582,    -1,   554,   581,  1052,   582,    -1,
     485,   581,  1052,   582,    -1,   485,   581,   125,  1052,   582,
      -1,    -1,   187,   581,  1049,  1045,  1056,  1051,  1050,   582,
      -1,    -1,   588,  1047,  1048,    -1,  1289,   441,  1019,    -1,
    1289,    -1,   588,  1302,  1289,   907,    -1,    -1,   125,    -1,
      -1,   434,  1269,    -1,    -1,  1118,    -1,    -1,  1105,  1053,
    1019,    -1,    33,   863,    -1,    58,   863,   879,    -1,   316,
     863,    -1,   447,    -1,   447,   220,    -1,   535,    -1,   535,
     220,    -1,   102,    -1,   506,    -1,    99,    -1,   110,   857,
      -1,    -1,  1056,    -1,  1019,    -1,  1056,   583,  1019,    -1,
    1058,    -1,   581,  1058,   582,    -1,  1277,    -1,  1058,   583,
    1277,    -1,    -1,  1019,    -1,    -1,   135,  1019,    -1,   559,
    1019,   502,  1019,    -1,  1061,   559,  1019,   502,  1019,    -1,
    1075,    -1,  1066,    -1,  1065,    -1,  1062,    -1,   585,  1287,
    1062,   586,    -1,  1064,    -1,  1065,   583,  1064,    -1,  1062,
    1074,  1062,    -1,  1062,   478,  1075,    -1,    -1,  1062,  1074,
    1062,   336,  1067,  1019,    -1,    -1,  1062,   478,  1075,   336,
    1068,  1019,    -1,    -1,  1062,  1074,  1062,   543,  1069,   581,
    1098,   582,    -1,  1062,   314,   229,  1075,    -1,    -1,  1062,
     240,  1084,   229,  1062,   336,  1070,  1019,    -1,    -1,  1062,
     240,  1084,   229,  1075,  1071,   543,   581,  1098,   582,    -1,
    1062,   314,   240,  1084,   229,  1075,    -1,    -1,  1062,   419,
    1084,   229,  1062,   336,  1072,  1019,    -1,    -1,  1062,   419,
    1084,   229,  1075,  1073,   543,   581,  1098,   582,    -1,  1062,
     314,   419,  1084,   229,  1075,    -1,   229,    -1,   211,   229,
      -1,    89,   229,    -1,    -1,  1076,  1281,  1104,  1093,    -1,
    1083,  1082,  1079,    -1,   581,  1082,  1077,  1365,   582,  1104,
      -1,    -1,  1082,  1078,  1065,    -1,    -1,    -1,  1080,  1008,
    1012,  1081,   835,    -1,    -1,   432,    -1,    -1,   348,    -1,
      -1,   172,   229,    -1,   172,   345,    46,    -1,   172,   186,
      46,    -1,   170,    -1,   205,    -1,    -1,  1086,   893,  1085,
    1088,   581,  1097,   582,    -1,    -1,   542,   893,  1085,  1089,
     581,  1095,   582,    -1,  1087,    -1,  1090,  1087,    -1,    -1,
      -1,  1092,  1090,    -1,    -1,  1094,  1091,    -1,    -1,  1097,
      -1,  1287,    -1,   373,    -1,  1096,    -1,  1097,   583,  1096,
      -1,  1287,    -1,  1098,   583,  1287,    -1,  1101,    -1,   103,
      -1,   104,    -1,   105,    -1,   106,    -1,   197,    -1,   198,
      -1,   199,    -1,   297,    -1,   298,    -1,   429,    -1,   569,
      -1,  1101,    -1,   174,    -1,   107,    -1,   558,    -1,   200,
      -1,   299,    -1,   306,    -1,   381,    -1,   430,    -1,   295,
      -1,   570,    -1,   102,    -1,   506,    -1,    99,    -1,   503,
      -1,    -1,    18,    -1,   145,    -1,    -1,  1103,  1287,    -1,
      -1,    12,    -1,    -1,    -1,   560,  1107,  1019,    -1,    -1,
      -1,   191,  1109,  1019,    -1,   149,  1029,    -1,    -1,    -1,
     186,    46,  1112,  1113,    -1,  1112,   583,  1276,  1121,    -1,
    1276,  1121,    -1,    -1,   562,    90,    -1,   562,   421,    -1,
     345,    46,  1115,    -1,  1115,   583,  1116,    -1,  1116,    -1,
    1278,  1121,    -1,    -1,  1118,    -1,    -1,   345,    46,  1119,
    1120,    -1,  1120,   583,  1276,  1121,    -1,  1276,  1121,    -1,
      -1,    19,    -1,   117,    -1,    -1,  1124,    -1,    -1,  1124,
      -1,   245,  1125,    -1,  1126,    -1,  1126,   583,  1126,    -1,
    1126,   334,  1126,    -1,  1270,    -1,   522,    -1,   259,    -1,
     331,    -1,    -1,   245,  1126,    -1,   331,    -1,   193,    -1,
     259,    -1,   522,    -1,   109,    -1,   167,    -1,   331,    -1,
     193,    -1,   259,    -1,   522,    -1,  1132,    -1,   331,    -1,
     522,    -1,   259,    -1,   109,    -1,   167,    -1,   331,    -1,
     522,    -1,   259,    -1,  1132,    -1,  1133,    -1,   109,    -1,
     167,    -1,  1128,    -1,   112,    -1,    -1,    -1,   375,  1287,
    1136,   581,  1137,   582,    -1,    -1,  1138,    -1,  1138,   583,
    1139,    -1,  1139,    -1,  1014,  1019,  1015,    -1,    -1,  1141,
    1142,    -1,  1142,   583,  1143,    -1,  1143,    -1,   588,  1289,
      -1,  1289,    -1,    -1,   219,  1145,  1146,    -1,    -1,   349,
    1286,  1147,  1257,  1260,    -1,   131,  1286,    -1,  1140,    -1,
      -1,   128,  1149,  1056,    -1,   129,  1157,  1312,  1156,  1152,
     944,    -1,    -1,   129,   208,  1287,   336,  1281,  1151,    -1,
     129,    95,  1156,  1287,    -1,   129,   178,  1156,  1287,   589,
    1287,    -1,   129,   178,  1156,  1287,    -1,   129,   375,  1156,
     635,    -1,   129,   540,   634,  1342,    -1,   129,   555,  1156,
    1152,   944,    -1,   129,   151,  1156,   635,    -1,   129,   515,
    1156,   635,    -1,   129,   492,   749,   760,   761,    -1,   129,
     255,   186,   750,   760,   761,    -1,   129,   438,  1156,  1289,
      -1,  1153,    -1,  1152,   583,  1153,    -1,  1281,    -1,  1155,
      -1,  1154,   583,  1155,    -1,  1281,    -1,    -1,   204,   154,
      -1,    -1,   496,    -1,    -1,    -1,   215,  1159,  1164,   943,
    1166,  1160,  1168,  1184,    -1,    -1,    -1,   408,  1162,  1165,
    1166,  1163,  1168,    -1,    -1,   262,    -1,   114,    -1,   194,
      -1,  1193,    -1,   114,    -1,   219,  1167,    -1,  1167,    -1,
    1153,    -1,  1171,    -1,   581,   582,  1171,    -1,   581,  1170,
     582,  1171,    -1,    -1,   440,  1169,  1175,    -1,  1170,   583,
    1274,    -1,  1274,    -1,   547,  1174,    -1,   548,  1174,    -1,
      -1,   814,  1172,  1362,    -1,    -1,   581,   814,   582,  1173,
    1365,    -1,  1174,   583,  1179,    -1,  1179,    -1,  1175,   583,
    1176,    -1,  1176,    -1,  1278,  1177,  1183,    -1,   145,    -1,
     441,    -1,    -1,  1177,    -1,    -1,   581,  1180,  1181,   582,
      -1,    -1,  1182,    -1,  1182,   583,  1183,    -1,  1183,    -1,
    1019,    -1,   112,    -1,    -1,    -1,   336,   132,  1185,   232,
     537,  1191,    -1,    -1,    -1,   537,  1187,  1193,   943,  1063,
     440,  1189,  1188,  1106,  1117,  1127,    -1,  1189,   583,  1190,
      -1,  1190,    -1,  1278,  1177,  1183,    -1,  1191,   583,  1192,
      -1,  1192,    -1,  1278,  1177,  1183,    -1,    -1,   262,    -1,
      -1,   116,  1195,  1203,  1196,    -1,    -1,   175,  1281,  1197,
    1106,  1117,  1127,    -1,    -1,  1200,  1198,   175,  1063,  1106,
      -1,    -1,   175,  1154,  1199,   543,  1063,  1106,    -1,  1201,
      -1,  1200,   583,  1201,    -1,  1287,  1202,  1104,    -1,  1287,
     589,  1287,  1202,  1104,    -1,    -1,   589,   576,    -1,    -1,
    1204,  1203,    -1,   383,    -1,   262,    -1,   205,    -1,   518,
    1206,  1153,    -1,    -1,   494,    -1,    -1,  1208,    -1,  1209,
      -1,  1208,   583,  1209,    -1,    87,    -1,   293,    -1,    41,
     223,    -1,    82,   489,    -1,   353,   162,    -1,   224,    -1,
     488,    -1,   455,    -1,    12,    -1,    -1,   172,   382,   331,
      -1,    -1,   445,  1212,  1213,    -1,    96,  1223,    -1,  1219,
     491,  1218,  1223,    -1,  1219,   514,  1218,  1223,    -1,   150,
    1218,  1223,    -1,   494,   473,  1218,  1223,    -1,   339,   491,
    1218,  1223,    -1,  1219,   364,    -1,   363,    -1,   143,   832,
    1215,    -1,   143,    12,  1215,    -1,  1219,    68,  1220,  1281,
    1218,  1223,    -1,   320,   278,   172,   449,   562,   266,   145,
    1284,    16,   267,   145,  1130,    16,   270,   145,  1128,    -1,
    1216,   256,    -1,   449,   196,    -1,    -1,    34,   150,  1221,
    1222,  1214,  1122,    -1,   895,  1220,  1281,  1218,  1106,    -1,
      69,   519,    -1,   494,   519,    -1,  1217,   142,    -1,    23,
      -1,    84,    -1,   374,    -1,    86,   581,   576,   582,   557,
      -1,    86,   581,   576,   582,   147,    -1,   557,  1122,    -1,
     147,  1122,    -1,   379,    -1,   378,  1207,  1210,  1122,    -1,
    1301,   473,  1223,    -1,   212,   473,    -1,   310,   473,    -1,
    1219,   377,    -1,  1301,   551,  1223,    -1,   869,  1223,    -1,
      67,  1223,    -1,   185,    -1,   185,   172,  1290,    -1,    88,
      95,   824,  1287,    -1,    88,   494,  1281,    -1,    88,   555,
    1281,    -1,   278,   473,    -1,   449,   473,    -1,    88,   375,
     635,    -1,    88,   178,   635,    -1,    88,   515,   635,    -1,
     375,   473,  1223,    -1,   178,   473,  1223,    -1,   375,    65,
     635,    -1,   178,    65,   635,    -1,    88,   151,   635,    -1,
     473,    -1,   310,    -1,   256,    -1,   278,    -1,    33,    -1,
      -1,   477,    -1,    -1,  1220,  1287,    -1,    -1,   176,    -1,
     175,    -1,   222,    -1,    -1,   222,  1284,    -1,    -1,   175,
    1130,    -1,    -1,   244,  1284,    -1,   560,  1019,    -1,    -1,
    1227,  1281,  1225,  1229,    -1,    -1,  1227,  1228,  1226,   998,
      -1,   117,    -1,   118,    -1,    -1,   157,    -1,   359,    -1,
      -1,  1269,    -1,  1287,    -1,    -1,   169,   980,  1231,  1232,
      -1,  1232,   583,  1233,    -1,  1233,    -1,    -1,  1312,  1234,
    1235,    -1,   491,   562,   387,   254,    -1,   382,    48,    -1,
     196,    -1,   374,    -1,   256,    -1,   473,    -1,   449,    -1,
     278,    -1,   119,    -1,   412,    -1,    -1,  1152,    -1,    -1,
     411,  1237,  1238,    -1,  1238,   583,  1239,    -1,  1239,    -1,
     449,    -1,   278,    -1,   382,    48,    -1,    -1,   380,  1241,
    1242,    -1,  1216,   256,  1243,    -1,   510,  1284,    -1,    29,
    1019,    -1,   233,  1245,  1019,    -1,    -1,    78,    -1,   382,
      -1,   542,  1287,    -1,    -1,   250,    98,  1248,  1249,    -1,
     250,   494,  1281,   175,   278,    -1,    -1,    -1,    -1,    -1,
    1255,  1254,   209,  1286,  1250,  1256,   219,  1251,   494,  1281,
    1252,   872,  1253,  1257,  1260,  1263,  1264,  1267,    -1,   175,
     278,    -1,    -1,   251,    -1,    -1,    76,    -1,   262,    -1,
      -1,   408,    -1,   205,    -1,    -1,    68,  1258,    -1,  1258,
    1259,    -1,  1259,    -1,   498,    46,  1269,    -1,   343,   138,
      46,  1269,    -1,   138,    46,  1269,    -1,   148,    46,  1269,
      -1,    -1,   247,  1261,    -1,  1261,  1262,    -1,  1262,    -1,
     498,    46,  1269,    -1,   470,    46,  1269,    -1,    -1,   205,
     331,   247,    -1,    -1,   581,  1265,   582,    -1,   581,   582,
      -1,  1265,   583,  1266,    -1,  1266,    -1,  1278,    -1,   588,
    1289,    -1,    -1,   440,  1191,    -1,   499,    -1,   315,    -1,
     525,   499,    -1,  1268,  1285,    -1,  1285,    -1,   193,    -1,
      35,    -1,   355,    -1,  1272,    -1,   575,  1273,    -1,   574,
    1273,    -1,  1268,    -1,  1273,    -1,   330,    -1,   160,    -1,
     517,    -1,   193,    -1,    35,    -1,   525,   193,    -1,   525,
      35,    -1,   102,  1268,    -1,   506,  1268,    -1,   503,  1268,
      -1,   331,    -1,   259,    -1,   522,    -1,   109,    -1,   167,
      -1,  1278,    -1,  1275,    -1,  1287,   589,   576,    -1,  1287,
     589,  1287,   589,   576,    -1,  1019,    -1,  1287,    -1,  1279,
      -1,  1287,    -1,  1279,    -1,  1287,   589,  1287,    -1,   589,
    1287,   589,  1287,    -1,  1287,   589,  1287,   589,  1287,    -1,
    1287,    -1,  1287,   589,  1287,   589,  1287,    -1,  1287,   589,
    1287,    -1,   589,  1287,    -1,  1287,    -1,  1287,   589,  1287,
      -1,   589,  1287,    -1,  1287,    -1,   201,    -1,   203,    -1,
     499,    -1,   499,    -1,   499,    -1,  1283,    -1,  1291,    -1,
    1283,    -1,  1292,    -1,  1287,    -1,  1284,    -1,   243,    -1,
    1289,    -1,  1289,   588,  1289,    -1,    92,  1018,    -1,  1292,
      -1,    20,    -1,    28,    -1,    30,    -1,    47,    -1,    48,
      -1,    57,    -1,    59,    -1,    63,    -1,    70,    -1,    72,
      -1,    81,    -1,   108,    -1,   128,    -1,   139,    -1,   153,
      -1,   169,    -1,   189,    -1,   192,    -1,   195,    -1,   217,
      -1,   234,    -1,   327,    -1,   339,    -1,   341,    -1,   351,
      -1,   356,    -1,   360,    -1,   367,    -1,   370,    -1,   402,
      -1,   405,    -1,   411,    -1,   413,    -1,   420,    -1,   427,
      -1,   431,    -1,   438,    -1,   447,    -1,   452,    -1,   449,
      -1,   453,    -1,   472,    -1,   476,    -1,   518,    -1,   529,
      -1,   530,    -1,   564,    -1,   567,    -1,   538,    -1,     5,
      -1,     7,    -1,     8,    -1,     9,    -1,    10,    -1,    11,
      -1,    17,    -1,    22,    -1,    23,    -1,    25,    -1,    24,
      -1,    26,    -1,    27,    -1,    34,    -1,    38,    -1,    41,
      -1,    43,    -1,    42,    -1,    45,    -1,    51,    -1,    54,
      -1,    56,    -1,    61,    -1,    62,    -1,    64,    -1,    65,
      -1,    67,    -1,    68,    -1,    71,    -1,    73,    -1,    74,
      -1,    75,    -1,    76,    -1,    78,    -1,    79,    -1,    82,
      -1,    84,    -1,    87,    -1,    90,    -1,    98,    -1,    97,
      -1,    99,    -1,   102,    -1,   107,    -1,   113,    -1,   115,
      -1,   119,    -1,   121,    -1,   122,    -1,   123,    -1,   124,
      -1,   131,    -1,   132,    -1,   133,    -1,   140,    -1,   144,
      -1,   143,    -1,   142,    -1,   147,    -1,   149,    -1,   151,
      -1,   150,    -1,   152,    -1,   156,    -1,   157,    -1,   158,
      -1,   162,    -1,   161,    -1,   173,    -1,   137,    -1,   176,
      -1,   164,    -1,   165,    -1,   166,    -1,   174,    -1,   181,
      -1,   180,    -1,   182,    -1,   185,    -1,   183,    -1,   190,
      -1,   196,    -1,   200,    -1,   202,    -1,   221,    -1,   206,
      -1,   207,    -1,   210,    -1,   223,    -1,   224,    -1,   226,
      -1,   227,    -1,   212,    -1,   216,    -1,   231,    -1,   235,
      -1,   238,    -1,   241,    -1,   242,    -1,   248,    -1,   249,
      -1,   251,    -1,   253,    -1,   255,    -1,   256,    -1,   283,
      -1,   278,    -1,   265,    -1,   269,    -1,   266,    -1,   267,
      -1,   279,    -1,   268,    -1,   270,    -1,   264,    -1,   276,
      -1,   272,    -1,   271,    -1,   273,    -1,   274,    -1,   275,
      -1,   281,    -1,   282,    -1,   284,    -1,   286,    -1,   287,
      -1,   288,    -1,   292,    -1,   293,    -1,   294,    -1,   295,
      -1,   296,    -1,   299,    -1,   300,    -1,   304,    -1,   302,
      -1,   306,    -1,   307,    -1,   308,    -1,   309,    -1,   310,
      -1,   312,    -1,   311,    -1,   313,    -1,   316,    -1,   317,
      -1,   321,    -1,   320,    -1,   328,    -1,   322,    -1,   323,
      -1,   333,    -1,   334,    -1,   335,    -1,   337,    -1,   338,
      -1,   352,    -1,   353,    -1,   354,    -1,   357,    -1,   358,
      -1,   359,    -1,   361,    -1,   362,    -1,   364,    -1,   363,
      -1,   365,    -1,   366,    -1,   371,    -1,   372,    -1,   374,
      -1,   376,    -1,   377,    -1,   378,    -1,   379,    -1,   381,
      -1,   382,    -1,   383,    -1,   386,    -1,   390,    -1,   391,
      -1,   393,    -1,   392,    -1,   394,    -1,   397,    -1,   398,
      -1,   399,    -1,   401,    -1,   404,    -1,   406,    -1,   409,
      -1,   412,    -1,   415,    -1,   416,    -1,   421,    -1,   422,
      -1,   423,    -1,   424,    -1,   425,    -1,   426,    -1,   428,
      -1,   430,    -1,   436,    -1,   435,    -1,   437,    -1,   448,
      -1,   442,    -1,   446,    -1,   451,    -1,   454,    -1,   455,
      -1,   463,    -1,   462,    -1,   465,    -1,   468,    -1,   471,
      -1,   473,    -1,   477,    -1,   479,    -1,   480,    -1,   481,
      -1,   483,    -1,   482,    -1,   486,    -1,   487,    -1,   488,
      -1,   489,    -1,   491,    -1,   495,    -1,   492,    -1,   496,
      -1,   497,    -1,   500,    -1,   501,    -1,   512,    -1,   513,
      -1,   514,    -1,   503,    -1,   504,    -1,   505,    -1,   506,
      -1,   519,    -1,   520,    -1,   521,    -1,   178,    -1,   523,
      -1,   524,    -1,   527,    -1,   526,    -1,   533,    -1,   536,
      -1,   540,    -1,   541,    -1,   551,    -1,   555,    -1,   548,
      -1,   557,    -1,   556,    -1,   558,    -1,   563,    -1,   566,
      -1,   570,    -1,    -1,   440,  1295,  1294,  1296,    -1,    -1,
     342,    -1,  1297,    -1,  1296,   583,  1297,    -1,    -1,  1298,
    1303,    -1,  1300,    -1,   183,    -1,   251,    -1,   437,    -1,
      -1,   337,    -1,    -1,   183,    -1,   251,    -1,   437,    -1,
      -1,   183,   589,    -1,   251,   589,    -1,   437,   589,    -1,
    1304,    -1,  1300,  1305,    -1,  1299,  1306,  1177,  1309,    -1,
    1299,   512,   226,   242,  1307,    -1,   588,  1289,  1177,  1019,
      -1,   588,   588,  1302,  1306,  1177,  1309,    -1,   869,   874,
      -1,   311,  1177,  1019,    -1,   311,   871,   876,    -1,   361,
    1177,  1308,    -1,   361,   172,  1290,  1177,  1308,    -1,  1287,
      -1,  1287,   589,  1287,    -1,   112,   589,  1287,    -1,   387,
     523,    -1,   387,    71,    -1,   406,   387,    -1,   435,    -1,
     499,    -1,   361,   581,   499,   582,    -1,   335,   581,   499,
     582,    -1,  1019,    -1,   112,    -1,   336,    -1,    12,    -1,
      33,    -1,    -1,   254,  1312,  1311,  1313,    -1,   494,    -1,
     491,    -1,  1314,    -1,  1313,   583,  1314,    -1,  1281,  1104,
    1315,    -1,   387,    -1,   565,    -1,   262,   565,    -1,   387,
     251,    -1,    -1,   534,  1317,  1312,    -1,   189,  1281,   339,
    1104,    -1,   189,  1282,    63,    -1,    -1,   189,  1282,   387,
    1319,  1320,  1106,  1123,    -1,  1321,    -1,  1287,  1322,    -1,
     165,    -1,   321,    -1,   165,    -1,   321,    -1,   372,    -1,
     235,    -1,    -1,  1324,  1323,   581,  1182,   582,    -1,   145,
      -1,   179,    -1,   236,    -1,   188,    -1,   263,    -1,   418,
     634,  1326,    -1,  1330,   336,  1329,  1341,   175,  1343,    -1,
    1330,   336,   178,  1341,   175,  1343,    -1,  1330,   336,   375,
    1341,   175,  1343,    -1,    12,  1331,   583,   184,   342,   175,
    1343,    -1,   184,   634,  1328,    -1,  1330,   336,  1329,  1341,
     510,  1343,  1348,  1349,    -1,  1330,   336,   178,  1341,   510,
    1343,  1348,  1349,    -1,  1330,   336,   375,  1341,   510,  1343,
    1348,  1349,    -1,    -1,   494,    -1,  1332,    -1,    12,  1331,
      -1,    -1,   374,    -1,  1333,    -1,  1332,   583,  1333,    -1,
      -1,   432,  1334,  1345,    -1,    -1,   215,  1335,  1345,    -1,
      -1,   537,  1336,  1345,    -1,    -1,   395,  1337,  1345,    -1,
     116,    -1,   539,    -1,   208,    -1,    13,    -1,    88,    -1,
     129,    -1,   153,    -1,   401,    -1,   446,    -1,   376,    -1,
     164,    -1,   184,   342,    -1,   445,    96,    -1,   486,    -1,
      88,   496,   491,    -1,   254,   491,    -1,   409,   449,    -1,
     409,    62,    -1,    88,   555,    -1,   445,   555,    -1,    88,
     422,    -1,    13,   422,    -1,    88,   540,    -1,   151,    -1,
     515,    -1,    -1,    16,    -1,  1340,  1338,  1339,    -1,  1340,
      -1,   481,   499,    -1,   227,   499,    -1,    61,   499,    -1,
     576,    -1,  1287,   589,   576,    -1,   576,   589,   576,    -1,
    1281,    -1,  1290,    -1,  1342,   583,  1290,    -1,  1344,    -1,
    1343,   583,  1344,    -1,  1290,   202,    46,   499,    -1,  1290,
     202,    46,   361,   499,    -1,  1290,    -1,    -1,   581,  1346,
     582,    -1,  1346,   583,  1347,    -1,  1347,    -1,  1287,    -1,
      -1,   410,  1339,    -1,   410,   469,    -1,   410,   566,    -1,
     410,   323,    -1,    -1,   562,  1350,    -1,  1350,  1351,    -1,
    1351,    -1,   184,   342,    -1,   282,  1128,    -1,   286,  1128,
      -1,   281,  1128,    -1,   287,  1128,    -1,    -1,    30,  1353,
    1354,    -1,    -1,   563,    -1,    -1,    16,   327,    54,    -1,
      16,    54,    -1,    -1,   400,    -1,   327,   400,    -1,    -1,
     427,    -1,    72,  1354,  1355,  1356,    -1,   420,  1354,  1355,
    1356,    -1,   420,  1354,   510,  1357,  1287,    -1,   427,  1287,
      -1,   400,   427,  1287,    -1,    -1,  1363,    -1,    -1,   531,
    1369,  1364,   999,    -1,    -1,  1363,    -1,  1366,    -1,    -1,
    1367,  1368,    -1,  1118,  1122,    -1,  1124,    -1,    -1,   125,
      -1,    12,    -1,    -1,   432,  1372,  1001,  1370,  1373,    -1,
     581,  1372,  1000,  1370,  1373,   582,    -1,    -1,    -1,  1379,
    1375,    -1,  1378,  1376,    -1,  1380,  1377,  1384,    -1,  1384,
      -1,  1392,    -1,  1403,    -1,  1397,    -1,   621,    -1,  1384,
      -1,  1392,    -1,  1403,    -1,  1397,    -1,  1396,    -1,   621,
      -1,  1378,    -1,  1379,    -1,    -1,   113,   145,  1290,    -1,
    1381,    -1,  1381,  1382,    -1,  1382,    -1,   347,   408,    -1,
      11,   145,   524,    -1,    11,   145,   294,    -1,    11,   145,
     497,    -1,    -1,   467,   431,   113,    -1,   467,   431,   221,
      -1,    -1,  1383,   555,  1281,  1385,  1386,    18,  1388,    -1,
      -1,   581,  1387,   582,    -1,  1287,    -1,  1387,   583,  1287,
      -1,    -1,  1389,  1390,  1391,    -1,   432,  1001,    -1,   581,
    1000,   582,  1365,    -1,    -1,   562,    60,   342,    -1,   562,
      51,    60,   342,    -1,   562,   251,    60,   342,    -1,    -1,
      -1,    -1,   515,  1014,   635,   720,   721,   336,  1014,  1393,
    1281,   172,  1014,  1394,   134,   425,  1395,   670,    -1,    10,
    1014,   178,  1287,   416,   836,   453,  1284,    -1,  1014,   178,
    1287,   416,   836,   453,  1284,    -1,    -1,    -1,    -1,    -1,
      -1,  1014,   178,   635,   581,  1398,   646,   582,  1399,   416,
    1400,   847,  1401,   637,  1402,   670,    -1,    -1,    -1,    -1,
      -1,   375,  1014,   635,  1404,   581,  1405,   650,   582,  1406,
     637,  1407,   670,    -1,   567,  1410,  1409,  1411,    -1,   567,
     139,  1409,  1413,    -1,   567,   370,  1409,    -1,   567,    72,
    1409,  1412,    -1,   567,   420,  1409,    -1,   567,   391,    -1,
    1269,    -1,  1269,   583,  1269,    -1,  1269,   583,  1269,   583,
    1128,    -1,    30,    -1,   472,    -1,    -1,   229,    -1,   415,
      -1,    -1,   338,   362,    -1,    -1,    -1,   487,  1414,  1415,
      -1,    -1,   172,   296,    -1,   217,   364,  1287,   453,  1284,
      -1,   530,   364,  1287,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1350,  1350,  1363,  1362,  1387,  1394,  1396,  1400,  1401,
    1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,  1414,  1415,
    1416,  1417,  1418,  1419,  1420,  1421,  1422,  1423,  1424,  1425,
    1426,  1427,  1428,  1429,  1430,  1431,  1432,  1433,  1434,  1435,
    1436,  1437,  1438,  1439,  1440,  1441,  1442,  1443,  1444,  1445,
    1446,  1447,  1448,  1449,  1450,  1451,  1452,  1453,  1454,  1455,
    1456,  1460,  1470,  1471,  1475,  1485,  1492,  1503,  1502,  1513,
    1515,  1519,  1520,  1524,  1537,  1536,  1556,  1555,  1566,  1567,
    1571,  1575,  1579,  1583,  1587,  1591,  1596,  1600,  1604,  1608,
    1612,  1616,  1621,  1625,  1629,  1645,  1649,  1661,  1660,  1695,
    1693,  1724,  1723,  1736,  1735,  1743,  1747,  1751,  1755,  1762,
    1775,  1776,  1780,  1784,  1788,  1792,  1796,  1800,  1804,  1812,
    1811,  1842,  1841,  1848,  1855,  1856,  1861,  1866,  1875,  1881,
    1887,  1889,  1896,  1897,  1901,  1907,  1916,  1917,  1925,  1925,
    1983,  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,  1992,
    1993,  1994,  1995,  2000,  2014,  2030,  2049,  2050,  2054,  2055,
    2060,  2062,  2064,  2066,  2068,  2070,  2072,  2078,  2079,  2080,
    2084,  2088,  2096,  2095,  2108,  2110,  2113,  2115,  2119,  2123,
    2130,  2132,  2136,  2137,  2142,  2161,  2187,  2189,  2193,  2194,
    2198,  2224,  2225,  2226,  2227,  2231,  2232,  2236,  2237,  2242,
    2245,  2272,  2271,  2337,  2352,  2351,  2399,  2425,  2425,  2447,
    2448,  2453,  2455,  2460,  2483,  2491,  2508,  2509,  2513,  2517,
    2526,  2533,  2540,  2550,  2565,  2583,  2584,  2588,  2589,  2590,
    2591,  2592,  2593,  2594,  2595,  2596,  2597,  2598,  2599,  2600,
    2605,  2604,  2611,  2611,  2666,  2665,  2693,  2693,  2707,  2760,
    2803,  2824,  2823,  2845,  2864,  2866,  2867,  2871,  2891,  2914,
    2916,  2932,  2914,  2952,  2954,  2955,  2959,  2960,  2965,  2971,
    2964,  2990,  2989,  3005,  3006,  3010,  3011,  3016,  3020,  3015,
    3037,  3041,  3036,  3056,  3066,  3071,  3070,  3106,  3107,  3112,
    3111,  3144,  3144,  3159,  3158,  3194,  3206,  3208,  3205,  3234,
    3233,  3253,  3255,  3260,  3262,  3264,  3281,  3286,  3292,  3299,
    3300,  3308,  3314,  3323,  3329,  3335,  3336,  3340,  3340,  3345,
    3346,  3347,  3351,  3352,  3353,  3357,  3361,  3362,  3363,  3367,
    3368,  3369,  3370,  3371,  3372,  3373,  3374,  3378,  3382,  3383,
    3384,  3388,  3389,  3390,  3391,  3392,  3396,  3400,  3401,  3402,
    3406,  3407,  3408,  3409,  3410,  3411,  3412,  3416,  3420,  3421,
    3422,  3426,  3427,  3428,  3433,  3441,  3449,  3457,  3469,  3481,
    3486,  3491,  3499,  3507,  3515,  3523,  3531,  3539,  3547,  3560,
    3573,  3586,  3588,  3592,  3597,  3610,  3611,  3662,  3663,  3666,
    3680,  3697,  3702,  3700,  3707,  3709,  3708,  3712,  3711,  3741,
    3742,  3747,  3746,  3779,  3778,  3795,  3799,  3806,  3805,  3809,
    3808,  3812,  3811,  3817,  3818,  3823,  3824,  3828,  3829,  3833,
    3844,  3859,  3875,  3876,  3892,  3894,  3893,  3898,  3896,  3907,
    3908,  3912,  3923,  3939,  3940,  3956,  3957,  3980,  3981,  3986,
    3985,  4010,  4021,  4041,  4056,  4074,  4086,  4102,  4103,  4107,
    4117,  4118,  4122,  4139,  4198,  4206,  4233,  4234,  4239,  4238,
    4259,  4264,  4265,  4269,  4270,  4274,  4276,  4282,  4284,  4286,
    4288,  4290,  4292,  4302,  4318,  4301,  4332,  4333,  4337,  4338,
    4342,  4343,  4347,  4348,  4352,  4353,  4357,  4358,  4362,  4366,
    4367,  4370,  4372,  4376,  4377,  4381,  4382,  4383,  4387,  4392,
    4399,  4404,  4409,  4414,  4419,  4424,  4429,  4444,  4450,  4455,
    4460,  4465,  4470,  4475,  4490,  4491,  4492,  4497,  4502,  4507,
    4509,  4511,  4513,  4519,  4524,  4532,  4550,  4567,  4590,  4604,
    4605,  4606,  4607,  4608,  4609,  4610,  4614,  4615,  4616,  4620,
    4621,  4625,  4626,  4627,  4628,  4632,  4633,  4637,  4638,  4642,
    4643,  4650,  4665,  4677,  4701,  4705,  4711,  4713,  4717,  4721,
    4722,  4726,  4731,  4730,  4753,  4754,  4755,  4756,  4761,  4765,
    4770,  4775,  4779,  4784,  4789,  4795,  4800,  4806,  4810,  4815,
    4820,  4822,  4824,  4826,  4839,  4841,  4846,  4851,  4863,  4868,
    4873,  4878,  4880,  4882,  4884,  4886,  4888,  4890,  4892,  4895,
    4894,  4899,  4898,  4902,  4904,  4913,  4914,  4915,  4920,  4921,
    4922,  4923,  4924,  4928,  4932,  4933,  4937,  4938,  4942,  4943,
    4944,  4945,  4946,  4950,  4951,  4952,  4953,  4954,  4958,  4963,
    4965,  4971,  4972,  4974,  4979,  4988,  4989,  4993,  4994,  4998,
    4999,  5000,  5004,  5005,  5006,  5007,  5010,  5011,  5014,  5015,
    5019,  5020,  5024,  5025,  5029,  5030,  5031,  5032,  5039,  5040,
    5046,  5052,  5058,  5064,  5065,  5081,  5087,  5092,  5093,  5097,
    5105,  5109,  5110,  5114,  5115,  5119,  5128,  5132,  5133,  5137,
    5148,  5149,  5153,  5154,  5158,  5159,  5163,  5164,  5165,  5166,
    5175,  5176,  5180,  5181,  5185,  5186,  5187,  5196,  5199,  5201,
    5206,  5205,  5218,  5219,  5223,  5230,  5240,  5241,  5245,  5246,
    5250,  5251,  5252,  5253,  5254,  5258,  5259,  5260,  5261,  5262,
    5266,  5267,  5268,  5281,  5282,  5286,  5287,  5291,  5292,  5296,
    5297,  5298,  5302,  5303,  5304,  5305,  5318,  5330,  5331,  5335,
    5336,  5340,  5341,  5345,  5346,  5350,  5351,  5353,  5366,  5367,
    5368,  5372,  5373,  5377,  5383,  5397,  5398,  5402,  5403,  5407,
    5408,  5416,  5415,  5442,  5441,  5455,  5467,  5466,  5485,  5484,
    5503,  5502,  5521,  5515,  5535,  5534,  5567,  5572,  5577,  5582,
    5587,  5597,  5598,  5599,  5600,  5604,  5605,  5617,  5618,  5622,
    5623,  5626,  5628,  5629,  5630,  5632,  5634,  5635,  5644,  5645,
    5649,  5658,  5656,  5666,  5676,  5675,  5685,  5683,  5693,  5700,
    5704,  5711,  5715,  5720,  5719,  5735,  5737,  5742,  5751,  5750,
    5766,  5770,  5769,  5781,  5782,  5786,  5801,  5802,  5806,  5815,
    5816,  5820,  5825,  5824,  5832,  5841,  5831,  5853,  5862,  5866,
    5875,  5884,  5890,  5896,  5905,  5914,  5933,  5954,  5959,  5963,
    5971,  5972,  5976,  5977,  5981,  5982,  5983,  5987,  5988,  5989,
    5993,  5994,  5995,  5996,  6005,  6004,  6015,  6023,  6022,  6032,
    6041,  6050,  6051,  6058,  6058,  6064,  6065,  6069,  6070,  6071,
    6075,  6076,  6092,  6093,  6098,  6097,  6109,  6108,  6120,  6119,
    6129,  6130,  6131,  6136,  6135,  6148,  6149,  6153,  6154,  6158,
    6159,  6160,  6165,  6164,  6177,  6186,  6185,  6203,  6204,  6208,
    6209,  6213,  6214,  6215,  6216,  6217,  6218,  6223,  6222,  6235,
    6236,  6237,  6242,  6241,  6247,  6254,  6259,  6267,  6268,  6272,
    6285,  6294,  6295,  6299,  6308,  6309,  6314,  6313,  6323,  6324,
    6328,  6337,  6337,  6348,  6349,  6354,  6355,  6364,  6373,  6374,
    6378,  6408,  6413,  6412,  6432,  6440,  6432,  6447,  6448,  6449,
    6450,  6451,  6455,  6462,  6469,  6471,  6482,  6483,  6487,  6488,
    6495,  6496,  6497,  6498,  6504,  6510,  6516,  6530,  6533,  6535,
    6542,  6553,  6554,  6555,  6570,  6596,  6602,  6608,  6609,  6613,
    6614,  6615,  6616,  6617,  6621,  6622,  6627,  6678,  6685,  6728,
    6734,  6740,  6746,  6752,  6758,  6764,  6770,  6774,  6780,  6786,
    6792,  6798,  6804,  6808,  6814,  6824,  6830,  6838,  6844,  6854,
    6860,  6869,  6879,  6885,  6895,  6901,  6910,  6914,  6920,  6926,
    6932,  6938,  6944,  6950,  6956,  6962,  6968,  6974,  6980,  6986,
    6992,  6998,  7002,  7003,  7007,  7008,  7012,  7013,  7017,  7018,
    7022,  7023,  7024,  7025,  7026,  7027,  7031,  7032,  7036,  7037,
    7038,  7039,  7040,  7041,  7053,  7054,  7055,  7056,  7057,  7063,
    7067,  7073,  7079,  7085,  7091,  7093,  7100,  7107,  7113,  7115,
    7124,  7131,  7139,  7145,  7152,  7158,  7172,  7179,  7195,  7201,
    7207,  7215,  7221,  7227,  7233,  7239,  7254,  7266,  7272,  7278,
    7284,  7290,  7296,  7302,  7308,  7314,  7320,  7326,  7332,  7338,
    7344,  7350,  7356,  7362,  7370,  7391,  7398,  7404,  7411,  7418,
    7425,  7432,  7439,  7445,  7451,  7458,  7465,  7471,  7478,  7484,
    7490,  7496,  7502,  7508,  7518,  7528,  7534,  7540,  7547,  7554,
    7569,  7575,  7581,  7587,  7593,  7600,  7606,  7612,  7618,  7624,
    7636,  7642,  7648,  7654,  7660,  7672,  7678,  7694,  7700,  7707,
    7714,  7721,  7728,  7735,  7739,  7759,  7758,  7826,  7858,  7860,
    7865,  7866,  7870,  7871,  7875,  7876,  7880,  7887,  7895,  7915,
    7921,  7927,  7933,  7939,  7945,  7954,  7961,  7963,  7960,  7970,
    7981,  7987,  7993,  7999,  8005,  8011,  8017,  8023,  8029,  8036,
    8035,  8054,  8053,  8068,  8078,  8086,  8102,  8103,  8108,  8113,
    8118,  8121,  8135,  8134,  8151,  8153,  8155,  8157,  8159,  8161,
    8163,  8165,  8167,  8169,  8171,  8176,  8177,  8181,  8188,  8196,
    8197,  8201,  8208,  8216,  8217,  8221,  8222,  8226,  8234,  8244,
    8245,  8254,  8265,  8266,  8271,  8272,  8292,  8294,  8298,  8296,
    8313,  8311,  8329,  8327,  8334,  8343,  8341,  8359,  8358,  8368,
    8379,  8377,  8396,  8395,  8406,  8417,  8418,  8419,  8424,  8424,
    8437,  8459,  8507,  8506,  8529,  8546,  8529,  8553,  8557,  8583,
    8584,  8589,  8593,  8594,  8595,  8599,  8600,  8605,  8604,  8610,
    8609,  8617,  8618,  8621,  8623,  8623,  8627,  8627,  8632,  8633,
    8637,  8639,  8644,  8645,  8649,  8660,  8673,  8674,  8675,  8676,
    8677,  8678,  8679,  8680,  8681,  8682,  8683,  8684,  8688,  8689,
    8708,  8709,  8710,  8711,  8712,  8713,  8714,  8715,  8716,  8720,
    8721,  8722,  8723,  8726,  8728,  8729,  8733,  8734,  8742,  8744,
    8748,  8750,  8749,  8763,  8766,  8765,  8780,  8786,  8801,  8803,
    8807,  8809,  8814,  8815,  8828,  8846,  8850,  8851,  8855,  8868,
    8870,  8875,  8874,  8909,  8911,  8916,  8917,  8918,  8923,  8929,
    8933,  8934,  8938,  8942,  8949,  8956,  8966,  8970,  8976,  8982,
    8992,  8996,  9005,  9006,  9007,  9008,  9009,  9010,  9014,  9015,
    9016,  9017,  9018,  9022,  9023,  9024,  9025,  9026,  9030,  9031,
    9032,  9033,  9037,  9042,  9043,  9047,  9048,  9051,  9054,  9053,
    9084,  9085,  9089,  9090,  9094,  9106,  9106,  9117,  9118,  9122,
    9141,  9174,  9173,  9186,  9185,  9194,  9206,  9218,  9217,  9234,
    9241,  9241,  9255,  9262,  9285,  9306,  9318,  9322,  9328,  9334,
    9341,  9346,  9351,  9361,  9362,  9366,  9374,  9375,  9379,  9389,
    9390,  9394,  9395,  9403,  9413,  9402,  9423,  9430,  9422,  9440,
    9452,  9453,  9454,  9458,  9459,  9463,  9464,  9468,  9477,  9478,
    9479,  9481,  9480,  9491,  9492,  9496,  9497,  9499,  9498,  9502,
    9501,  9507,  9508,  9512,  9513,  9517,  9527,  9528,  9532,  9533,
    9538,  9537,  9551,  9552,  9556,  9561,  9569,  9570,  9578,  9580,
    9580,  9588,  9597,  9587,  9619,  9620,  9624,  9632,  9633,  9637,
    9647,  9648,  9655,  9654,  9668,  9667,  9676,  9675,  9683,  9682,
    9692,  9693,  9697,  9709,  9724,  9725,  9729,  9730,  9734,  9735,
    9736,  9740,  9750,  9752,  9755,  9757,  9760,  9761,  9764,  9768,
    9772,  9776,  9780,  9784,  9788,  9792,  9796,  9804,  9807,  9817,
    9816,  9830,  9837,  9845,  9853,  9861,  9869,  9877,  9885,  9892,
    9894,  9896,  9905,  9918,  9922,  9927,  9926,  9931,  9940,  9945,
    9953,  9960,  9965,  9970,  9975,  9977,  9979,  9981,  9983,  9985,
    9992, 10000, 10012, 10024, 10026, 10034, 10041, 10048, 10058, 10065,
   10071, 10080, 10088, 10092, 10096, 10103, 10110, 10116, 10123, 10130,
   10140, 10150, 10158, 10160, 10162, 10167, 10168, 10171, 10173, 10177,
   10178, 10182, 10183, 10187, 10188, 10192, 10193, 10197, 10198, 10201,
   10203, 10210, 10221, 10220, 10234, 10233, 10243, 10244, 10248, 10249,
   10250, 10254, 10255, 10256, 10271, 10270, 10282, 10283, 10288, 10287,
   10290, 10292, 10294, 10296, 10298, 10300, 10302, 10304, 10306, 10308,
   10313, 10314, 10319, 10318, 10328, 10329, 10333, 10334, 10335, 10340,
   10339, 10350, 10354, 10358, 10370, 10380, 10381, 10382, 10388, 10400,
   10399, 10414, 10432, 10443, 10447, 10457, 10431, 10461, 10471, 10472,
   10476, 10477, 10489, 10493, 10494, 10495, 10498, 10500, 10504, 10505,
   10509, 10514, 10521, 10526, 10533, 10535, 10539, 10540, 10544, 10549,
   10556, 10558, 10566, 10567, 10568, 10572, 10574, 10579, 10580, 10589,
   10590, 10596, 10620, 10632, 10643, 10662, 10670, 10682, 10697, 10718,
   10719, 10720, 10728, 10729, 10730, 10737, 10743, 10749, 10755, 10761,
   10790, 10818, 10819, 10820, 10824, 10834, 10844, 10850, 10859, 10874,
   10875, 10879, 10888, 10904, 10908, 10955, 10959, 10977, 10981, 11060,
   11085, 11116, 11117, 11133, 11143, 11147, 11153, 11159, 11169, 11179,
   11180, 11209, 11225, 11241, 11258, 11259, 11270, 11271, 11282, 11283,
   11284, 11288, 11302, 11315, 11330, 11331, 11332, 11333, 11334, 11335,
   11336, 11337, 11338, 11339, 11340, 11341, 11342, 11343, 11344, 11345,
   11346, 11347, 11348, 11349, 11350, 11351, 11352, 11353, 11354, 11355,
   11356, 11357, 11358, 11359, 11360, 11361, 11362, 11363, 11364, 11365,
   11366, 11367, 11368, 11369, 11370, 11371, 11372, 11373, 11374, 11375,
   11376, 11377, 11378, 11379, 11389, 11390, 11391, 11392, 11393, 11394,
   11395, 11396, 11397, 11398, 11399, 11400, 11401, 11402, 11403, 11404,
   11405, 11406, 11407, 11408, 11409, 11410, 11411, 11412, 11413, 11414,
   11415, 11416, 11417, 11418, 11419, 11420, 11421, 11422, 11423, 11424,
   11425, 11426, 11427, 11428, 11429, 11430, 11431, 11432, 11433, 11434,
   11435, 11436, 11437, 11438, 11439, 11440, 11441, 11442, 11443, 11444,
   11445, 11446, 11447, 11448, 11449, 11450, 11451, 11452, 11453, 11454,
   11455, 11456, 11457, 11458, 11459, 11460, 11461, 11462, 11463, 11464,
   11465, 11466, 11467, 11468, 11469, 11470, 11471, 11472, 11473, 11474,
   11475, 11476, 11477, 11478, 11479, 11480, 11481, 11482, 11483, 11484,
   11485, 11486, 11487, 11488, 11489, 11490, 11491, 11492, 11493, 11494,
   11495, 11496, 11497, 11498, 11499, 11500, 11501, 11502, 11503, 11504,
   11505, 11506, 11507, 11508, 11509, 11510, 11511, 11512, 11513, 11514,
   11515, 11516, 11517, 11518, 11519, 11520, 11521, 11522, 11523, 11524,
   11525, 11526, 11527, 11528, 11529, 11530, 11531, 11532, 11533, 11534,
   11535, 11536, 11537, 11538, 11539, 11540, 11541, 11542, 11543, 11544,
   11545, 11546, 11547, 11548, 11549, 11550, 11551, 11552, 11553, 11554,
   11555, 11556, 11557, 11558, 11559, 11560, 11561, 11562, 11563, 11564,
   11565, 11566, 11567, 11568, 11569, 11570, 11571, 11572, 11573, 11574,
   11575, 11576, 11577, 11578, 11579, 11580, 11581, 11582, 11583, 11584,
   11585, 11586, 11587, 11588, 11589, 11590, 11591, 11592, 11593, 11594,
   11595, 11596, 11597, 11598, 11599, 11600, 11601, 11602, 11603, 11604,
   11605, 11606, 11607, 11608, 11609, 11610, 11611, 11612, 11613, 11614,
   11615, 11616, 11617, 11618, 11619, 11620, 11621, 11622, 11623, 11624,
   11625, 11626, 11627, 11628, 11629, 11630, 11631, 11632, 11633, 11634,
   11635, 11636, 11637, 11638, 11639, 11640, 11641, 11642, 11643, 11644,
   11645, 11646, 11647, 11648, 11649, 11650, 11657, 11656, 11671, 11672,
   11676, 11677, 11681, 11681, 11761, 11762, 11763, 11764, 11768, 11769,
   11773, 11774, 11775, 11776, 11780, 11781, 11782, 11783, 11787, 11788,
   11792, 11889, 11908, 11919, 11927, 11941, 11956, 11975, 12002, 12015,
   12047, 12090, 12104, 12105, 12106, 12107, 12111, 12112, 12121, 12132,
   12133, 12134, 12140, 12146, 12158, 12157, 12173, 12174, 12178, 12179,
   12183, 12191, 12192, 12193, 12194, 12199, 12198, 12218, 12230, 12243,
   12242, 12268, 12269, 12273, 12274, 12278, 12279, 12280, 12281, 12283,
   12282, 12295, 12296, 12297, 12298, 12299, 12305, 12310, 12316, 12327,
   12338, 12345, 12350, 12357, 12369, 12383, 12385, 12389, 12390, 12397,
   12399, 12403, 12404, 12409, 12408, 12412, 12411, 12415, 12414, 12418,
   12417, 12420, 12421, 12422, 12423, 12424, 12425, 12426, 12427, 12428,
   12429, 12430, 12431, 12432, 12433, 12434, 12435, 12436, 12437, 12438,
   12439, 12440, 12441, 12442, 12443, 12444, 12448, 12449, 12453, 12454,
   12458, 12468, 12478, 12491, 12506, 12519, 12532, 12544, 12549, 12557,
   12562, 12570, 12597, 12599, 12605, 12609, 12613, 12614, 12618, 12645,
   12647, 12651, 12655, 12659, 12666, 12667, 12671, 12672, 12676, 12677,
   12683, 12689, 12695, 12705, 12704, 12714, 12715, 12720, 12721, 12722,
   12727, 12728, 12729, 12733, 12734, 12738, 12748, 12755, 12765, 12774,
   12788, 12789, 12794, 12793, 12834, 12835, 12836, 12840, 12840, 12864,
   12865, 12869, 12870, 12871, 12875, 12880, 12885, 12892, 12913, 12948,
   12950, 12952, 12957, 12958, 12959, 12960, 12961, 12965, 12966, 12967,
   12968, 12969, 12970, 12980, 12981, 12986, 12999, 13012, 13014, 13016,
   13021, 13026, 13028, 13030, 13036, 13037, 13039, 13045, 13044, 13058,
   13059, 13063, 13068, 13076, 13076, 13101, 13102, 13107, 13108, 13110,
   13112, 13130, 13136, 13141, 13123, 13202, 13220, 13245, 13277, 13281,
   13289, 13312, 13241, 13377, 13401, 13410, 13418, 13376, 13439, 13443,
   13447, 13451, 13455, 13459, 13466, 13473, 13480, 13490, 13491, 13495,
   13496, 13497, 13501, 13502, 13507, 13509, 13508, 13514, 13515, 13519,
   13529
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM",
  "ANY_SYM", "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM",
  "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CHAIN_SYM", "CHANGE",
  "CHANGED", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM",
  "CIPHER_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONTAINS_SYM", "CONTEXT_SYM",
  "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM", "COUNT_SYM",
  "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE", "CURRENT_USER",
  "CURSOR_SYM", "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM",
  "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL",
  "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM", "DELAYED_SYM",
  "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE",
  "DETERMINISTIC_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD",
  "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP",
  "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM",
  "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM",
  "EVERY_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXPANSION_SYM",
  "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM",
  "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM", "FIRST_SYM",
  "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM",
  "FOREIGN", "FOR_SYM", "FOUND_SYM", "FRAC_SECOND_SYM", "FROM", "FULL",
  "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM",
  "HAVING", "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED",
  "IF", "IGNORE_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INNOBASE_SYM", "INOUT_SYM",
  "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM",
  "LAST_SYM", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM",
  "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES",
  "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM",
  "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MICROSECOND_SYM", "MIGRATE_SYM", "MINUTE_MICROSECOND_SYM",
  "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS", "MIN_SYM", "MODE_SYM",
  "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM", "MONTH_SYM", "MULTILINESTRING",
  "MULTIPOINT", "MULTIPOLYGON", "MUTEX_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM",
  "NE", "NEG", "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM",
  "NOT2_SYM", "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM",
  "NO_WRITE_TO_BINLOG", "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM",
  "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PAGE_CHECKSUM_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARTIAL", "PARTITIONING_SYM",
  "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD", "PHASE_SYM",
  "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM", "POLYGON", "PORT_SYM",
  "POSITION_SYM", "PRECISION", "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM",
  "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE", "PROCESS", "PROCESSLIST_SYM",
  "PROFILE_SYM", "PROFILES_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM",
  "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP",
  "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM",
  "RELOAD", "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR",
  "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM",
  "RESET_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM", "SECOND_MICROSECOND_SYM",
  "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM",
  "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM",
  "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM",
  "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNED_SYM",
  "SIMPLE_SYM", "SLAVE", "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM",
  "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM",
  "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT",
  "SQL_BUFFER_RESULT", "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS",
  "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD",
  "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TEMPORARY",
  "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM",
  "THEN_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM",
  "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM",
  "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USE_FRM", "USE_SYM", "USING", "UTC_DATE_SYM",
  "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES", "VALUE_SYM", "VARBINARY",
  "VARCHAR", "VARIABLES", "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM",
  "VIEW_SYM", "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE",
  "WHILE_SYM", "WITH", "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM",
  "XA_SYM", "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'",
  "'-'", "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','",
  "'!'", "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query",
  "@1", "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "@3",
  "change", "@4", "master_defs", "master_def", "master_file_def", "create",
  "@5", "@6", "@7", "@8", "server_def", "server_options_list",
  "server_option", "event_tail", "@9", "ev_schedule_time", "@10",
  "opt_ev_status", "ev_starts", "ev_ends", "opt_ev_on_completion",
  "ev_on_completion", "opt_ev_comment", "ev_sql_stmt", "@11",
  "ev_sql_stmt_inner", "clear_privileges", "sp_name", "sp_a_chistics",
  "sp_c_chistics", "sp_chistic", "sp_c_chistic", "sp_suid", "call", "@12",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_init_param", "sp_fdparam", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "@13", "@14", "sp_cursor_stmt",
  "@15", "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "opt_value", "sp_hcond", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_if", "@16", "sp_proc_stmt_statement",
  "@17", "sp_proc_stmt_return", "@18", "sp_proc_stmt_unlabeled", "@19",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "@20", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "@21", "@22", "@23", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "@24", "@25",
  "searched_case_stmt", "@26", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "@27", "@28",
  "searched_when_clause", "@29", "@30", "else_clause_opt",
  "sp_labeled_control", "@31", "sp_opt_label", "sp_labeled_block", "@32",
  "sp_unlabeled_block", "@33", "sp_block_content", "@34",
  "sp_unlabeled_control", "@35", "@36", "@37", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "@38", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "@39", "create3", "@40", "@41", "opt_partitioning",
  "partitioning", "@42", "partition_entry", "@43", "partition",
  "part_type_def", "@44", "@45", "@46", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_func", "sub_part_func",
  "opt_no_parts", "opt_sub_part", "@47", "@48", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_no_subparts", "part_defs",
  "part_def_list", "part_definition", "@49", "part_name",
  "opt_part_values", "part_func_max", "max_value_sym", "part_range_func",
  "part_list_func", "part_list_item", "part_bit_expr", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "@50", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "@51", "@52", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "field_list", "field_list_item", "column_def", "key_def",
  "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "@53", "type", "@54", "@55", "spatial_type",
  "char", "nchar", "varchar", "nvarchar", "int_type", "real_type",
  "float_options", "precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "now_or_signed_literal", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "opt_binary", "opt_bin_mod", "opt_bin_charset",
  "opt_primary", "references", "@56", "opt_ref_list", "ref_list",
  "opt_on_delete", "opt_on_delete_list", "opt_on_delete_item",
  "delete_option", "key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique_or_fulltext",
  "init_key_options", "key_alg", "key_options", "key_opts",
  "key_using_alg", "key_opt", "btree_or_rtree", "key_list", "key_part",
  "opt_ident", "opt_component", "string_list", "alter", "@57", "@58",
  "@59", "@60", "@61", "@62", "@63", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "@64", "@65", "@66", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "@67",
  "add_part_extra", "reorg_partition_rule", "@68", "reorg_parts_rule",
  "@69", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "@70", "@71", "@72", "opt_column",
  "opt_ignore", "opt_restrict", "opt_place", "opt_to", "slave", "@73",
  "@74", "start", "start_transaction_opts", "slave_thread_opts", "@75",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "restore", "@76", "backup", "@77", "checksum", "@78",
  "opt_checksum_type", "repair", "@79", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "analyze", "@80",
  "binlog_base64_event", "check", "@81", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "@82",
  "opt_no_write_to_binlog", "rename", "@83", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "keycache_list",
  "assign_to_keycache", "key_cache_name", "preload", "@84", "preload_list",
  "preload_keys", "cache_keys_spec", "@85", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "select_paren",
  "select_init2", "@86", "select_part2", "@87", "@88", "select_into",
  "select_from", "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_item2", "select_alias", "optional_braces",
  "expr", "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@89", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "@90", "@91", "@92", "variable",
  "@93", "variable_aux", "opt_distinct", "opt_gconcat_separator",
  "opt_gorder_clause", "in_sum_expr", "@94", "cast_type", "opt_expr_list",
  "expr_list", "ident_list_arg", "ident_list", "opt_expr", "opt_else",
  "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "@95", "@96", "@97", "@98", "@99",
  "@100", "@101", "normal_join", "table_factor", "@102", "select_derived",
  "@103", "select_derived2", "@104", "@105", "get_select_lex",
  "select_derived_init", "opt_outer", "index_hint_clause",
  "index_hint_type", "index_hint_definition", "@106", "@107",
  "index_hints_list", "opt_index_hints_list", "@108", "opt_key_definition",
  "@109", "opt_key_usage_list", "key_usage_element", "key_usage_list",
  "using_list", "interval", "interval_time_stamp", "interval_time_st",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "@110", "having_clause", "@111", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "@112", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "choice", "procedure_clause", "@113", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "@114",
  "select_var_list", "select_var_ident", "into", "@115",
  "into_destination", "@116", "do", "@117", "drop", "@118", "table_list",
  "table_name", "table_alias_ref_list", "table_alias_ref", "if_exists",
  "opt_temporary", "insert", "@119", "@120", "replace", "@121", "@122",
  "insert_lock_option", "replace_lock_option", "insert2", "insert_table",
  "insert_field_spec", "@123", "fields", "insert_values", "@124", "@125",
  "values_list", "ident_eq_list", "ident_eq_value", "equal", "opt_equal",
  "no_braces", "@126", "opt_values", "values", "expr_or_default",
  "opt_insert_update", "@127", "update", "@128", "@129", "update_list",
  "update_elem", "insert_update_list", "insert_update_elem",
  "opt_low_priority", "delete", "@130", "single_multi", "@131", "@132",
  "@133", "table_wild_list", "table_wild_one", "opt_wild",
  "opt_delete_options", "opt_delete_option", "truncate", "opt_table_sym",
  "opt_profile_defs", "profile_defs", "profile_def", "opt_profile_args",
  "show", "@134", "show_param", "@135", "show_engine_param",
  "master_or_binary", "opt_storage", "opt_db", "opt_full", "from_or_in",
  "binlog_in", "binlog_from", "wild_and_where", "describe", "@136", "@137",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "@138", "flush_options", "flush_option", "@139",
  "opt_table_list", "reset", "@140", "reset_options", "reset_option",
  "purge", "@141", "purge_options", "purge_option", "kill", "kill_option",
  "use", "load", "@142", "load_data", "@143", "@144", "@145", "@146",
  "opt_local", "load_data_lock", "opt_duplicate", "opt_field_term",
  "field_term_list", "field_term", "opt_line_term", "line_term_list",
  "line_term", "opt_ignore_lines", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user", "keyword", "keyword_sp", "set", "@147",
  "opt_option", "option_value_list", "option_type_value", "@148",
  "option_type", "option_type2", "opt_var_type", "opt_var_ident_type",
  "ext_option_value", "sys_option_value", "option_value",
  "internal_variable_name", "isolation_types", "text_or_password",
  "set_expr_or_default", "lock", "@149", "table_or_tables",
  "table_lock_list", "table_lock", "lock_option", "unlock", "@150",
  "handler", "@151", "handler_read_or_scan", "handler_scan_function",
  "handler_rkey_function", "@152", "handler_rkey_mode", "revoke",
  "revoke_command", "grant", "grant_command", "opt_table",
  "grant_privileges", "opt_privileges", "object_privilege_list",
  "object_privilege", "@153", "@154", "@155", "@156", "opt_and",
  "require_list", "require_list_element", "grant_ident", "user_list",
  "grant_list", "grant_user", "opt_column_list", "column_list",
  "column_list_id", "require_clause", "grant_options", "grant_option_list",
  "grant_option", "begin", "@157", "opt_work", "opt_chain", "opt_release",
  "opt_savepoint", "commit", "rollback", "savepoint", "release",
  "union_clause", "union_list", "@158", "union_opt",
  "union_order_or_limit", "@159", "order_or_limit", "union_option",
  "take_first_select", "subselect", "subselect_start", "subselect_end",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "@160",
  "view_list_opt", "view_list", "view_select", "@161", "view_select_aux",
  "view_check_option", "trigger_tail", "@162", "@163", "@164", "udf_tail",
  "sf_tail", "@165", "@166", "@167", "@168", "@169", "sp_tail", "@170",
  "@171", "@172", "@173", "xa", "xid", "begin_or_start",
  "opt_join_or_resume", "opt_one_phase", "opt_suspend", "@174",
  "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   124,    38,    45,    43,    42,    47,    37,    94,
     126,    40,    41,    44,    33,   123,   125,    59,    64,    46,
      58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   591,   592,   593,   592,   592,   594,   594,   595,   595,
     596,   596,   596,   596,   596,   596,   596,   596,   596,   596,
     596,   596,   596,   596,   596,   596,   596,   596,   596,   596,
     596,   596,   596,   596,   596,   596,   596,   596,   596,   596,
     596,   596,   596,   596,   596,   596,   596,   596,   596,   596,
     596,   596,   596,   596,   596,   596,   596,   596,   596,   596,
     596,   597,   598,   598,   599,   600,   600,   602,   601,   603,
     603,   604,   604,   605,   607,   606,   609,   608,   610,   610,
     611,   611,   611,   611,   611,   611,   611,   611,   611,   611,
     611,   611,   611,   612,   612,   612,   612,   614,   613,   615,
     613,   616,   613,   617,   613,   613,   613,   613,   613,   618,
     619,   619,   620,   620,   620,   620,   620,   620,   620,   622,
     621,   624,   623,   623,   625,   625,   625,   625,   626,   626,
     627,   627,   628,   628,   629,   629,   630,   630,   632,   631,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   634,   635,   635,   636,   636,   637,   637,
     638,   638,   638,   638,   638,   638,   638,   639,   639,   639,
     640,   640,   642,   641,   643,   643,   644,   644,   645,   645,
     646,   646,   647,   647,   648,   649,   650,   650,   651,   651,
     652,   653,   653,   653,   653,   654,   654,   655,   655,   656,
     656,   658,   657,   657,   659,   657,   657,   661,   660,   662,
     662,   663,   663,   664,   665,   665,   666,   666,   667,   667,
     667,   667,   667,   668,   668,   669,   669,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     672,   671,   674,   673,   676,   675,   678,   677,   679,   680,
     681,   683,   682,   684,   685,   685,   685,   686,   686,   688,
     689,   690,   687,   691,   691,   691,   692,   692,   694,   695,
     693,   697,   696,   698,   698,   699,   699,   701,   702,   700,
     704,   705,   703,   706,   706,   708,   707,   709,   709,   711,
     710,   713,   712,   715,   714,   716,   717,   718,   716,   719,
     716,   720,   720,   721,   721,   721,   722,   723,   724,   725,
     725,   726,   726,   727,   728,   729,   729,   731,   730,   732,
     732,   732,   733,   733,   733,   734,   735,   735,   735,   736,
     736,   736,   736,   736,   736,   736,   736,   737,   738,   738,
     738,   739,   739,   739,   739,   739,   740,   741,   741,   741,
     742,   742,   742,   742,   742,   742,   742,   743,   744,   744,
     744,   745,   745,   745,   746,   747,   748,   749,   750,   751,
     751,   751,   752,   753,   754,   755,   756,   757,   758,   759,
     760,   761,   761,   762,   762,   763,   763,   764,   764,   764,
     764,   765,   766,   765,   767,   768,   767,   769,   767,   770,
     770,   772,   771,   774,   773,   775,   776,   777,   776,   778,
     776,   779,   776,   780,   780,   781,   781,   782,   782,   783,
     784,   785,   786,   786,   787,   788,   787,   789,   787,   790,
     790,   791,   792,   793,   793,   794,   794,   795,   795,   797,
     796,   798,   799,   799,   799,   800,   800,   801,   801,   802,
     803,   803,   804,   805,   806,   806,   807,   807,   809,   808,
     810,   811,   811,   812,   812,   813,   813,   813,   813,   813,
     813,   813,   813,   815,   816,   814,   817,   817,   818,   818,
     819,   819,   820,   820,   821,   821,   822,   822,   823,   824,
     824,   825,   825,   826,   826,   827,   827,   827,   828,   828,
     828,   828,   828,   828,   828,   828,   828,   828,   828,   828,
     828,   828,   828,   828,   828,   828,   828,   828,   828,   828,
     828,   828,   828,   828,   828,   829,   830,   831,   832,   833,
     833,   833,   833,   833,   833,   833,   834,   834,   834,   835,
     835,   836,   836,   836,   836,   837,   837,   838,   838,   839,
     839,   840,   840,   840,   840,   840,   841,   841,   842,   843,
     843,   844,   846,   845,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   848,
     847,   849,   847,   847,   847,   850,   850,   850,   850,   850,
     850,   850,   850,   851,   852,   852,   853,   853,   854,   854,
     854,   854,   854,   855,   855,   855,   855,   855,   856,   856,
     856,   857,   857,   857,   858,   859,   859,   860,   860,   861,
     861,   861,   862,   862,   862,   862,   863,   863,   864,   864,
     865,   865,   866,   866,   867,   867,   867,   867,   867,   867,
     867,   867,   867,   867,   867,   868,   868,   869,   869,   870,
     870,   871,   871,   872,   872,   873,   873,   874,   874,   875,
     876,   876,   877,   877,   878,   878,   879,   879,   879,   879,
     879,   879,   880,   880,   881,   881,   881,   881,   882,   882,
     884,   883,   885,   885,   886,   886,   887,   887,   888,   888,
     889,   889,   889,   889,   889,   890,   890,   890,   890,   890,
     891,   891,   891,   892,   892,   893,   893,   894,   894,   895,
     895,   895,   896,   896,   896,   896,   897,   898,   898,   899,
     899,   900,   900,   901,   901,   902,   902,   902,   903,   903,
     903,   904,   904,   905,   905,   906,   906,   907,   907,   908,
     908,   910,   909,   911,   909,   909,   912,   909,   913,   909,
     914,   909,   915,   909,   916,   909,   909,   909,   909,   909,
     909,   917,   917,   917,   917,   918,   918,   919,   919,   920,
     920,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   922,   921,   921,   923,   921,   924,   921,   921,   921,
     925,   926,   926,   928,   927,   929,   929,   929,   931,   930,
     932,   933,   932,   934,   934,   935,   936,   936,   937,   938,
     938,   938,   939,   938,   940,   941,   938,   938,   938,   938,
     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,
     942,   942,   943,   943,   944,   944,   944,   945,   945,   945,
     946,   946,   946,   946,   948,   947,   947,   949,   947,   947,
     950,   951,   951,   953,   952,   954,   954,   955,   955,   955,
     956,   956,   957,   957,   959,   958,   961,   960,   963,   962,
     964,   964,   964,   966,   965,   967,   967,   968,   968,   969,
     969,   969,   971,   970,   972,   974,   973,   975,   975,   976,
     976,   977,   977,   977,   977,   977,   977,   979,   978,   980,
     980,   980,   982,   981,   981,   983,   983,   984,   984,   985,
     986,   987,   987,   988,   989,   989,   991,   990,   992,   992,
     993,   995,   994,   996,   996,   997,   997,   998,   999,   999,
    1000,  1000,  1002,  1001,  1004,  1005,  1003,  1006,  1006,  1006,
    1006,  1006,  1007,  1007,  1008,  1008,  1009,  1009,  1010,  1010,
    1010,  1010,  1010,  1010,  1010,  1010,  1010,  1010,  1011,  1011,
    1011,  1012,  1012,  1012,  1013,  1014,  1015,  1016,  1016,  1017,
    1017,  1017,  1017,  1017,  1018,  1018,  1019,  1019,  1019,  1019,
    1019,  1019,  1019,  1019,  1019,  1019,  1019,  1020,  1020,  1020,
    1020,  1020,  1020,  1021,  1021,  1021,  1021,  1021,  1021,  1021,
    1021,  1021,  1021,  1021,  1021,  1021,  1021,  1022,  1022,  1022,
    1022,  1022,  1022,  1022,  1022,  1022,  1022,  1022,  1022,  1022,
    1022,  1022,  1023,  1023,  1024,  1024,  1025,  1025,  1026,  1026,
    1027,  1027,  1027,  1027,  1027,  1027,  1028,  1028,  1029,  1029,
    1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,
    1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,
    1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,
    1032,  1032,  1032,  1032,  1032,  1032,  1032,  1033,  1033,  1033,
    1033,  1033,  1033,  1033,  1033,  1035,  1034,  1034,  1036,  1036,
    1037,  1037,  1038,  1038,  1039,  1039,  1040,  1040,  1041,  1042,
    1042,  1042,  1042,  1042,  1042,  1042,  1043,  1044,  1042,  1042,
    1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,  1042,  1045,
    1042,  1047,  1046,  1048,  1048,  1048,  1049,  1049,  1050,  1050,
    1051,  1051,  1053,  1052,  1054,  1054,  1054,  1054,  1054,  1054,
    1054,  1054,  1054,  1054,  1054,  1055,  1055,  1056,  1056,  1057,
    1057,  1058,  1058,  1059,  1059,  1060,  1060,  1061,  1061,  1062,
    1062,  1063,  1064,  1064,  1065,  1065,  1066,  1066,  1067,  1066,
    1068,  1066,  1069,  1066,  1066,  1070,  1066,  1071,  1066,  1066,
    1072,  1066,  1073,  1066,  1066,  1074,  1074,  1074,  1076,  1075,
    1075,  1075,  1078,  1077,  1080,  1081,  1079,  1082,  1083,  1084,
    1084,  1085,  1085,  1085,  1085,  1086,  1086,  1088,  1087,  1089,
    1087,  1090,  1090,  1091,  1092,  1091,  1094,  1093,  1095,  1095,
    1096,  1096,  1097,  1097,  1098,  1098,  1099,  1099,  1099,  1099,
    1099,  1099,  1099,  1099,  1099,  1099,  1099,  1099,  1100,  1100,
    1101,  1101,  1101,  1101,  1101,  1101,  1101,  1101,  1101,  1102,
    1102,  1102,  1102,  1103,  1103,  1103,  1104,  1104,  1105,  1105,
    1106,  1107,  1106,  1108,  1109,  1108,  1110,  1110,  1111,  1111,
    1112,  1112,  1113,  1113,  1113,  1114,  1115,  1115,  1116,  1117,
    1117,  1119,  1118,  1120,  1120,  1121,  1121,  1121,  1122,  1122,
    1123,  1123,  1124,  1125,  1125,  1125,  1126,  1126,  1126,  1126,
    1127,  1127,  1128,  1128,  1128,  1128,  1128,  1128,  1129,  1129,
    1129,  1129,  1129,  1130,  1130,  1130,  1130,  1130,  1131,  1131,
    1131,  1131,  1132,  1133,  1133,  1134,  1134,  1135,  1136,  1135,
    1137,  1137,  1138,  1138,  1139,  1141,  1140,  1142,  1142,  1143,
    1143,  1145,  1144,  1147,  1146,  1146,  1146,  1149,  1148,  1150,
    1151,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,
    1150,  1150,  1150,  1152,  1152,  1153,  1154,  1154,  1155,  1156,
    1156,  1157,  1157,  1159,  1160,  1158,  1162,  1163,  1161,  1164,
    1164,  1164,  1164,  1165,  1165,  1166,  1166,  1167,  1168,  1168,
    1168,  1169,  1168,  1170,  1170,  1171,  1171,  1172,  1171,  1173,
    1171,  1174,  1174,  1175,  1175,  1176,  1177,  1177,  1178,  1178,
    1180,  1179,  1181,  1181,  1182,  1182,  1183,  1183,  1184,  1185,
    1184,  1187,  1188,  1186,  1189,  1189,  1190,  1191,  1191,  1192,
    1193,  1193,  1195,  1194,  1197,  1196,  1198,  1196,  1199,  1196,
    1200,  1200,  1201,  1201,  1202,  1202,  1203,  1203,  1204,  1204,
    1204,  1205,  1206,  1206,  1207,  1207,  1208,  1208,  1209,  1209,
    1209,  1209,  1209,  1209,  1209,  1209,  1209,  1210,  1210,  1212,
    1211,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,
    1213,  1213,  1213,  1213,  1213,  1214,  1213,  1213,  1213,  1213,
    1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,
    1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,
    1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,
    1213,  1213,  1215,  1215,  1215,  1216,  1216,  1217,  1217,  1218,
    1218,  1219,  1219,  1220,  1220,  1221,  1221,  1222,  1222,  1223,
    1223,  1223,  1225,  1224,  1226,  1224,  1227,  1227,  1228,  1228,
    1228,  1229,  1229,  1229,  1231,  1230,  1232,  1232,  1234,  1233,
    1233,  1233,  1233,  1233,  1233,  1233,  1233,  1233,  1233,  1233,
    1235,  1235,  1237,  1236,  1238,  1238,  1239,  1239,  1239,  1241,
    1240,  1242,  1243,  1243,  1244,  1245,  1245,  1245,  1246,  1248,
    1247,  1247,  1250,  1251,  1252,  1253,  1249,  1249,  1254,  1254,
    1255,  1255,  1255,  1256,  1256,  1256,  1257,  1257,  1258,  1258,
    1259,  1259,  1259,  1259,  1260,  1260,  1261,  1261,  1262,  1262,
    1263,  1263,  1264,  1264,  1264,  1265,  1265,  1266,  1266,  1267,
    1267,  1268,  1268,  1268,  1268,  1269,  1269,  1269,  1270,  1271,
    1271,  1271,  1272,  1272,  1272,  1272,  1272,  1272,  1272,  1272,
    1272,  1272,  1272,  1272,  1273,  1273,  1273,  1273,  1273,  1274,
    1274,  1275,  1275,  1276,  1277,  1277,  1278,  1278,  1279,  1279,
    1279,  1280,  1280,  1280,  1280,  1281,  1281,  1281,  1282,  1283,
    1283,  1284,  1285,  1286,  1287,  1287,  1288,  1288,  1289,  1289,
    1289,  1290,  1290,  1290,  1291,  1291,  1291,  1291,  1291,  1291,
    1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,
    1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,
    1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,
    1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,
    1291,  1291,  1291,  1291,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1294,  1293,  1295,  1295,
    1296,  1296,  1298,  1297,  1299,  1299,  1299,  1299,  1300,  1300,
    1301,  1301,  1301,  1301,  1302,  1302,  1302,  1302,  1303,  1303,
    1304,  1304,  1305,  1305,  1305,  1305,  1305,  1305,  1305,  1306,
    1306,  1306,  1307,  1307,  1307,  1307,  1308,  1308,  1308,  1309,
    1309,  1309,  1309,  1309,  1311,  1310,  1312,  1312,  1313,  1313,
    1314,  1315,  1315,  1315,  1315,  1317,  1316,  1318,  1318,  1319,
    1318,  1320,  1320,  1321,  1321,  1322,  1322,  1322,  1322,  1323,
    1322,  1324,  1324,  1324,  1324,  1324,  1325,  1326,  1326,  1326,
    1326,  1327,  1328,  1328,  1328,  1329,  1329,  1330,  1330,  1331,
    1331,  1332,  1332,  1334,  1333,  1335,  1333,  1336,  1333,  1337,
    1333,  1333,  1333,  1333,  1333,  1333,  1333,  1333,  1333,  1333,
    1333,  1333,  1333,  1333,  1333,  1333,  1333,  1333,  1333,  1333,
    1333,  1333,  1333,  1333,  1333,  1333,  1338,  1338,  1339,  1339,
    1340,  1340,  1340,  1341,  1341,  1341,  1341,  1342,  1342,  1343,
    1343,  1344,  1344,  1344,  1345,  1345,  1346,  1346,  1347,  1348,
    1348,  1348,  1348,  1348,  1349,  1349,  1350,  1350,  1351,  1351,
    1351,  1351,  1351,  1353,  1352,  1354,  1354,  1355,  1355,  1355,
    1356,  1356,  1356,  1357,  1357,  1358,  1359,  1359,  1360,  1361,
    1362,  1362,  1364,  1363,  1365,  1365,  1365,  1367,  1366,  1368,
    1368,  1369,  1369,  1369,  1370,  1371,  1371,  1372,  1373,  1374,
    1374,  1374,  1375,  1375,  1375,  1375,  1375,  1376,  1376,  1376,
    1376,  1376,  1376,  1377,  1377,  1378,  1379,  1380,  1380,  1380,
    1381,  1382,  1382,  1382,  1383,  1383,  1383,  1385,  1384,  1386,
    1386,  1387,  1387,  1389,  1388,  1390,  1390,  1391,  1391,  1391,
    1391,  1393,  1394,  1395,  1392,  1396,  1396,  1398,  1399,  1400,
    1401,  1402,  1397,  1404,  1405,  1406,  1407,  1403,  1408,  1408,
    1408,  1408,  1408,  1408,  1409,  1409,  1409,  1410,  1410,  1411,
    1411,  1411,  1412,  1412,  1413,  1414,  1413,  1415,  1415,  1416,
    1417
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     4,     1,     2,     0,     4,     0,
       2,     3,     1,     2,     0,     3,     0,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     0,     7,     0,
      12,     0,     6,     0,     3,     4,     4,     3,     2,    10,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     0,
      12,     0,     6,     2,     0,     1,     3,     1,     0,     2,
       0,     2,     0,     1,     3,     4,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     5,     0,     2,     1,
       1,     1,     3,     1,     1,     3,     0,     1,     1,     1,
       1,     2,     1,     1,     3,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     5,     0,     2,     0,     3,     0,     2,     2,     2,
       2,     0,     6,     2,     0,     2,     1,     1,     3,     0,
       0,     0,     7,     0,     2,     2,     1,     1,     0,     0,
       8,     0,     6,     1,     2,     1,     2,     0,     0,     6,
       0,     0,     6,     0,     2,     0,     5,     0,     1,     0,
       5,     0,     2,     0,     5,     4,     0,     0,     8,     0,
       7,     1,     1,     1,     1,     1,     2,     4,     5,     0,
       4,     4,     4,     3,     3,     2,     2,     0,     2,     1,
       2,     3,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       4,     0,     1,     1,     1,     1,     1,     2,     3,     2,
       4,     5,     0,     5,     0,     0,     5,     0,     7,     0,
       1,     0,     3,     0,     3,     5,     5,     0,     4,     0,
       3,     0,     3,     0,     1,     0,     1,     1,     3,     1,
       5,     5,     0,     2,     0,     0,     7,     0,     9,     1,
       3,     1,     1,     0,     2,     0,     3,     1,     3,     0,
       6,     1,     0,     4,     5,     1,     1,     1,     3,     3,
       1,     3,     1,     1,     0,     3,     1,     3,     0,     4,
       1,     0,     1,     2,     1,     3,     4,     3,     3,     3,
       4,     4,     3,     0,     0,     6,     0,     1,     0,     1,
       1,     2,     1,     1,     0,     1,     1,     2,     1,     0,
       3,     0,     1,     1,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     5,     1,     1,     3,     4,     4,     2,
       2,     2,     3,     3,     3,     4,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     1,     1,     1,     3,     1,     1,     2,
       2,     7,     8,     8,     2,     2,     0,     1,     2,     0,
       1,     2,     0,     4,     3,     3,     3,     1,     2,     1,
       1,     3,     2,     3,     2,     2,     1,     3,     3,     2,
       3,     1,     1,     2,     1,     1,     2,     1,     1,     1,
       2,     3,     2,     3,     2,     2,     3,     3,     3,     0,
       6,     0,     6,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     2,     1,
       2,     3,     2,     1,     1,     1,     1,     1,     1,     1,
       2,     0,     1,     1,     5,     0,     1,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     0,     1,     0,     1,
       0,     1,     2,     1,     1,     2,     2,     4,     1,     3,
       2,     1,     2,     2,     2,     2,     1,     2,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     0,     1,     0,     2,     1,     2,
       3,     2,     0,     1,     0,     1,     1,     2,     0,     1,
       0,     4,     1,     4,     3,     1,     0,     1,     2,     1,
       3,     3,     2,     2,     2,     1,     1,     2,     2,     2,
       1,     2,     2,     2,     2,     1,     1,     0,     1,     1,
       1,     1,     0,     1,     1,     1,     0,     1,     2,     0,
       1,     1,     2,     2,     2,     1,     3,     3,     1,     1,
       1,     4,     2,     1,     4,     0,     1,     0,     2,     1,
       3,     0,     6,     0,     5,     7,     0,     5,     0,     5,
       0,     5,     0,     4,     0,    10,     3,     4,     3,     3,
       7,     0,     3,     1,     4,     0,     3,     0,     2,     0,
       1,     0,     2,     2,     2,     2,     1,     1,     1,     3,
       4,     0,     6,     4,     0,     5,     0,     6,     4,     1,
       2,     1,     1,     0,     5,     0,     3,     2,     0,     5,
       0,     0,     6,     1,     3,     1,     1,     3,     2,     3,
       2,     4,     0,     6,     0,     0,     8,     4,     4,     3,
       3,     2,     2,     6,     5,     3,     5,     1,     1,     1,
       0,     1,     0,     1,     0,     1,     1,     0,     2,     1,
       0,     1,     1,     1,     0,     5,     3,     0,     5,     3,
       3,     0,     3,     0,     2,     1,     3,     0,     1,     1,
       0,     2,     1,     3,     0,     6,     0,     6,     0,     5,
       0,     1,     1,     0,     6,     0,     1,     1,     2,     1,
       1,     1,     0,     5,     2,     0,     5,     0,     1,     1,
       2,     1,     1,     1,     1,     1,     2,     0,     5,     0,
       1,     1,     0,     4,     4,     3,     5,     1,     3,     3,
       5,     1,     3,     2,     1,     1,     0,     6,     1,     3,
       3,     0,     2,     0,     4,     0,     2,     1,     2,     4,
       2,     3,     0,     3,     0,     0,     6,     2,     1,     1,
       2,     2,     8,     4,     0,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     2,
       4,     3,     1,     1,     4,     0,     0,     1,     1,     0,
       2,     2,     1,     1,     0,     2,     3,     3,     3,     2,
       3,     4,     3,     4,     3,     4,     1,     3,     4,     3,
       3,     6,     1,     5,     6,     5,     7,     6,     8,     5,
       6,     4,     4,     5,     3,     4,     1,     3,     3,     3,
       3,     3,     3,     5,     5,     3,     3,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     3,     2,
       2,     2,     2,     3,     3,     5,     6,     4,     4,     7,
       2,     6,     5,     6,     6,     4,     4,     5,     4,     6,
       2,     4,     4,     4,    10,     6,     8,     6,     4,     4,
       6,     4,     4,     4,     6,     4,     7,     7,     7,     6,
       6,     6,     6,     3,     4,     6,     8,     2,     2,     4,
       8,     8,     6,     6,     2,     4,     6,     6,     8,     8,
       6,     8,     6,     2,     4,     8,     8,     2,     2,     2,
       4,     4,     4,     4,     3,     8,     4,     6,     4,     4,
       4,     6,     8,     6,     4,     6,     1,     6,     4,     4,
       4,     4,     4,     6,     4,     0,     5,     6,     2,     3,
       0,     4,     0,     3,     0,     1,     1,     3,     4,     4,
       5,     4,     4,     4,     5,     4,     0,     0,     7,     4,
       5,     4,     5,     4,     4,     4,     4,     4,     5,     0,
       8,     0,     3,     3,     1,     4,     0,     1,     0,     2,
       0,     1,     0,     3,     2,     3,     2,     1,     2,     1,
       2,     1,     1,     1,     2,     0,     1,     1,     3,     1,
       3,     1,     3,     0,     1,     0,     2,     4,     5,     1,
       1,     1,     1,     4,     1,     3,     3,     3,     0,     6,
       0,     6,     0,     8,     4,     0,     8,     0,    10,     6,
       0,     8,     0,    10,     6,     1,     2,     2,     0,     4,
       3,     6,     0,     3,     0,     0,     5,     0,     1,     0,
       1,     0,     2,     3,     3,     1,     1,     0,     7,     0,
       7,     1,     2,     0,     0,     2,     0,     2,     0,     1,
       1,     1,     1,     3,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     0,     2,     0,     1,
       0,     0,     3,     0,     0,     3,     2,     0,     0,     4,
       4,     2,     0,     2,     2,     3,     3,     1,     2,     0,
       1,     0,     4,     4,     2,     0,     1,     1,     0,     1,
       0,     1,     2,     1,     3,     3,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     0,     6,
       0,     1,     3,     1,     3,     0,     2,     3,     1,     2,
       1,     0,     3,     0,     5,     2,     1,     0,     3,     6,
       0,     6,     4,     6,     4,     4,     4,     5,     4,     4,
       5,     6,     4,     1,     3,     1,     1,     3,     1,     0,
       2,     0,     1,     0,     0,     8,     0,     0,     6,     0,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     3,
       4,     0,     3,     3,     1,     2,     2,     0,     3,     0,
       5,     3,     1,     3,     1,     3,     1,     1,     0,     1,
       0,     4,     0,     1,     3,     1,     1,     1,     0,     0,
       6,     0,     0,    11,     3,     1,     3,     3,     1,     3,
       0,     1,     0,     4,     0,     6,     0,     5,     0,     6,
       1,     3,     3,     5,     0,     2,     0,     2,     1,     1,
       1,     3,     0,     1,     0,     1,     1,     3,     1,     1,
       2,     2,     2,     1,     1,     1,     1,     0,     3,     0,
       3,     2,     4,     4,     3,     4,     4,     2,     1,     3,
       3,     6,    16,     2,     2,     0,     6,     5,     2,     2,
       2,     1,     1,     1,     5,     5,     2,     2,     1,     4,
       3,     2,     2,     2,     3,     2,     2,     1,     3,     4,
       3,     3,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     0,     1,     0,
       2,     0,     1,     1,     1,     0,     2,     0,     2,     0,
       2,     2,     0,     4,     0,     4,     1,     1,     0,     1,
       1,     0,     1,     1,     0,     4,     3,     1,     0,     3,
       4,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     0,     3,     3,     1,     1,     1,     2,     0,
       3,     3,     2,     2,     3,     0,     1,     1,     2,     0,
       4,     5,     0,     0,     0,     0,    18,     2,     0,     1,
       0,     1,     1,     0,     1,     1,     0,     2,     2,     1,
       3,     4,     3,     3,     0,     2,     2,     1,     3,     3,
       0,     3,     0,     3,     2,     3,     1,     1,     2,     0,
       2,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     3,     5,     1,     1,     1,     1,     1,     3,     4,
       5,     1,     5,     3,     2,     1,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     4,     0,     1,
       1,     3,     0,     2,     1,     1,     1,     1,     0,     1,
       0,     1,     1,     1,     0,     2,     2,     2,     1,     2,
       4,     5,     4,     6,     2,     3,     3,     3,     5,     1,
       3,     3,     2,     2,     2,     1,     1,     4,     4,     1,
       1,     1,     1,     1,     0,     4,     1,     1,     1,     3,
       3,     1,     1,     2,     2,     0,     3,     4,     3,     0,
       7,     1,     2,     1,     1,     1,     1,     1,     1,     0,
       5,     1,     1,     1,     1,     1,     3,     6,     6,     6,
       7,     3,     8,     8,     8,     0,     1,     1,     2,     0,
       1,     1,     3,     0,     3,     0,     3,     0,     3,     0,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     3,     2,     2,     2,     2,
       2,     2,     2,     2,     1,     1,     0,     1,     3,     1,
       2,     2,     2,     1,     3,     3,     1,     1,     3,     1,
       3,     4,     5,     1,     0,     3,     3,     1,     1,     0,
       2,     2,     2,     2,     0,     2,     2,     1,     2,     2,
       2,     2,     2,     0,     3,     0,     1,     0,     3,     2,
       0,     1,     2,     0,     1,     4,     4,     5,     2,     3,
       0,     1,     0,     4,     0,     1,     1,     0,     2,     2,
       1,     0,     1,     1,     0,     5,     6,     0,     0,     2,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     1,     2,     1,
       2,     3,     3,     3,     0,     3,     3,     0,     7,     0,
       3,     1,     3,     0,     3,     2,     4,     0,     3,     4,
       4,     0,     0,     0,    16,     8,     7,     0,     0,     0,
       0,     0,    15,     0,     0,     0,     0,    12,     4,     4,
       3,     4,     3,     2,     1,     3,     5,     1,     1,     0,
       1,     1,     0,     2,     0,     0,     3,     0,     2,     5,
       3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2305,   919,     0,  2253,     0,     0,     0,     0,     0,
       0,  2255,   103,    62,  1512,  1626,  1627,  1427,  1451,     2,
       0,   919,   153,     0,    74,  1453,     0,  1665,     0,     0,
     919,   403,     0,  1659,     0,     0,   919,  1456,  1652,     0,
     153,  2255,     0,   954,  2088,  1549,     0,     0,     0,  1532,
       0,  2145,  1501,     0,     0,     0,     0,     3,     8,    20,
       0,    39,    25,    29,    15,    19,    14,    37,    10,    53,
      54,    46,    12,    17,    43,    11,    13,    16,    35,    42,
      36,    38,    50,   947,    23,    24,    30,    44,    58,    21,
      55,    52,    22,  1628,    26,    45,    40,    32,    59,    33,
      51,    34,    57,    28,    47,    27,     9,    18,    48,    49,
      41,    60,    31,    56,     0,   789,     0,     0,   853,     0,
       0,     0,     0,     0,   772,  2303,  2304,  2305,   921,   920,
       0,  2137,  2136,   886,  2255,  1761,   904,     0,  1824,  1825,
    1826,  1827,  1828,  1829,  1830,  1775,  1831,  1832,  1834,  1833,
    1835,  1836,  1776,  1777,  1837,  1838,  1839,  1841,  1840,  1842,
    1778,  1779,  1843,  1844,  1845,  1780,  1781,  1846,  1847,  1782,
    1848,  1849,  1850,  1851,  1783,  1852,  1784,  1853,  1854,  1855,
    1856,  1857,  1858,  1785,  1859,  1860,  1861,  1862,  1864,  1863,
    1865,  1866,  1867,  1786,  1868,  1869,  1870,  1871,  1872,  1873,
    1874,  1787,  1875,  1876,  1877,  1893,  1788,  1878,  1881,  1880,
    1879,  1882,  1883,  1885,  1884,  1886,  1789,  1887,  1888,  1889,
    1891,  1890,  1895,  1896,  1897,  1790,  1892,  1898,  1894,  2068,
    1900,  1899,  1901,  1903,  1902,  1791,  1904,  1792,  1793,  1905,
    1906,  1759,  1907,  1760,  1909,  1910,  1911,  1916,  1917,  1794,
    1908,  1912,  1913,  1914,  1915,  1918,  1795,  1919,  1920,  1921,
    1922,  1923,  1924,  1925,  1926,  1927,  1928,  1938,  1931,  1933,
    1934,  1936,  1932,  1937,  1941,  1940,  1942,  1943,  1944,  1939,
    1930,  1935,  1945,  1946,  1929,  1947,  1948,  1949,  1950,  1951,
    1952,  1953,  1954,  1955,  1956,  1957,  1959,  1958,  1960,  1961,
    1962,  1963,  1964,  1966,  1965,  1967,  1968,  1969,  1971,  1970,
    1973,  1974,  1796,  1972,  1975,  1976,  1977,  1978,  1979,  1797,
    1798,  1799,  1980,  1981,  1982,  1800,  1983,  1984,  1985,  1801,
    1986,  1987,  1989,  1988,  1990,  1991,  1802,  1803,  1992,  1993,
    1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,
    2004,  2006,  2005,  2007,  2008,  2009,  2010,  2011,  1804,  2012,
    1805,  2013,  2014,  1806,  2015,  1807,  2016,  2017,  1808,  2018,
    2019,  2020,  2021,  2022,  2023,  1809,  2024,  2025,  1810,  2027,
    2026,  2028,  1811,  2030,  2031,  1812,  2029,  1814,  2032,  1813,
    1815,  2033,  2034,  2036,  2035,  2037,  2038,  2039,  1816,  2040,
    1817,  2041,  2042,  2043,  2044,  2046,  2045,  2047,  2048,  2049,
    2050,  2051,  2053,  2052,  2054,  2055,  2056,  2057,  2061,  2062,
    2063,  2064,  2058,  2059,  2060,  1818,  2065,  2066,  2067,  2069,
    2070,  2072,  2071,  1819,  1820,  2073,  2074,  1823,  2075,  2076,
    2079,  2077,  2078,  2081,  2080,  2082,  2083,  1821,  2084,  1822,
    2085,   172,  1764,   155,  1765,  1774,     0,   888,   905,  2256,
    2257,   489,   734,     0,     0,   735,     0,   488,   733,   153,
    2305,   108,     0,   485,   486,     0,  1526,     0,  1449,  1449,
    1449,     0,     0,  1449,  1449,     0,  1452,  1449,   153,  1449,
       0,    67,  1634,     0,     0,     0,     0,  1758,     0,  1459,
       0,  1666,  1667,     0,  1669,     0,     0,  2134,     0,     0,
       0,     0,     0,   153,   922,     0,  1510,     0,   884,     0,
    2257,  2268,   948,   952,   964,  2089,  2086,  1611,   873,   873,
     873,   871,   873,  1533,     0,     0,     0,  1510,  1668,  2357,
       0,     0,     0,  2353,     0,  2358,     0,   954,     0,     0,
       1,     5,     0,     0,  1888,  1985,  1624,  1622,  1755,     0,
     763,   790,     0,   768,     0,   766,  1770,  1769,  1768,     0,
     779,   778,   776,     0,   367,     0,     0,  2314,   770,   902,
       0,  2254,     0,   931,   941,   174,     0,    76,     0,     0,
       0,  2260,     0,     0,     0,     0,   107,     0,     0,     0,
     104,   985,   985,  2305,  2307,  2309,   489,   487,     0,  1530,
    1529,  1528,     0,  1526,  1825,  1775,  1836,     0,  1728,     0,
       0,     0,  1233,     0,  1780,     0,  1848,  1850,  1785,     0,
       0,   994,   994,   994,     0,     0,     0,  1866,  1867,  1737,
       0,     0,     0,  1725,  1738,  1900,  1901,     0,  1727,  1906,
       0,     0,     0,     0,  1923,  1735,     0,     0,  1954,  1956,
       0,     0,  1960,  1961,  1962,  1963,  1712,  1049,     0,   994,
    1724,  1734,  1977,  1718,  1986,  1990,  1991,     0,  1999,     0,
       0,     0,  2022,  2025,     0,     0,  2043,     0,     0,   994,
    1711,  2061,  2062,  2063,  2064,     0,  1726,  1818,  1736,     0,
    2075,   994,   994,   994,     0,     0,     0,  2082,  2085,     0,
       0,     0,     0,  1048,     0,  1201,     0,  1227,  1006,  1012,
    1026,     0,  1041,  1059,  1060,  1062,  1156,  1061,  1067,  1066,
    1428,  1722,  1065,  1064,  1723,  1058,  1745,  1764,  1744,     0,
       0,     0,     0,     0,     0,     0,     0,  1607,     0,     0,
       0,  1449,    69,     0,  2179,  2194,  2195,  2191,  2196,  2214,
    2197,  2201,     0,  2193,  2185,     0,  2200,  2189,  2198,     0,
    2183,     0,  2199,  2204,  2215,  2187,  2192,  2171,     0,  2177,
    2181,  1757,  1333,  2148,  2149,     0,    75,  1461,  1462,  1460,
     852,     0,  1664,  1680,     0,     0,     0,   917,   413,   404,
       0,  1606,  1605,     0,  1660,  2269,     0,     0,   893,  1464,
    1511,     0,  1463,  1657,     0,  1656,  1653,  1655,     0,  2179,
    2166,     0,  2263,  2260,  2270,   977,   970,   969,   972,   973,
     976,   974,   975,   971,   968,   985,   965,   967,  2092,  1571,
       0,   668,     0,  1619,     0,  1572,     0,     0,  1619,     0,
    1368,  1609,  1612,     0,  2101,  1587,   731,   730,     0,   729,
    2102,  1605,     0,     0,     0,  1558,  1573,     0,  1534,  1578,
    2103,     0,  1608,     0,  1368,  1619,     0,  1550,     0,     0,
       0,     0,   867,   877,   869,   864,     0,   870,   866,  1531,
    1445,  2370,  2146,   852,  1717,  1716,  1762,  2354,  1715,  2362,
    2364,  2350,  2352,  2359,   950,     0,  2274,     6,    61,     0,
    1631,  2312,  2313,  2311,   684,     0,   994,  1771,  2306,   156,
     777,     0,   368,   156,     0,     0,     0,     0,     0,   369,
     370,   306,   761,   774,     0,     0,   773,  2314,     0,     0,
    1443,     0,     0,   933,   943,   176,   173,   154,     0,   890,
     907,  2259,     0,     0,  2261,  2265,  1047,  1046,     0,   101,
     106,     0,     0,     0,  2233,   105,  2229,  2310,   985,   489,
     985,   985,  2302,     0,  2290,  2297,  2298,  2301,  2300,  2299,
    2296,     0,  2289,  2292,  2293,  2295,  2294,  2314,  2308,     0,
     736,     0,  1513,  1516,  1520,  1524,  1527,     0,     0,  1338,
    1080,  1338,  1338,  1338,  1234,     0,     0,     0,     0,     0,
       0,     0,     0,  1338,     0,  1117,  1090,     0,  1118,     0,
       0,     0,     0,     0,  1731,     0,     0,     0,     0,     0,
       0,  1206,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1229,  1231,  1744,  1338,     0,     0,  1338,     0,     0,
       0,     0,     0,   999,     0,  1124,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1338,  1338,     0,
       0,  1338,     0,  1133,     0,  1733,     0,     0,     0,  1732,
       0,     0,  1730,  1729,  1713,     0,  1137,  1139,  1138,     0,
    1338,  1338,     0,     0,  1070,  1069,  1071,  2287,     0,     0,
       0,     0,     0,     0,  1045,  1044,  1043,  1042,     0,     0,
       0,  1050,     0,  1051,  1052,     0,  1053,  1054,  1055,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1072,     0,
       0,     0,  1714,  1165,     0,  1450,  1432,  1438,  1434,     0,
    1607,  1435,  1442,   381,     0,  1439,  2227,  1436,   854,     0,
       0,    68,  1648,  1642,  1644,  1647,  1643,     0,  1649,  1646,
    1645,  2137,  1635,  1637,  1638,  2180,  2178,  2212,  2211,     0,
    2213,  2209,  2202,  2234,  2206,  2234,  2208,  2207,  2234,  2203,
    2210,  2234,  2175,     0,  1334,  1335,     0,  2147,     0,  1756,
       0,     0,  1681,     0,  1682,  1670,  1678,   936,     0,  1333,
    2135,  2138,     0,   414,   411,   409,   422,     0,     0,    64,
      65,     0,   924,     0,   923,   927,     0,     0,     0,  1467,
    1457,  1466,  1658,     0,     0,  2178,  2175,  2264,     0,  2266,
    2281,   953,  2271,   983,   955,   982,     0,   966,  2087,  2090,
    2098,  1615,   667,     0,     0,  1586,  1568,     0,   489,     0,
       0,     0,     0,     0,     0,  1551,     0,     0,   528,     0,
    1577,  1369,  1613,  1614,  1619,     0,     0,  1619,     0,  1581,
    1592,  1582,     0,  1609,     0,  1619,  1546,     0,     0,  1538,
    1543,  1539,     0,  1545,  1544,  1547,  1535,  1536,  1564,  1593,
    1609,  1569,  1576,  1585,     0,  1563,  1570,     0,  1557,  1583,
    1609,  1609,  1619,  1619,   880,   879,   878,   874,   875,   880,
       0,  1268,     0,     0,  2351,  2365,  2349,  2360,  2361,  2348,
     951,  2275,   949,  2276,     0,     7,     4,  1625,  1623,  1632,
    1633,   685,   684,   480,   483,   482,     0,     0,  1773,     0,
     769,     0,  1607,   767,     0,     0,  1607,   317,  1607,   371,
     684,   781,     0,     0,   771,   903,     0,     0,   935,   930,
     934,   932,   726,   725,     0,   942,     0,   177,   179,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    77,    78,    92,   892,   891,
     889,   915,   914,   912,     0,   913,   911,   906,   908,   909,
    2258,  2262,   490,   684,  1607,     0,   309,     0,     0,     0,
       0,     0,     0,     0,     0,  2291,    97,   737,     0,  1518,
    1446,  1514,     0,     0,     0,  1333,     0,     0,  1339,  1338,
       0,  1212,     0,     0,     0,     0,  1235,     0,     0,     0,
       0,     0,     0,     0,  1186,     0,  1212,   995,     0,  1144,
       0,     0,     0,     0,     0,  2287,     0,  1307,  1308,  1309,
    1310,  1320,  1311,  1312,  1313,  1322,  1327,  1314,  1315,  1323,
    1324,  1325,  1316,  1326,  1321,  1317,  1328,     0,  1306,     0,
    1331,  1329,  1332,  1330,     0,  1207,  1199,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1338,     0,
       0,     0,  1338,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1338,     0,     0,     0,  1319,
       0,  1318,     0,     0,     0,     0,     0,     0,     0,  1113,
       0,  1747,  1746,     0,     0,     0,     0,   954,     0,  1074,
       0,  1073,     0,  2104,  1202,  1204,     0,   997,   996,   998,
    1009,  1002,  1007,  1000,  1004,     0,  1056,  1830,  1010,     0,
       0,  1038,     0,  1347,  1039,  1024,  1029,  1030,     0,  1027,
    1028,     0,  1032,     0,  1031,  1035,  1036,  1037,  1040,     0,
       0,     0,     0,  1063,  1068,  1228,   985,  1748,     0,  1430,
     381,   384,   383,  1440,   382,  1488,     0,   856,   855,  1437,
     854,     0,    70,    72,  1641,     0,     0,  1650,  2205,     0,
    2186,  2190,  2184,  2188,     0,     0,  2176,     0,  2182,  1337,
    1896,  1970,     0,  1340,  2151,  1454,  2369,  1677,  1679,     0,
       0,  1671,     0,     0,   918,     0,     0,     0,   424,   407,
       0,    66,     0,     0,  1661,     0,     0,     0,     0,   895,
    1465,     0,  1654,     0,     0,     0,     0,     0,  2267,  2283,
    2282,  2272,   985,  1359,   986,   988,   987,  1744,  2092,  2095,
    2096,  2099,  2097,     0,  2094,  2093,  2108,     0,  1617,  1620,
    1621,     0,     0,  1601,  1595,  1594,  1590,  1596,  1591,  1604,
    1603,  1602,  1560,  1559,  1378,  1379,  1377,  1372,  1373,  1376,
    1554,  1610,  1600,  1598,  1588,     0,  1619,  1599,  1597,  1540,
    1541,  1542,     0,  1368,     0,  1619,  1609,     0,  1619,  1619,
    1580,  1584,     0,   868,   877,   865,   872,  1278,  1277,     0,
    1242,     0,  1244,  1241,  1240,  1239,     0,  1277,  2355,  2363,
    2367,     0,  1368,  2280,  2278,   481,  1488,  1488,     0,  1772,
       0,     0,     0,     0,     0,     0,     0,   157,   166,     0,
       0,   315,   316,  1488,   314,   357,   358,   361,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   110,   364,
    1488,  1488,   311,   337,   338,   341,   342,   343,   344,   345,
     307,     0,   312,   850,   850,     0,  1488,  1488,   850,  1488,
       0,     0,  1488,  1488,     0,     0,  1488,     0,     0,   850,
       0,  1488,   848,     0,     0,  1488,  1488,  1488,  1488,   850,
       0,     0,  1488,  1488,   401,  1488,     0,     0,   860,     0,
       0,  1488,     0,     0,  1488,  1488,  1488,  1488,   797,   847,
     493,   514,   515,   762,   796,   798,   809,   399,     0,   826,
     849,     0,   783,   785,  2315,  2316,  2317,   887,  1444,  1298,
     175,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   916,
     910,   102,   684,  1488,  1488,  1488,  1488,   313,   346,   347,
     350,   351,   352,   353,   356,   354,   355,     0,     0,  1607,
       0,  2230,     0,   119,  2343,     0,     0,   155,   491,     0,
       0,   738,     0,     0,     0,  1340,  1521,  1268,  1525,  1524,
    1522,     0,  1140,     0,  1179,     0,  1181,  1182,  1183,     0,
       0,     0,     0,     0,  1141,     0,  1088,  1142,  1143,     0,
       0,     0,     0,  1185,     0,  1119,     0,     0,  1091,  1092,
    1085,  1077,     0,  1158,     0,     0,  1093,     0,     0,     0,
       0,     0,  1159,  1230,     0,  1232,  1748,     0,  1191,  1146,
    1098,     0,  1189,     0,  1099,  1160,  1161,  1162,  1125,  1148,
    1149,     0,  1164,     0,  1150,     0,     0,     0,     0,  1101,
    1195,  1193,     0,     0,     0,     0,  1197,  1134,  1103,     0,
       0,     0,  1102,     0,     0,     0,     0,     0,     0,     0,
    1105,     0,  1086,  1194,  1196,  1154,     0,  1114,  2284,  2284,
       0,  1078,     0,     0,     0,     0,     0,  1749,  1003,  1008,
    1001,  1005,     0,     0,     0,     0,     0,  1022,  1021,     0,
       0,     0,     0,  1347,  1025,     0,     0,  1175,  1176,  1225,
       0,  1433,  1431,  1441,  1486,  1487,  1489,     0,  2228,  1429,
      73,     0,     0,  1636,  1651,  1639,  2238,     0,  2237,  2223,
    2226,  1755,     0,     0,     0,  2161,  2155,  2162,  2164,  2158,
    2163,  2165,  2156,  2157,  2152,  2159,  1341,  1370,     0,     0,
     937,   938,   941,     0,  2141,  2142,  2140,  2139,   985,   412,
     410,  1403,  1404,  1389,  1390,  1388,  1391,   423,  1392,  1402,
       0,   435,     0,   415,  1663,  1662,     0,   925,   928,   929,
     900,   899,   901,   894,   896,   897,   473,  1471,     0,     0,
       0,  1477,  1458,  1468,   885,     0,     0,     0,     0,     0,
     981,  1268,  1421,   978,   959,  1370,  1360,   958,   989,     0,
    2091,     0,  2058,  2119,     0,     0,     0,     0,     0,  2109,
    1616,     0,  1565,     0,  1589,     0,     0,     0,  1556,     0,
    1579,  1537,  1555,  1340,  1609,  1552,  1553,   882,   881,   876,
    1277,  1268,     0,     0,  1265,  1279,     0,  1279,  1268,  1268,
       0,  1268,  1333,  1274,     0,     0,  2366,  1361,  2279,     0,
       0,   765,   160,   163,   161,     0,   162,     0,     0,   366,
     365,     0,  1607,   359,   114,   113,   115,   116,  1386,  1387,
    1383,  1384,  1382,  1385,   118,   117,   112,   780,     0,     0,
       0,  1607,   339,   318,   319,   322,   323,   324,   851,   755,
     727,   919,   727,   830,     0,   556,   755,   720,   828,     0,
     919,     0,     0,     0,     0,     0,   919,     0,     0,     0,
    1488,     0,   841,   792,     0,     0,     0,     0,     0,   842,
       0,   793,  1488,     0,     0,     0,     0,     0,   919,     0,
       0,     0,     0,     0,   919,   810,   863,   862,   861,     0,
     919,   919,     0,   520,   521,   519,     0,     0,     0,     0,
     494,   684,   794,   400,   795,   559,     0,   857,   556,   562,
    1751,     0,     0,     0,   124,  2319,  1301,     0,  1302,  1299,
    1300,   178,    84,    80,    93,  1396,  1397,  1395,  1393,  1394,
      94,    82,    83,    87,    86,    88,    89,    90,    85,    91,
      81,    95,    96,    79,     0,     0,     0,     0,  1607,   348,
       0,     0,  1488,   308,   325,   326,   329,   330,   331,   332,
     333,   336,   334,   335,     0,  2231,     0,     0,     0,   302,
     301,     0,  2337,     0,     0,   559,    98,   399,   492,   495,
     748,   750,   749,   744,   743,    99,  1447,  1448,  1268,  1359,
    1340,     0,  1333,     0,     0,  1180,  1213,     0,  1236,     0,
    1082,   646,   646,  1223,  1221,   631,   646,  1217,  1222,  1219,
       0,   670,     0,   669,     0,     0,     0,  1187,  1184,     0,
       0,     0,     0,  1210,     0,     0,     0,  1087,     0,  1170,
    1192,  1190,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1198,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2288,  2288,  1075,  2105,
    2106,  2107,   757,  1203,     0,  1019,  1015,     0,  1013,  1346,
    1034,  1033,     0,     0,     0,  1023,   986,  1166,   985,     0,
    1226,  1750,   380,   527,    71,  1640,  2235,     0,     0,     0,
       0,     0,     0,     0,     0,  2150,  1371,  1498,  1763,  1672,
       0,   945,  2143,  2144,     0,   413,     0,   405,   408,     0,
     416,   417,   419,     0,   898,   964,     0,  1490,  1475,  1482,
    1476,     0,     0,     0,  1474,  1740,  1739,  1746,  2270,     0,
       0,     0,     0,  2273,  1340,  1340,  1415,     0,     0,   956,
     961,   957,   960,     0,   984,   993,   992,  1741,  1748,     0,
       0,     0,     0,   672,   671,   680,     0,     0,     0,  2104,
       0,   676,   678,   677,  2114,   675,  1618,  1368,  1575,  1574,
    1375,  1374,     0,  1548,  1567,  1619,     0,  2277,  1272,     0,
    1267,  1266,  1280,     0,  1268,  1279,  1279,     0,  1247,  1246,
    1502,  1505,     0,  1245,  1296,  1270,   964,  2356,  2368,     0,
     683,   682,   526,   679,   525,   165,   164,   170,   171,   386,
     372,   385,   360,   111,   373,   374,   340,     0,   320,   561,
     756,   728,   721,   813,   722,     0,     0,     0,   727,   555,
     755,   554,   557,   736,     0,     0,   505,   502,   832,   508,
     811,   804,   812,   823,   825,     0,   504,   522,     0,     0,
     511,   755,   799,   839,   840,   854,   498,     0,   537,   538,
     536,   516,   523,   500,   501,   834,     0,  1355,  1357,  1365,
     507,   506,  1406,  1405,   510,   402,   503,     0,   845,   818,
       0,   534,   532,   529,   531,   530,   535,   533,   512,   509,
     524,   499,  1650,   850,   850,   827,     0,   545,   547,   548,
    1754,     0,   859,   829,     0,   549,   550,     0,     0,     0,
     134,     0,     0,   782,     0,   127,   125,   136,     0,     0,
     944,     0,   379,   378,   377,   376,   349,     0,     0,     0,
    1607,   327,  2232,     0,     0,  2344,   305,   303,   304,     0,
     180,   543,   544,   542,   541,     0,   389,     0,  1801,   387,
       0,     0,  1683,   684,   496,     0,  1340,  1380,  1517,  1523,
       0,  1115,  1237,     0,     0,   647,  1214,   686,     0,  1224,
     633,   632,  1216,  1218,  1220,  1081,  1089,  1157,  1084,  1083,
       0,     0,     0,  1122,  1123,  1208,  1211,     0,     0,  1095,
       0,  1097,     0,     0,  1172,  1147,  1163,  1126,  1151,     0,
    1100,  1076,     0,  1127,     0,  1132,  1130,     0,  1104,     0,
       0,  1111,     0,  1109,     0,  1110,     0,  1112,  1153,  1155,
    2285,     0,     0,  1205,  1011,     0,  1020,  1017,     0,  1014,
     989,  1177,  1167,  2236,  2225,  2224,  2239,  2239,  2239,     0,
    1342,     0,  1455,  1683,   939,     0,   940,   986,   432,     0,
     439,     0,   437,   406,     0,   926,   985,  1472,  1484,     0,
    1492,     0,     0,  1469,  1479,     0,     0,     0,  1478,     0,
    2168,  2169,  2167,  1370,  1348,     0,     0,  1426,     0,  1422,
     979,     0,   991,   990,     0,  2121,     0,  2120,  2132,  2133,
    2130,  2131,  2129,  2110,     0,  2116,  2115,     0,     0,     0,
    2126,  2117,     0,     0,  1566,     0,  1561,   883,     0,  1268,
    1243,  1268,  1254,     0,     0,  1268,  1250,  1248,  1252,     0,
    1340,     0,  1269,  1293,   985,  1743,  1362,  1365,   321,   815,
     558,   755,   723,   724,   736,     0,     0,     0,   803,     0,
     907,     0,   808,   680,   517,   838,   837,   518,     0,   801,
       0,  1366,  1367,  1358,   800,   820,   806,     0,   831,   559,
     858,   700,   627,   576,   567,   646,   570,   569,   613,   584,
     581,   631,   629,   599,   631,   631,   606,   605,   623,   609,
     589,   686,   686,   588,   626,   686,   610,   608,   612,     0,
     614,   631,   619,   607,   611,   628,   604,   601,   625,   646,
     646,   582,   585,   624,   686,     0,   617,   646,   650,   587,
     686,   692,     0,     0,   646,   648,  1753,   135,   123,     0,
       0,   784,   786,     0,     0,   787,  2321,     0,  2323,  1303,
       0,   310,   375,   328,     0,     0,   191,   985,     0,   181,
     183,   184,     0,     0,     0,   491,  1685,  1684,   388,   476,
     497,     0,  1519,     0,  1515,     0,  1238,     0,     0,     0,
       0,   692,   694,   688,   692,     0,  1215,     0,  1188,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1079,     0,
    1168,     0,     0,     0,     0,     0,     0,  1108,  1106,  1107,
    2286,   758,  1016,     0,  1178,     0,  2244,  2244,  2244,  1497,
    1496,     0,  1495,  1499,     0,   946,     0,     0,     0,     0,
     436,     0,   418,   474,     0,     0,     0,  1493,  1481,  2274,
    1470,  1473,  1748,  2170,   963,     0,  1343,  1425,  1423,     0,
    1416,  1418,  1420,     0,  1742,     0,     0,  2125,  2111,   681,
       0,     0,     0,     0,  2112,     0,  1333,  1273,     0,  1239,
    1268,  1268,     0,  1239,     0,     0,     0,  1504,  1359,  1506,
    1297,     0,  1275,     0,  1364,     0,     0,   814,     0,     0,
       0,   844,     0,   857,   805,   824,   846,   650,   919,  1356,
     819,   821,   895,   513,   546,   706,   575,   568,   586,   635,
     630,     0,   635,   635,   595,   613,   590,     0,   686,   603,
     594,   615,   618,   620,   622,   635,     0,   686,   583,   592,
     579,   635,   658,     0,     0,     0,   654,     0,   699,     0,
     661,   563,   651,   653,     0,     0,   616,   686,   572,   693,
     692,   574,   686,   692,   635,     0,   649,   635,     0,   121,
     126,   137,   138,   775,  2320,     0,  2318,     0,     0,     0,
     132,   194,   192,   193,     0,   187,   189,   184,  2331,  2338,
       0,     0,  2336,   390,   392,   399,   477,     0,     0,  1365,
     753,  1381,  1116,   644,   642,   645,   643,   687,   695,   696,
       0,   691,   689,   692,     0,  1120,  1121,  1209,  1200,  1145,
       0,  1096,  1169,     0,     0,  1152,  1128,  1131,  1129,  1135,
    1136,  1018,     0,     0,  2243,  2241,     0,  2242,  2240,  2216,
       0,  2173,  2174,  2172,  2160,     0,     0,  1673,   420,   985,
     425,     0,   442,   441,   438,  1370,  1483,  1485,  1491,  1480,
       0,  1344,  1359,  1686,  1419,     0,   980,  2123,  2122,  2124,
    2118,     0,     0,     0,     0,  1271,  1255,     0,  1259,  1264,
    1260,     0,  1251,  1249,     0,  1380,  1285,  1286,     0,     0,
    1291,  1295,  1370,  1365,   817,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   843,  1719,   833,   835,   802,     0,
     807,     0,     0,     0,   701,   702,   707,   709,   639,   640,
     641,   596,   636,   638,     0,   598,   566,   591,   621,   597,
       0,   593,   580,   664,   663,   994,   656,   666,     0,     0,
     662,   652,   660,   655,   571,   573,   577,   578,   564,     0,
     565,  1752,   128,   788,   242,  2322,   954,     0,  2327,   109,
    2335,   124,   133,  2345,   191,     0,     0,     0,   182,   185,
    2274,  1683,     0,   395,   739,     0,   752,     0,   697,   690,
       0,     0,  1171,  1173,  2222,  2221,  2220,  2217,     0,     0,
       0,     0,     0,     0,  2245,  2247,  1494,     0,     0,     0,
     433,     0,   429,   431,     0,   461,   475,   978,   539,  1352,
    1365,     0,  1370,     0,  1694,  1417,  2128,  2127,  2113,     0,
       0,     0,     0,     0,     0,  1304,  1503,  1281,  1281,  1292,
    1276,  1363,   816,     0,     0,   739,  1721,  1720,   857,     0,
     712,   713,   714,     0,     0,     0,   705,   708,   637,     0,
     759,     0,   665,   994,   659,     0,   130,   268,     0,   254,
     240,     0,     0,     0,   244,   139,   142,   140,     0,   141,
     147,     0,   148,   149,   150,   151,   152,   143,   266,   267,
     146,   144,   145,     0,  1766,     0,  1767,  2325,     0,     0,
    2324,   136,   158,   188,     0,     0,  2339,   393,   391,     0,
    2270,  1488,     0,   100,   740,   745,   741,  1365,     0,   634,
    1094,  2218,  2248,  2251,  2249,  2250,  2252,  2246,     0,     0,
     986,     0,   426,   427,     0,     0,     0,  1488,     0,     0,
    1488,  1488,  1488,  1488,   454,   462,   464,     0,   540,     0,
       0,  1349,  1351,  1345,  1407,     0,     0,     0,     0,  1687,
    1689,     0,  1424,     0,  1256,     0,  1261,     0,  1253,     0,
       0,  1289,  1287,     0,   739,   551,   836,     0,   716,     0,
     715,     0,   710,   711,   706,     0,   686,     0,   686,   657,
     129,     0,   122,     0,     0,   253,   256,     0,     0,   259,
     249,   248,   250,     0,   243,   242,   242,   296,   247,   293,
     292,   285,  2274,     0,     0,     0,     0,  2346,   190,   985,
       0,   397,   396,     0,     0,   742,   751,   754,  1500,  1508,
       0,  1674,     0,   434,   433,   430,     0,     0,     0,  1488,
    1488,     0,     0,     0,     0,     0,   440,   463,  1488,  1353,
    1354,  1365,     0,   962,     0,     0,     0,     0,  1688,     0,
       0,  1695,  1697,     0,     0,     0,  1305,     0,  1282,     0,
       0,     0,   553,   552,     0,   718,   719,   717,   703,   704,
     600,   760,   602,   131,   269,   280,   283,   275,   255,     0,
       0,     0,   245,   242,     0,   229,   227,   228,   234,   235,
     236,   237,   238,   239,   230,   233,   231,   232,   242,     0,
     199,     0,     0,  2326,     0,  2328,     0,   138,   168,   167,
     159,     0,   242,  2332,  2340,  2274,   746,   747,     0,     0,
     673,   421,   428,     0,   450,   452,   453,   447,     0,   443,
     445,   446,   472,     0,     0,  1400,  1398,  1399,   468,  1401,
     469,   467,   465,   458,     0,   456,     0,  1350,  1408,  1692,
    1693,     0,  1690,     0,     0,  1696,     0,  1258,  1263,  1284,
    1283,  1298,     0,   822,     0,     0,   242,   276,     0,   251,
       0,     0,     0,     0,   197,   299,     0,   195,   287,   287,
    2329,  2330,   120,   169,  2347,     0,   158,   398,  1507,  1509,
       0,  1675,   444,     0,  1950,     0,   470,   471,     0,   455,
       0,   466,     0,  1691,  1699,  1698,     0,     0,     0,   277,
     283,   273,   281,   242,     0,     0,   241,   260,   295,   198,
       0,   297,     0,   242,     0,   286,   288,   290,     0,  2341,
     674,  1686,   451,   448,   449,   461,   460,   457,   985,     0,
    1290,  1288,     0,   274,     0,     0,   272,   252,   257,   242,
       0,   242,   210,   209,     0,   201,   223,   294,     0,   200,
    2333,   242,  1694,   459,     0,     0,  1411,  1413,     0,   278,
       0,   242,     0,   242,     0,   242,     0,     0,     0,     0,
       0,   196,   242,  2342,  1700,   986,  1409,   985,  1562,     0,
     270,   242,   258,   263,   300,     0,   204,   224,   225,     0,
     207,  2334,     0,  1702,  1414,  1412,   242,   242,   259,   262,
     298,     0,     0,   202,   216,   203,   214,   206,     0,     0,
       0,  1709,   242,   242,   264,   222,   220,   242,   211,   218,
     213,     0,   219,   226,   217,     0,   208,  1701,  1704,     0,
       0,  1706,  1707,     0,  1676,     0,   205,   221,   215,  1708,
    1703,     0,  1710,   212,  1705
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   552,  1336,    57,    58,    59,    60,    61,  1219,
      62,   752,  1161,  1622,  1623,    63,   498,    64,   948,  1395,
    1396,  1397,    65,  1928,  2775,  1413,   470,   471,  1797,  1798,
     972,  2387,  2733,  3442,  2737,  3546,  3672,  3451,  1872,  3045,
    3443,  3444,  3555,   493,  1926,  1350,  3697,  1777,  3800,  1778,
      66,   585,   946,  1376,  1377,  3058,  3059,  3281,  3060,  3274,
    3275,  3276,  3277,  3913,  3773,  3867,  3914,  3968,  4001,  4007,
    4008,  3944,  4017,  4018,  4019,  4025,  4020,  3945,  4003,  3774,
    3775,  3679,  3776,  3558,  3777,  3683,  3778,  3561,  3779,  3780,
    3781,  3782,  3905,  3783,  3678,  3937,  3770,  3771,  3939,  3983,
    3999,  3784,  3568,  3673,  3854,  3569,  3674,  3900,  3766,  3901,
    3932,  3979,  3767,  3855,  3935,  3858,  3785,  3791,  3915,  3786,
    3792,  3787,  3573,  3690,  3790,  3688,  3789,  3941,  3910,  2391,
    2759,   570,   571,   596,  1919,   572,   960,   920,  1352,  1810,
    1811,  2253,  2254,  2373,  2374,  2375,  1802,  1803,  1804,  1907,
    1908,  1909,  1784,  1785,  1786,  1356,  1781,  1782,   573,   921,
     931,  1805,  1806,  1807,  2379,  1911,  1912,  1913,  1914,  1808,
    1613,  1809,  2630,  2396,  2769,  3460,  3068,  3590,  3805,  2322,
    2323,  2302,    67,   509,   799,  1216,  2132,  1656,  1655,  1217,
    2529,  2530,  2531,  2119,  3340,  1658,  2131,  3490,  3714,  3491,
    3492,  2867,  3612,  2527,  2871,  2872,  3129,  3342,  3495,  3819,
    3820,  3821,  3813,  3814,  3815,  3726,  3834,  3835,  3888,  3925,
    3624,  3625,  3626,  2151,  2535,  3345,  3287,  1901,  1342,  1343,
     472,   473,   474,   593,  2397,  1859,  2398,  2399,  1861,  1862,
    2502,  1267,  2708,  2681,  3496,  2765,  2716,  2717,  2718,  2719,
    2651,  2652,  2264,  2265,  2328,  2727,  3028,  3211,  3226,  3029,
    3030,  3031,  3032,  3033,  3034,  3035,  2789,  2790,  3411,  3412,
    3413,  2785,  2786,  3257,  3241,  3242,  3243,  3426,  3085,  2574,
    2575,  3881,  2583,  2584,  2621,  2915,  2622,  1346,  3086,  3251,
    3301,  3244,  2726,  3205,  3404,  3535,  3405,  3406,  3407,  3662,
    2266,  2650,  2267,  2642,   876,   475,  1427,  1428,  3593,  3594,
    3595,  3596,  2403,  3288,  3289,  2639,  2843,  3539,    68,  1360,
     914,   923,   919,   937,   577,  1361,  1873,  2334,  3263,   560,
    1863,  3198,  2960,  3202,  1864,  2661,  1865,  2949,  3187,  1866,
    2975,  3200,  3399,  2662,  2663,  1867,  1868,  1869,  2959,  2968,
    3528,  2268,   123,  1619,  2723,  2309,    69,  1319,  1314,    70,
     887,   882,   883,  1317,  1318,  1743,  2198,    71,   818,    72,
     580,    73,   588,  1400,    74,  1227,  2143,  2144,  2145,    75,
     938,    76,    77,   589,  1407,  1408,  1409,    78,  1212,   130,
      79,   807,  1222,  1224,  1225,    80,   582,   583,  1369,    81,
    1650,  2110,  2111,   943,   944,  1375,  2866,    82,    83,   549,
     522,   824,   523,   524,  1683,  2163,  3497,   835,   836,   837,
    2559,  1244,  1245,  1246,  2168,  1684,  2564,  1015,   717,   718,
     719,   720,  1109,  1110,  3245,   721,  1119,  1579,   722,   723,
     724,   725,   726,   727,  1606,  2813,  2814,  3100,  2066,  2067,
    2068,   728,  1962,  2800,  1975,   729,  1102,  1564,  1496,  3092,
    2805,  1440,  1945,  2430,  2499,  2040,  1040,  1041,  1005,  1952,
    1446,  1750,  1751,  1752,  1753,  1754,  3175,  3174,  3176,  3510,
    3367,  3512,  3371,  2209,  1755,  1756,  2597,  2929,  2615,  2616,
    3382,  2200,  1757,  2603,  3651,  3379,  3380,  3751,  3750,  3381,
    3180,  3181,  2942,  2943,  2337,  2338,  2339,  3514,  1487,  1540,
    1488,  1494,  1196,  1197,  1441,  2107,  2514,  3352,  3501,  2057,
    3146,  3499,  3631,  1870,  2687,  2688,  2165,  2166,  2619,  2946,
    2973,  1270,  3498,  2516,  1717,  1718,  3074,  4006,  2631,  2350,
    3828,  2128,  2129,  2694,  3733,  3892,  3955,  3956,  3957,  2897,
    2898,  3150,  3151,  2167,  2556,  2899,  3353,    84,   477,    85,
    2072,  2084,   940,  1429,  1430,   740,   490,    86,   499,  2108,
      87,   516,  1671,   790,   811,  1230,  1231,  2152,  2536,  2543,
    2153,  2548,  3139,  2538,  2877,  2878,  2076,  2077,  2539,  2880,
    3136,  3121,  3122,  2862,  3336,    88,   537,  2940,  2610,  2611,
    3708,  3709,   812,    89,   476,   992,  1935,  1433,  1934,   993,
     994,  1435,   612,   613,    90,   534,  1295,  1296,  1297,  1733,
      91,   527,   877,  2587,  1712,   803,  1154,  1274,   880,  1275,
    1698,  2182,  1255,    92,   910,   909,    93,   556,  1338,    94,
     753,  1172,  1173,  1627,  2085,    95,   517,   816,   817,    96,
     511,   804,  1664,    97,   503,    98,    99,   793,  1205,  2863,
    3488,  3810,  3921,  1649,  1206,  3069,  3504,  3639,  3640,  3642,
    3741,  3742,  3993,  4011,  4030,  4031,  4034,   731,   897,   732,
    3394,   733,   734,  2544,  2545,  2947,   735,  3710,   736,  2329,
     890,   496,   452,   567,   898,  2519,   738,  3575,   917,   964,
     454,   455,   100,   838,   526,  1248,  1249,  1250,  1693,  1694,
     881,  2045,  1695,  1696,  2179,  2174,  3158,  2921,  2913,   101,
     796,  1174,  1210,  1211,  2116,   102,   536,   103,  1198,  1643,
    1644,  2104,  2513,  2105,   104,   820,   105,   777,  1637,   778,
    1176,   779,   780,  1188,  1183,  1191,  1185,  3478,  3328,  3329,
    2092,  1157,   965,   966,  1630,  2087,  2088,  3116,  3331,  3484,
    3485,   106,   134,   460,   591,   955,  1238,   107,   108,   109,
     110,  1241,  1331,  2159,  1332,  1333,  1334,  1764,  1681,  2476,
    1100,  1558,  2840,   600,   982,   974,   124,   125,   126,   603,
     604,   127,   935,   936,  2335,  2739,  3047,  3266,  3267,  3448,
    3580,   976,  3456,  3875,  3972,   977,   978,  2760,  3457,  3700,
    3876,  3951,   979,  2388,  3056,  3582,  3802,   111,   899,   546,
    1329,  1324,  1326,  1760,  2216,   112,   113
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3435
static const int yypact[] =
{
    4250,  2382,   114,  1253, -3435,  -110,   195, 39653,   138,  1253,
    1253,  -116,  3022, -3435, -3435, -3435, -3435, -3435,  2709, -3435,
   39653,   114, -3435, 22144, -3435, -3435,   572,   802,   232,  1253,
     114, -3435, 39653, -3435,   518,  1100,   114, -3435, -3435,  1253,
   -3435,  -116, 39653, -3435,   697, -3435,   -58,   580,   667,   594,
     769, -3435, -3435, 39653,  2560,  -135,  1194,  1102, -3435, -3435,
     900, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, 22712, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435,  1217, 39653,  1221, 39653, -3435,  1172,
   39653, 34013, 39653,   943,  1247, -3435, -3435,  1371, -3435, -3435,
    1253, -3435, -3435, -3435,  -116, -3435, -3435, 22144, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435,   962, -3435, -3435,   994, -3435, -3435, -3435,
    1544,  1362, -3435,  1448, 34013, -3435, 39653, -3435, -3435, -3435,
     889, -3435,  1168, -3435,  1160,  1459,   202, 11176,  1467,  1467,
    1467, 39653,  1497,  1467,  1467, 39653, -3435,  1467, -3435,  1467,
    1253, -3435, -3435,  3323, 39653,  1361,   421,   -86, 34013,  1281,
   39653, -3435, -3435, 11176, -3435,  1509, 22144, -3435,  1253,  1729,
    1579,   251, 39653, -3435, -3435,  1253,   824,    45, -3435,  4307,
     167, -3435, -3435, -3435,  2188, -3435, -3435,  4268, -3435, -3435,
   -3435,  1254, -3435, -3435, 22144, 39653,  1253,  1548, -3435, -3435,
     147,   147,   147, -3435,   147, -3435,   147, -3435,  -135,  1240,
   -3435, -3435,  1238, 39653,   -83,   867, -3435, -3435,  1256,   795,
   -3435,  1305, 31193, -3435, 39653, -3435, -3435, -3435, -3435,  1506,
   -3435, -3435, -3435,  1018, -3435, 22144, 39653,  1382, -3435, -3435,
   22144, -3435,    19, -3435, -3435,  1275, 39653, -3435, 22144, 22144,
     213,    23,  1213, 39653, 39653,  1689, -3435,  1865, 31193,  1460,
   -3435,   826,   990,  1371,  1903, -3435,  1362, -3435, 39653, -3435,
   -3435, -3435, 35705,   202,  1292,  1322,  1336, 14686, -3435,  1338,
    1366,  1370, 11176,  1376,  1384,  1386,  1394,  1404,  1412,  1414,
    1432,  1441,  1441,  1445,  1453,  1455,  1468,   803,  1470, -3435,
    1488,  1490,  1495, -3435, -3435,  1513,  1519,  1533, -3435,  1537,
    1557,  1565, 11761,  1586,  1593, -3435, 19300,  1610,  1624,  1626,
    1641,  1643,  1645,  1649,  1653,  1668, -3435, -3435, 11176,  1672,
   -3435, -3435,  1684, -3435,  1686,  1694,  1696,  1701,  1707,  1712,
    1718,  1720,  1722,  1724,  1733,  1748,  1751,  1764,  1768,  1776,
   -3435,   991,  1779,  1781,  1469,  1788, -3435,  1791, -3435,   165,
    1799,  1441,  1441,  1441,  1802,  1809,  1811,  1839,  1866, 14686,
   14686, 14686,  8251, -3435, 39653, -3435, 39653,  1319,  2684, -3435,
    2768, 14686,   179, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
    1360,  1480, -3435, -3435, -3435, -3435, -3435,  1868,  1408,  1845,
   39653, 39653, 39653,  1704, 39653, 39653, 34013,  1524, 39653, 31193,
   22144,  1467,  1500,  3309,  1798,  1670,  1148, -3435, -3435, -3435,
   -3435, -3435,  1783, -3435, -3435,  1753, -3435, -3435, -3435,   135,
   -3435,    97, -3435, -3435, -3435, -3435, -3435, -3435,  1919,  1740,
   -3435, -3435,   116, -3435, -3435, 39653, -3435, -3435, -3435, -3435,
    2138,  1921,  1319,   915,  2381,  2234, 22144, -3435,    60, -3435,
     458, -3435, -3435,  2202, -3435, -3435, 31193, 22144, -3435, -3435,
   -3435, 19868, -3435, -3435,  2419, -3435,  1888, -3435, 22144,  1798,
   -3435,  2149,  2055,    23,  1958, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435,  1918,  2188, -3435, -3435, -3435,
    2358, -3435,  2074,   309,  2012, -3435,  1946,   797,   309, 31757,
    2290,   184, -3435,   209, -3435,  2364, -3435, -3435,  2073, -3435,
   -3435,  2079,  2082,  2279,  2056, -3435, -3435,   325,  2528, -3435,
   -3435,   801, -3435,   955,  2290,   309,   184, -3435,  2302,  2421,
     649,  -125, -3435,     0, -3435, -3435,  2492, -3435, -3435, -3435,
   -3435, -3435, -3435,  2138, -3435, -3435, -3435,  1990, -3435,  2244,
    2098, -3435, -3435,    64, -3435,  2009,   874,  2455, -3435,   890,
   32321, -3435, -3435, -3435,  2485,  2500,  1441,  2013, -3435, -3435,
   -3435,  2593, -3435, -3435,  2023,  2505,  2505,  2505,  2602, -3435,
   -3435, -3435, -3435, -3435,  2178,  2057, -3435,  1382, 22144,   720,
   -3435, 36269, 22144, -3435,  1280, 11176, -3435, -3435,  3697,    30,
    1681, -3435,  2557,  2213, -3435, -3435, -3435, -3435,  2460, -3435,
   -3435,  2593,  2518,  2505,  2415,  2036, -3435, -3435, -3435,  1362,
   -3435, -3435, -3435,  2443, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435,  2444, -3435, -3435, -3435, -3435, -3435,  1382, -3435, 22144,
   -3435, 22144, -3435,  2043, -3435,  2039, -3435, 11176, 11176,   341,
    2563,  2618,  2618,  2618,  1319,  2075, 11176, 11176, 11176, 11176,
   11176, 11176, 11176,   397,  2051, -3435, -3435,  8836, -3435,  2053,
   11176, 11176,  2140, 11176,  1480, 11176, 23280,   980,  2921, 11176,
     410,  2515, 11176, 11176, 11176,  8251,  2471, 11176, 11176, 23280,
    2632,  2059, -3435,  2067,  1326, 11176, 11176,  1427, 11176, 11176,
   11176, 11176, 11176, -3435,  8836, -3435, 11176, 11176, 11176, 11176,
   14686, 11176, 11176, 11176, 11176, 11176, 11176,  2618,  2618, 11176,
   11176,  1442,  8836, -3435, 11176,  1480,  2332,  2332, 11176,  1480,
    7081, 11176, -3435, -3435, -3435,  2076, -3435, -3435, -3435, 23280,
    2618,  2618, 11176, 11176,  2563,  2563,  2563, -3435,  8251,   133,
    2077, 11176, 24416,  2068, -3435, -3435, -3435, -3435, 11176, 11176,
   11176, -3435, 14686, -3435, -3435,  1625, -3435, -3435, -3435, 12346,
   14686, 14686,  2081, 14686, 14686, 14686, 14686, 14686,  2416, 14686,
   14686, 15271, 15856, 14686, 14686, 14686, 14686,   771,  2563, 34013,
   14686, 11176, -3435, -3435, 39653, -3435, -3435, -3435,  2078, 22144,
    1524, -3435, -3435,   -73,  2520, -3435, -3435,  2089,   121, 22144,
    2087, -3435, -3435, -3435, -3435, -3435, -3435,  2629, -3435, -3435,
   -3435,  2114,  2097, -3435, -3435, -3435, -3435, -3435, -3435,  2190,
   -3435, -3435, -3435,  2106, -3435,  2106, -3435, -3435,  2106, -3435,
   -3435,  2106,    56,  4419, -3435, -3435, 39653, -3435, 40217, -3435,
   19868,  -110, -3435,  2411, -3435, -3435,  2445, -3435,  2417,   115,
    2111, -3435, 22144, -3435, -3435, -3435,  2339,  1142, 34013, -3435,
   -3435,   159,  2117,  2191,  2120, -3435,  2206, 22144, 22144, -3435,
   -3435, -3435, -3435,    45,    11,  2129,   632, -3435, 39653, -3435,
    1456, -3435, -3435, -3435,  2135, -3435, 11176, -3435,  2136, -3435,
     948,  2493, -3435,  -110, 11176, -3435, -3435,  2144,  1362, 39653,
   39653, 39653, 22144, 39653, 22144, -3435,   930,   930, -3435,  1398,
   -3435, -3435, -3435, -3435,   309, 39653, 39653,   309, 31193, -3435,
   -3435, -3435,  2550,   184, 39653,   309, -3435,  2502,  2237, -3435,
   -3435, -3435,  2566, -3435, -3435,  2558,  2150, -3435, -3435, -3435,
     184, -3435, -3435, -3435, 22144, -3435, -3435,   184, -3435, -3435,
     184,   184,   309,   309,  2196, -3435, -3435,  2152, -3435,  2196,
    2286,   772,   147,  2376, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435,   882, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435,    92, -3435, -3435, -3435,  1793,  2621, -3435, 34013,
    2094,   639,    27,  2094,  2628,  -110,   188, -3435,   188, -3435,
    3017,  2403,   228, 22144, -3435,  2162,  -110, 22144, -3435, -3435,
   -3435, -3435, -3435, -3435,  2165, -3435,  2167,  2172,  1319,  2611,
    2613,  2616,  2626,  2630,  2633,  2634,  2635,  2636,  2639,  2644,
    2645,  2653,  2655,  2656,  2660,  2176, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435,  2225, -3435, -3435, -3435, -3435,  2198,
   -3435, -3435, -3435,    99,  1886,  2243,  2264,  2763, 31193,  2641,
   39653, 39653, 39653, 39653, 39653, -3435, -3435,  1015,  2474,  2229,
   -3435,  -149, 39653,  2647, 26681,   125,   329,   696, -3435,  2618,
    2232, -3435,  2245,  2246,  2251, 11176,    89,   192,   879,  1252,
    1156,   964,   420,   262, -3435,  2254,  2248, -3435,   971, -3435,
     491,   504,  1029,  1042,  2257, -3435,  2258, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435,  2650, -3435,  1191,
   -3435, -3435, -3435, -3435,  2259, -3435, -3435,  1047,   516,   526,
     190,  2266,   561,  1210,  1302,  2263, 23280, 39653,  2618,  2271,
    1055,  1063,  2618,  2274,   577,  1105,  1306,  1347,  1357,  1123,
    1139,  1163,   612,  1377,  3162,  1187,   614,   645,   690,   707,
    1200,  2280,  2283,   733,   264,  2618,  2284,  1229,   276, -3435,
    2285, -3435,  2287,  1235,  9421, 10006, 10591,   351,   761, -3435,
    2289, -3435,  2067,  2291,  2293,   300,  1245, -3435,  -135, -3435,
   11176, -3435,   106,   913, -3435,  2405, 39653,  1848,   157, -3435,
   -3435, -3435, -3435, -3435, -3435,   952, -3435,  2273, -3435,  2296,
    1141,  2299,  8251,  1234,  2299,  2350,  2132,  2132, 14686,  3018,
    2614, 11761,   206, 11761,   206,  2299,  2299,  2299, -3435, 14686,
    2303, 14686, 14686, -3435,  2563,  1319,  2304,   940, 39653, -3435,
     -73, -3435, -3435, -3435, -3435,   783, 31193, -3435, -3435, -3435,
     121, 34013,  2305, -3435, -3435,  2498,  3309, 22144, -3435, 39653,
   -3435, -3435, -3435, -3435, 20436, 20436, -3435, 20436, -3435, -3435,
     304,   662,  2812,  2333, -3435, -3435, -3435, -3435, -3435,  2683,
   22144, -3435,   584, 22144,  2162,  2314,  2314,  1517,  2413, -3435,
    2317, -3435, 11176,  -110, -3435, 31193, 31193, 22144, 22144,   484,
   -3435,   961, -3435,  -110,  2715, 20436, 20436, 20436, -3435, -3435,
   -3435, -3435, -3435,   779, -3435,  1319, -3435,  2315, -3435, -3435,
   -3435, -3435, -3435, 36833,    93, -3435, -3435,  -110,  2730, -3435,
    1319,  2328, 39653, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,   -88, -3435,
   -3435, -3435, -3435, -3435, -3435,  2463,   309, -3435, -3435, -3435,
   -3435, -3435,  2531,  2290,  2528,   309,   184, 22144,   309,   309,
   -3435, -3435,  1383, -3435,     0, -3435, -3435, -3435, -3435, 39653,
    1705,  2476, -3435,  2335, -3435, -3435, 22144, -3435,  2348, -3435,
    2767,  2889,  2290, -3435, -3435, -3435,   783,   783,  2638, -3435,
    -110,  2475,  2478,  2479,  2481,  2489,  2527, -3435, -3435,  -110,
    -110, -3435, -3435,   783, -3435,  1019, -3435, -3435, -3435, -3435,
    -110,  -110,  -110,  -110,  1849,  -110,  -110,  1389, -3435, -3435,
     783,   783, -3435,   168, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435,  1104, -3435,  2605,  2890,  2601,   783,   783,  2890,   783,
    2606,  2609,   783,   783,  2452,  2850,   783,  2751,  2495,  1248,
    2755,   783, -3435,  2496,  2871,   783,   783,   783,   783,  2890,
    2637,  2947,   783,   783, -3435,   783,  2643,  2640,   123,  2646,
    2648,   783,   148, 39653,   783,   783,   783,   783, -3435, -3435,
    4782, -3435, -3435, -3435, -3435, -3435, -3435,   953, 21006, -3435,
   -3435,   368, -3435,  2591, -3435, -3435, -3435, -3435, -3435, 37397,
   -3435, 11176,  1849,  -110,  -110,   120,  -110,  1849,  -110,  -110,
    -110,  -110,  -110,  1849,  1849,  -110,  -110,  1849,  3697, -3435,
   -3435, -3435,   101,   783,   783,   783,   783, -3435,  2146, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, 34013,  2741,  2126,
     -51, -3435, 39653, -3435, -3435,  1027,  2420,  -157,  3328,   164,
     164, -3435, 22144, 22144,  2462,  2333, -3435,   772, -3435,  2422,
   -3435, 12931, -3435,  2427, -3435, 11176, -3435, -3435, -3435,  1420,
   11176, 11176,  2878,  2408, -3435, 32885, -3435, -3435, -3435, 11176,
   32885,  2408, 11176, -3435,  2436, -3435,  2801,  2802, -3435, -3435,
   -3435, -3435, 11176, -3435, 11176, 11176, -3435, 11176, 11176, 11176,
   11176, 11176, -3435, -3435, 14686, -3435,  2432,  2451, -3435, -3435,
   -3435,  2453, -3435, 11176, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, 11176, -3435, 11176, -3435, 11176, 11176, 11176, 11176, -3435,
   -3435, -3435, 13516, 11176, 11176,  2454, -3435, -3435, -3435, 11176,
   11176, 11176, -3435, 11176,  1736, 11176,  1862, 11176,  1892, 11176,
   -3435, 11176, -3435, -3435, -3435, -3435, 11176, -3435, -3435, -3435,
    1399, -3435,  2448,  2449,  2456, 34013, 11176, -3435, -3435, -3435,
   -3435, -3435,   980, 14686,   306,  2467, 14686, -3435,  2350,  2471,
    2471,  1828,  8251,  1234,  2350, 11176,  2468,  2461, -3435, 11176,
   39653, -3435, -3435, -3435, -3435, -3435, -3435, 34013, -3435, -3435,
   -3435,  2087,  2780, -3435,  2162, -3435, -3435,  1475, -3435,  2465,
   -3435,  2466,  2541,  2542,  2546, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435,  2290,   961,  2561,
    2480, -3435, -3435,  2494,  2811, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
    3019,  2486,  2314, 39653,  1319, -3435,  2556, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435,    73, -3435, -3435,  2487,  2487,
   18162, -3435, -3435, -3435, -3435,  2727,  2895,  2907,  2908,   890,
   -3435,   146, -3435,   170,  2866,  2290, -3435,  2911, 34577, 27245,
   -3435,  2499,  2863,  2501,   783, 29501,   794, 24983, 30065, -3435,
   -3435,   120, -3435,   142, -3435,  1398,  1398,  2532, -3435,  2766,
   -3435, -3435, -3435,  2333,   184, -3435, -3435, -3435,  2516, -3435,
   -3435,  1012,  2869,  2872, -3435,  2756,   777,  2756,  1012,  1012,
   23280,   772,  2006, -3435,  1849,  2809, -3435, -3435, -3435, 33449,
   30629, -3435, -3435, -3435, -3435,  3009, -3435,  3011,   762, -3435,
   -3435,  1803,    27, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,  2628,  1803,
    1803,   188, -3435,   136, -3435, -3435, -3435, -3435, -3435, 23848,
    1280,   114,  1280, -3435,   124,   311, 23848, -3435, -3435, 23848,
     114,   120,  1849, 23848,  1849, 37961,   114,  -110,  -110,  2008,
     783,  1849, -3435, -3435,  2879, 39653,  2880, 23848, 23848, -3435,
   34013, -3435,   783,  1162,  1849,   120,   120, 23848,   114, 23280,
    2222,  2361,  1729,  -110,   114, -3435, -3435, -3435, -3435, 22144,
     114,   114,  2242, -3435, -3435, -3435,  1849,  2361, 34013,  2529,
   -3435,  5923, -3435, -3435, -3435, 17594, 39653,   265,   163, -3435,
    2524,  1101,   369,  2604,   274,  2535, -3435,  2543, -3435,  2540,
   -3435,  1319, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435,  -110,  1517,  1803,  1803,  1886, -3435,
    2783,  2940,   783, -3435,  2011, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435,  2642, -3435,  2712,  2795,  2553, -3435,
   -3435,    87, -3435,   780, 22144, 17026, -3435,  2775, -3435,  2791,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,   772,  2793,
    2333,  2572,   125, 11761,  1272, -3435,  1319, 11176,  1319,  1580,
   -3435,  2555,  2555, -3435, -3435,  2568,  2555,  2930, -3435,  2933,
    2573, -3435,  2574, -3435,  1294,  2575,  2577,  1360, -3435, 11176,
   11176,  1355,  1364,  -102,   778,   799,   319, -3435,  1416,  3187,
   -3435, -3435,  1418,  1443,  1462,  1479,   804,  1486,  1515, 11761,
    1511,   989,   347, -3435,  1539,   841,   862,  1547, 11176,  1562,
   11176,  1584, 11176,  1591,  1597,  1617, -3435, -3435, -3435, -3435,
   -3435, -3435,  2576,  1319,  2579, -3435, -3435, 11176, -3435,   179,
   -3435, -3435, 14686,   385,  2580, -3435,  1319, -3435, -3435,  2584,
    1360, -3435, -3435, -3435, -3435, -3435, -3435, 39653,  2595, 27809,
   31193, 31193, 31193,  2586, 11176, -3435, -3435,  2833, -3435, -3435,
   22144,  2967, -3435, -3435, 14686,  2929,  2816, -3435, -3435,  2596,
    2594, -3435, -3435, 31193, -3435,  2188, 23280, -3435,  2597, -3435,
    2597,  1185,  2599,  1529, -3435, -3435, -3435,  2590,  1958,  3007,
   31193, 31193, 31193, -3435,  2333,  2333,   734,  2649,  2972, -3435,
   -3435, -3435, -3435, 38525, -3435, -3435, -3435, -3435,  1009, 39653,
    2953, 39653,  7666, -3435, -3435,  3130, 11176, 31193,   846,   913,
     783, -3435, -3435, -3435, -3435, -3435, -3435,  2290, -3435, -3435,
   -3435, -3435,  2932, -3435, -3435,   309,  1383,   362, -3435,  2021,
   -3435, -3435, -3435,  2971,  1012,  2756,  2756,  2973,  2867,   -33,
    2623, -3435,   783, -3435, -3435, -3435,  2188, -3435, -3435, 11176,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435,  1104, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, 11176,  2975,  2976,  1280, -3435,
   23848, -3435, -3435, -3435,   683, 37961, -3435, -3435, -3435, -3435,
   -3435, -3435,  2627, -3435, -3435,  1517, -3435, -3435, 30629,  -110,
   -3435, 23848,  2627, -3435, -3435,   326, -3435,  -110, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, 37961,  2631, -3435,   951,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, 37961, -3435, -3435,
   37961, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, 22144,  2778,   810, -3435,  1540, -3435, -3435, -3435,
   -3435, 39653, -3435, -3435, 22144, -3435, -3435,  5652, 39653,  2838,
   -3435, 11176, 11176,  2868, 39653,  2877, -3435,  3147, 39653,  3211,
   -3435, 37397, -3435, -3435, -3435, -3435, -3435,  2651, 39653,  1803,
    2126, -3435, -3435,   780,  2803, -3435, -3435, -3435, -3435,  2899,
   39653, -3435, -3435, -3435, -3435,  2784, -3435, 22144,  3190, -3435,
    2806,  1558,   613,  5361, -3435,  2658,  2333,  2996, -3435, -3435,
    2471, -3435,  1319, 11176,   591, -3435, -3435,   181,  1061, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
    2662,  2471,  2471, -3435, -3435,  2808, -3435, 11176, 11176, -3435,
   11176, -3435,   842,  2663,  2688, -3435, -3435, -3435, -3435, 11176,
   -3435, -3435,  2471, -3435, 11176, -3435, -3435, 11176, -3435, 11176,
   11176, -3435,  1636, -3435,  1659, -3435,  1661, -3435, -3435, -3435,
   -3435,  2664, 39653, -3435, -3435,  1573, -3435, -3435, 11176, -3435,
   34577, -3435, -3435, -3435, -3435, -3435,  -146,  -146,  -146, 14101,
    1319,  3121, -3435,    47, -3435,  3021, -3435, -3435,  2350,  1324,
   -3435,  1607, -3435, -3435, 39653, -3435,  1918,  2672, -3435,   783,
   14101,  2487,  2806, -3435, -3435,  1185, 23280, 27245, -3435, 31193,
    2036,  2036,  2036,  2290,  3070,  2561,  2561, -3435, 25550, -3435,
   -3435,  2815, -3435, -3435, 28373, -3435,  1335, -3435, -3435, 14686,
    1488, -3435,  1319, -3435, 33449, -3435,  1319,   783,  2679,  2680,
   -3435, -3435, 39089, 11176, -3435,  3117, -3435, -3435,  2681,   772,
   -3435,  1012, -3435,  3036,  3037,  1012, -3435, -3435, -3435, 23280,
    2333, 14101, -3435,    57,  1918,  1319,  2686,   951, -3435,  -105,
    1319, 23848, -3435, -3435, -3435,  2689,  3155,  3159, -3435, 23848,
    2198, 39653, -3435,  3130, -3435, -3435, -3435, -3435,  5652, -3435,
   23280, -3435, -3435, -3435, -3435, 39653, -3435,  2690, -3435, 17594,
   -3435, -3435, -3435,  2555,  2555,  2555, -3435, -3435, -3435, -3435,
   -3435,  2568,  2905, -3435,  2568,  2568, -3435, -3435, -3435, -3435,
   -3435,   181,  1440, -3435, -3435,   181, -3435, -3435, -3435,   107,
    1089,  2568, -3435, -3435, -3435, -3435, -3435, -3435, -3435,  2555,
    2555, -3435, -3435, -3435,   181,  2555, -3435,  2555,  2472, -3435,
     323,    90,  2555,  2555,  2555,  2694,  2687, -3435,  1319,  2471,
    3205, -3435, -3435,  2831,  -110,  3153, -3435,  1611, -3435, -3435,
    2628, -3435, -3435, -3435,  2829,   369,   659, -3435,  2702,  2706,
   -3435, -3435,  -110,  2703,  2708,  4782, -3435, -3435, -3435,  3273,
   -3435, 39653, -3435,  1398, -3435,  1110,  1319,  2710,  2713,  2714,
    2717,  3261,   158, -3435,  3261, 32885, -3435,  1637, -3435,  2719,
    2721,   147,  2724,  1663,   870,  1655,  3005,  3074, -3435,  2934,
   -3435,  1665,  1122,  1674,  1742,  1762,  1816, -3435, -3435, -3435,
   -3435, -3435, -3435,  1687, -3435,   344,  2750,  2750,  2750,  1488,
    1319,  1691, -3435, -3435,  3095, -3435,  2733,  2737,  2738, 39653,
   -3435,  2816, -3435,  2135, 23280, 14101,  2742,  2743, -3435,   874,
   -3435, -3435,  2736,  2036, -3435,  3281,  3139, -3435, -3435, 34013,
    2746, -3435, -3435,  3031, -3435,   173,  2951, -3435, -3435, -3435,
     846,  2840,  2856,   783,  1319,  -110,  2205,  2335,  2269,  2813,
    1012,  1012,  2272,  2817, 11176, 11176,  2777, -3435,  2793, -3435,
   -3435,   203,  2135, 11176, -3435,  1517,  2816, -3435,  2782,  2785,
   39653, -3435,  3061,   265, -3435, -3435, -3435,  2472,   114, -3435,
   -3435,  2627,    73, -3435, -3435,   837, -3435, -3435, -3435,  1083,
   -3435,  2787,  1083,  1083, -3435,  2074, -3435,  2796,   181, -3435,
   -3435,  2819, -3435, -3435, -3435,  1083,  2789,   181, -3435, -3435,
   -3435,  1083, -3435, 34013,  -110,  3138, -3435,  2822, -3435,  3249,
    3132, -3435,  2472, -3435,  3133,  3043, -3435,   181, -3435, -3435,
    3261, -3435,   181,  3261,  1083,  3044, -3435,  1083, 39653, -3435,
   -3435, -3435, -3435, -3435, -3435, 39653, -3435,  1044,  1725,  -110,
    2868, -3435, -3435, -3435,  2807,  2800, -3435, -3435, -3435, -3435,
   39653,  5652, -3435, -3435, -3435,  2775, -3435,  1074,  1739,   951,
    2814, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   32885, -3435, -3435,  3261,  3057, -3435, -3435, -3435, -3435, -3435,
   11176, -3435, -3435,  3088,  3237, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435,  2900,  2902, -3435, -3435,  2903, -3435, -3435,   110,
    1588, -3435, -3435, -3435, -3435, 14101,  3171, -3435, -3435, -3435,
   -3435, 39653,  2857, -3435, -3435,  1155, -3435, -3435, -3435, -3435,
   11176, -3435,  2793,  3337, -3435, 25550, -3435, -3435, -3435, -3435,
   -3435,  2826,  2830,  7666,  3397, -3435, -3435,  2873, -3435, -3435,
   -3435,  2874,  1319,  1319, 39653,  2996, -3435, -3435,  1280,  1280,
   -3435,   203,  1155,   951, -3435,  1744, 39653, 39653,  1755,   556,
     556,   556,  1065,  1065, -3435, -3435, -3435, -3435, -3435,  3195,
   -3435,   590,   215, 39653, -3435, -3435,  1184, -3435, -3435, -3435,
   -3435, -3435,  1083, -3435,   147, -3435, -3435, -3435, -3435, -3435,
     147, -3435, -3435, -3435, -3435,  1441, -3435, -3435,  3089,  2870,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,  2841,
   -3435, -3435,  2952, -3435, 45293, -3435, -3435,  -135,  2865, -3435,
   -3435,   274, -3435, -3435,   747, 39653, 22144,  3013, -3435, -3435,
     874,   613,  2806, -3435,   764, 39653, -3435,  3094, -3435, -3435,
    2848,  1851, -3435, -3435, -3435, -3435, -3435, -3435,   493,  3090,
    1849,  1849,  1849,  1849,  1588, -3435, -3435,  2894,  2939, 14686,
    2954,  1758, -3435, -3435,   180,  3239, -3435,   170, -3435,   957,
     951, 11176,  2290,  1138,  3188, -3435, -3435, -3435, -3435,  3170,
   11176,  2853, 11176,  2861,  1765, -3435, -3435,  3266,  3266, -3435,
   -3435, -3435, -3435,  1770,  1782,   764, -3435, -3435,   265,  2864,
   -3435, -3435, -3435,   891,   891,  1784, -3435, -3435, -3435,  1796,
   -3435,  1812, -3435,  1441, -3435, 11176,  3306,  2891, 39653,   139,
   -3435, 46421, 46421, 39653, -3435, -3435, -3435, -3435,  5191, -3435,
   -3435,   704, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435,  3421, -3435,  2875, -3435, -3435,  2881,  1108,
   -3435,  3147, -3435, -3435,  5652,  3282, -3435, -3435, -3435,  2884,
    1958,   783,  3099, -3435,   764, -3435, -3435,   951,  2888, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, 23280, 22144,
   -3435,  1517, -3435, -3435, 39653,  2876,  2955,   783,  3338,  3351,
     783,   783,   783,   783,  2892,  3239, -3435,  3334, -3435,   112,
   11176, -3435, -3435,  1319,  3105,  3435,  3436,  3345,  3438,  1138,
   -3435,  -101, -3435,  3340,  1319, 39653,  1319, 39653, -3435, 39653,
     765, -3435, -3435,  3091,   764, -3435, -3435,  2816, -3435,  3483,
   -3435,   904, -3435, -3435,  1184, 39653,   181,   147,   181, -3435,
    1319, 11176, -3435, 11176,  2936, -3435, -3435,  3314, 39653, -3435,
   -3435, -3435, -3435, 11176, -3435, 45293, 45293, -3435, -3435, -3435,
   -3435,  3466,   874,  3437,  3156,  3439,  3372,  3423, -3435, -3435,
    5652, -3435, -3435,  1849,  1545, -3435, -3435, -3435,  2919, -3435,
     783, -3435,  2924, -3435,  2954, -3435, 14686,   -30,  -110,   783,
     783,  1969,  1969,  1517, 34013,  3020, -3435, -3435,   783, -3435,
   -3435,   951, 39653, -3435,   147,   147,  3462,   147, -3435,  3464,
    3465,  -101, -3435,   120,  1829,  1835, -3435,  3467, -3435,  3471,
    2938,  2942, -3435, -3435,  1840, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435,  1319,  1319, -3435,   155, -3435, -3435,  3301,
    3382, 11176,  1319, 42473,  2937, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, 45857, 11176,
   -3435,   704,  3421, -3435,  3183, -3435,  3184, -3435, -3435, -3435,
   -3435,  3407, 45293, -3435, -3435,   874, -3435, -3435, 23280, 14101,
    2008, -3435, -3435,  1853, -3435, -3435,  2350, -3435, 16441, -3435,
   -3435, -3435, -3435,  -110,  -110, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435,  1861, -3435, 34013, -3435, -3435, -3435,
   -3435,   147, -3435,   147,   147, -3435,  3512, -3435, -3435, -3435,
   -3435, 37397, 37397, -3435,  2970, 11176, 45293, -3435,  3393, -3435,
    3329,  1589,  3274,  2958, -3435,  2944,  1708,  3429, 46421, 46421,
   -3435, -3435, -3435, -3435, -3435,  3408, -3435, -3435, -3435, -3435,
   30629, -3435, -3435, 14686,  2965,  2968, -3435, -3435, 34013, -3435,
    3020, -3435,  2974, -3435, -3435, -3435,  3279,  2969,  1869, -3435,
     191, -3435,  1319, 43037,  3500, 39653, -3435, -3435, -3435, -3435,
   11176, -3435, 35141, 43601,  2966, -3435, -3435, -3435,  3131,  3423,
   -3435,  3337, -3435, -3435, -3435,  3239, -3435, -3435,  2981,  3412,
   -3435, -3435, 11176, -3435,  3419,  3064, -3435,  2985, -3435, 45293,
    1962, 45293, -3435, -3435,  3380,  2987,  1373, -3435,  2984, -3435,
   -3435, 45293,  3188, -3435, 11176,  2991,  2992, -3435,  1849,  1319,
    3522, 45293, 39653, 40781,  3169, 44165,  3409, 39653,  5652,  3410,
    3413, -3435, 45293, -3435,  3374,  1319, -3435, -3435, -3435,  3078,
   -3435, 41345, -3435,  2250, -3435,  3023, -3435, -3435,  3476,  1631,
   -3435, -3435,  3258,  3027, -3435, -3435, 45293, 45293, -3435, -3435,
   -3435, 28937, 11176, -3435,  3042, -3435, -3435, -3435,   890,  3352,
   18730,  3158, 41909, 44729, -3435, -3435, -3435, 26117, -3435, -3435,
   -3435,  3427, -3435,  1319, -3435,  1480, -3435, -3435, -3435, 34013,
    1880, -3435, -3435, 23280, -3435, 28937, -3435, -3435, -3435, -3435,
   -3435, 21574,  2919, -3435, -3435
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3435, -3435, -3435, -3435, -3435,    51, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435,  1522, -3435, -3435, -3435, -3435, -3435,
    1714, -1664, -3435, -3435, -3435, -3435, -3435, -3435,   560,  1365,
    3014, -3435,   562, -3435,   171, -3435, -3435, -3435, -2595,    37,
    -178, -3435, -3435,   328,    20,  2700,  -252, -3434, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435,   348,   346, -3435,
   -3435,   178, -3435, -3435, -2749, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435,  -408,  -356, -3435, -3435, -3435, -3435,  -159,
     201, -3435,   205, -3435,   207, -3435,   208, -3435,   210,   212,
     217,   218, -3435,   220, -3435, -3435,  -364, -3435, -3435, -3435,
   -3435,   221, -3435, -3435, -3435, -3435, -3435, -3435, -3435,  -261,
   -3435, -3435,  -120, -3435, -3435,  -253,   223, -3435,  -221,   225,
   -3435,   229, -3435,  -139, -3435,  -132, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,  2711, -3435,
   -3435, -3435, -1901, -3435, -3435, -2152,  2316, -3435, -1644, -3435,
   -3435, -1731, -3435, -3435, -1606,   738, -3435, -3435,   883,  -306,
   -3435, -1268, -1739, -1738, -3435, -3435, -3435, -1810, -1808,  -721,
    2065, -1102, -2081, -3435, -3435, -3435,   216, -3435, -3435, -2312,
    2318, -3435, -3435, -3435,  1374, -3435, -3435, -3435, -3435,  1154,
   -3435, -3435,   807, -1544, -3435, -3435, -3435, -3435, -3435, -3435,
      70,   196,   -28, -3435, -3042,   557, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435,  -196,  -128, -3435, -3435,  -198, -3435, -3435,
    -232, -3435,    69, -2111, -3435, -3435, -3435, -3435,  2282, -1200,
   -3435,  3222, -3435,  -499,   633,  1837, -2173, -1298,  -853,  -850,
   -2250, -3435, -3435, -3435,   318,   949,  1308,   722,  1836, -1737,
    1378,  1447, -3435, -3435,   746, -3435, -2899, -3435, -3435, -3435,
     712, -3435,   713, -3435, -3435, -3435,  -963,   685, -1198, -3435,
     310, -2204, -2264, -3435,   531, -3435,   481, -3435,  -523, -1910,
   -2182, -3435, -3435, -3435,   496,   767,   828, -3435, -2835,  -606,
   -3435, -3435,    96, -3435, -3435, -3435,    79, -3435,   339,   219,
   -3435, -3435,  -923, -2045, -3435, -3435, -3435, -2382, -3141, -3435,
    2319,   162,  1821, -2092,   292, -2127, -3435,   350, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435,  1900,  -734, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -2189,   811, -3435, -3435,  1450, -3435, -3435,
   -3435, -1694,  -483, -1561, -2800, -3435, -3435, -3435, -3435, -3435,
   -3435,  1555, -3435, -3435,  2029,  2457, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435,   573,  1629, -3435, -3435,
   -3435, -3435, -3435, -3435,   818,  2370, -3435, -3435, -3435,   -13,
   -3435, -3435, -3435, -3435,  2113, -3435, -3435,  2839, -3435, -3435,
   -3435, -3435,  1263,  1675, -3435, -3435, -3435,  -900,  1627,  -536,
   -1528, -3435,  3241, -3435, -3435, -3435, -1509, -1563, -3435,  2948,
     293, -2519,  2109,  -596, -2452, -3435,   944,  -622,  3167, -3435,
   -1063, -1032, -3435, -3435,  -591, -3435, -3435, -3435,  -593, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
    1295, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435,  1425, -3435,  1834, -3435,  -434, -3435,  2757, -3435, -3435,
   -3435, -2082, -1690,  1587,   868, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -2143, -3435, -3435, -3435, -3435, -3435,
   -3435, -1538, -3435, -1744,   281, -3435,   426, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435,   -49,  1069,   -41, -1886,  -994,  2735,
    1388, -3435, -3435, -1179,  2804, -1865, -3435, -3435, -3435,  1752,
   -3435, -3435, -3435, -3435, -3435,   844, -2338, -1277, -3435, -3435,
   -2822,  -837, -2059,  -816, -3435, -2095,   441, -1662, -1635, -2140,
     102, -1290, -3435,  1501, -3435, -3435, -3435, -3435,  -156, -3435,
   -3435, -3435,   470,  1662, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435,  -390,  -447, -3435,  1894,  1648, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435,  2652,  2600,  1723, -3435, -3435,
   -2305, -3435, -3435,  1685, -3435,   702, -2122, -1518,   956, -3435,
   -3435,   950, -2866, -3435, -3435, -3435, -3435, -3435, -3435,   901,
    -194,    34,  3310, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
    2414,  1904,  3236, -3435, -3435, -3435, -3435, -3435,  2116, -3435,
   -3435, -3435, -3435, -3435,  2588,  3324,  -525, -1147, -3435,  -685,
   -3435, -3435,  -812, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435,  2230, -3435,  1145, -3435, -3435, -3435,  2654, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435,   998,   -57, -3435,   224,   -87,
   -3435,   126, -3435, -3435, -3435,  -175, -3435,  -617,  -903, -1236,
     634, -1667,  -872,   982,  2624, -2917,  -551, -1074, -1057, -2112,
      59, -3435,  2998,     9,  -728,  -373,    -7, -2491,  -103,  -531,
   -3435, -2448, -3435, -3435, -3435, -3435,  2183, -3435, -3435, -3435,
   -3435,  1293, -3435, -3435, -3435,   954, -3435,   714,   512, -3435,
   -3435,  2110, -3435,  2224, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435, -3435,  2657,  3359,
    3063, -3435,  2691, -3435, -3435, -3435, -3435, -3435,   402, -3435,
     204, -3435,   463,  2470,   832, -3435,  1379,  -333,  -584, -3435,
     399, -3435, -3435,   288,  3365,  3066, -3435, -3435, -3435, -3435,
   -3435, -2488,  -805, -3435, -2542, -3435, -3435, -3435, -3435,  1852,
    -961,  2797,  1415, -3435, -3435, -3435,    67,  3425,  3426, -3435,
   -3435,   819, -3435,   361, -3435, -3435, -3435, -3435, -3435, -3435,
   -3435,  3295, -3435, -3435, -3435, -3435,  3297, -3435, -3435, -3435,
   -3435, -3435,  3298, -3435, -3435, -3435, -3435, -3435,  1640, -3435,
   -3435, -3435, -3435, -3435, -3435, -3435, -3435
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2315
static const yytype_int16 yytable[] =
{
     453,   958,   879,  1142,   875,   973,   981,  1339,   492,  1337,
    1016,  1018,   905,   491,   136,  1550,   497,   508,   569,  1242,
    1024,  1374,  2127,   515,  1000,   510,  1153,   451,  1524,  2038,
    1652,   918,  1551,  1719,  1271,   521,  1265,  1302,  2624,  2542,
    2676,  2586,  1501,   730,  2850,  2432,   538,  1055,  2515,  1570,
    2435,  1614,  2572,  2576,  2578,  2928,  1578,  1762,  1271,  2079,
    2888,  1344,  1860,  1303,  1345,  2608,  1466,  1073,  2711,  3197,
    2409,  2777,  2256,  2257,  1075,  3179,  2263,  1079,  2197,  1086,
    1087,  1088,   495,  2770,  1787,  2772,   558,   889,  1580,  1581,
    2590,  2591,  1584,  1585,  1586,  1587,  2672,  1589,  1590,  1592,
    1594,  1595,  1596,  1597,  1598,  1042,  2561,   989,   561,  2380,
     453,  2381,  2120,   453,   568,   574,  1094,  1095,  1096,  2599,
    2269,  1104,  1105,  3249,  2273,  3184,  3477,  2609,  1138,  1137,
     558,  2656,  2244,  1194,  1194,  2288,  1726,   563,  3041,  2653,
     565,  2306,  1765,  1194,  3385,  2297,  1910,  2640,  1104,  1105,
     841,   842,   557,  1735,  2640,  2683,  2684,  2654,  2787,  2252,
    1800,  2658,  2792,  1738,  1739,  3221,  3214,  3219,  2634,  2635,
    3220,  1617,  1104,  1105,  2164,  2674,  2675,  2369,  3298,  2233,
    2377,  2378,   894,   590,  2645,  2685,  1673,  1398,  1662,  3229,
     939,  1304,  1800,  1189,   578,  3248,   584,  1186,   949,   950,
    1082,  3081,  3729,  2756,  1341,  1104,  1105,  1104,  1105,  2400,
    1953,  1341,  1800,  1341,  3082,   841,   842,  2644,  1156,  2213,
    2342,  2791,  2751,  2645,  1950,  2352,  2774, -1294,  3083,  2345,
    2140,  2358,  2359,  -764,  1634,  2362,  2883,  1783,   841,   842,
    -478,   941,  -479,  1761,  3357,  1139,  2185,  2410,  2219,  2220,
    1789, -2219,  3066, -1755,  3185,  1611,  1940, -1336,  3817,  2393,
    1195,  1195, -1294,  3799,  3115,  2231,  3383,   951,  2307,  3347,
    1195,  2955,  2313,  2721,  1276,  1223,  2554,  1104,  1105,  1104,
    1105,  2206,  2249,  2250,   801,  2744,  2745,  2346,   961,  2588,
    3856,  1104,  1105,  1327,  1348,  2646,  1142,   547,  2271,  2272,
   -1336,  2274,  2757,  2937,  2277,  2278,  1213,  1200,  2281,  1214,
    2384, -1607,  1916,  2290,  3676,  1104,  1105,  2293,  2294,  2295,
    2296,  1104,  1105,   813,  2300,  2301,  3856,  2303,  2594,   520,
     504,  3533,  1121,  2312,  1104,  1105,  2316,  2317,  2318,  2319,
     895,  1874,  2557,  3081,  1104,  1105,  1783,  1142,  1312, -1629,
     953,  1142,  2638,  1438,  2401,  1611,  3082,  3133,  1083,  1272,
    1158,   595,  1104,  1105,  1229,   128,  1104,  1105,   519,  3739,
    3083,  2645,  1419,  3376,  1421,  1422,  1617, -1336,  1783,  2347,
     841,   842,  3459,  3417,  3655,  2364,  2365,  2366,  2367,   135,
    1284,  2731,  3421,  3396, -1448,   786,  2735,  3740,  1783,  1315,
    1104,  1105,  3615,   137,  2175,  3322,  1273,   609,  3377,  1438,
    1321,  2736,  3434,  1399,   528,  3126,   456,  3436,   529,  1758,
    1801,  3616,   581,   954,  2558,  3182,  1313,   814,  1234,  1610,
    2722,  1635,   586,  3500, -1448,  1104,  1105,  1418,  1150,  2013,
     505,  2314,  2331,   129,  1215, -2153,   548,   459,  2385,  1875,
    1106,  2348,  1801,  1107,  2176,  3067,  2141,   568,  2923,   574,
    3677,  2932,  1720,  2607,   610,  1723,  1439,  3466,  1316,  3486,
    1420,  2555,  1801,  1728,   743,  1464,  3186,  1106,   574,  1328,
    1107,  1141,  -560,  1612,   783,  3799,  2963,   781,  1042,  1344,
    2941,   568,  1345,   791,   815,  2186,  1611,  2647, -1629,   558,
    1740,  1741, -1336,   785,   872,   805,  1104,  1105,  1614,  1490,
    2938,  1124,  1491,  3753,  2256,  2257,  1611,  1787,  1763,  1104,
    1105,  2732,  1454,  2954,  1575,  1140,  2029,   558,   891,   802,
    1583,  1104,  1105,  3730,  1106,  1618,  1106,  1107,  2640,  1107,
     952,  1104,  1105,  2255,  2965,  2778,   908,  1604,  1365, -2153,
    1636,  3818,  2617,  1253,  3322,   568,  2058,   922,  2724,  2640,
    1344,  3521,  1860,  1345,  2380,   795,  2381,  2061,   558,   453,
    2064,  3323,  3189,   558,  1449,  1450,  1104,  1105,  1747,   947,
    3140,   558,   558,  1612,  1187,   611,   959,   922,  2528,  2193,
    2402,   568,  1104,  1105,  1367,  1489,   933,  3349,  3053, -1294,
    3070,   990,   942,  2953,  1503,   995,  1106,  2636,  1106,  1107,
    2657,  1107,  2659,  1367,  2142,  3754,  1516,  1517,  1518,  2670,
    1106,  2055,  1737,  1107,  2758,  1523,  2632,  1104,  1105,  1104,
    1105,  1788,  2682,  2308,   932,  2377,  2378,  2746,  2691,  2693,
    1910,  2140,  2349,  1152,  1106,   872,   896,  1107,  1951,  1043,
    1106,  2376,  1190,  1107,  2709,  2693,  2648,  3222,  2562,  3064,
    1104,  1105,  2598,  1106,  1084,   872,  1107,  3324,  3052,  1663,
     987,  2784, -2219,  1106,  1108,  3452,  1107,   822,  3632,  -764,
   -1336,  2177,  1277,  1789,  -560,  3698,  -478,  3299,  -479,  2893,
    2894,  1106,  2041,  1915,  1107,  1106,  3358, -2219,  1107,  2589,
    3077,  1108,  1765, -1336,  1367,  1104,  1105,  1101, -1336,  1103,
    3084,  1104,  1105,  3731,  3765,  1559,  1560,  1307,  2776,  2637,
    3323,  3208,  1104,  1105,  1612,  1108,   506,  1748,  3656,  1106,
    2743,  1749,  1107,  1146,   453,  1148,  2948,   922,   453,   568,
    1618,   453,   568,   558,  1612,  3378,  1268,  1724,  1104,  1105,
    3899,  2251,  3534,  1229,  -394,  3227,  3228,  3135,  1108,  1702,
    1108,  1147,  2669,  3231,  1106,  1151,  3530,  1107,  1155,  1620,
    3254,  2542,  1559,  1979,  2677,  3706,  1104,  1105,  1199,  3206,
    3207,  1229,  1133,  1134,  1135,  1136,  3201,  2791,  3169,   558,
    2791,  2791,  3173,  1104,  1105,  3160,  2332,   598,  1285,   568,
     558,  3804,  1599, -2154,   558,  1960,  1916,  2791,   784,  1220,
    1675,   558,  2956,  3325,  1104,  1105,   749,  2383,  3066,  1104,
    1105,  3230,  1654,  1767,  3188,  3326,  3247,  3250,  3252,  3253,
    1108,  3760,  1108,  3762,  3144,  1106,   968,  1669,  1107,  2640,
    3375,   806,   568,  -560,  1108,  1961,  2113,  2014,  1106,  3168,
    3078,  1107,  3084,  3172,  2749,  1209,  1104,  1105,  2018,  2019,
    1106,  2933,  2934,  1107, -2153,  2895,  1226,  2141,  1108,  1254,
    1106,   666,  3271,  1107,  1108,  2627,  3246,  1104,  1105,  2258,
     501,  3272,  2035,  2036,  3096,  1104,  1105,  1108,  2486,  2487,
    2761, -2153,  1258,  1240,  1104,  1105,  2190,  1108,  2256,  2257,
     114,  2809,  2810,  1340,  2784,  1106,  2287, -2154,  1107,  3837,
    3327,  3072,  1941,  1492,  2188,  1108,  1493,  1271,  3587,  1108,
    1878,  1106,  3079,  2192,  1107,  2218,  2195,  2196,  2074,  2826,
    2827,   558,  2927,  2030,  1370,   558,   500,  3788,   809,  2074,
    2380,  3658,  2381,  3879, -2274,   512,  1271,  3531,  1259,  1719,
    1719,  3747,  2449,  1108,  2161,  1985,  1106,   135,  1106,  1107,
    3271,  1107,   975,   983,  1787,  3685,  2577,  2847,  2848,  3272,
    2971,  2114,  2876,  3461,  3326,  1260,  2263,   969,  3291,  1104,
    1105,  2284,   558,  2628,   558,  2255,  1104,  1105,  1108,  1106,
    2485,  1202,  1107,  1600,  3748,  3591,  3576,  1298,  2162,  1565,
    2762,   584,   116,  1959,  1104,  1105,  2604,  1676,  2063,  3273,
    2065,  2377,  2378,  1308,  3502,  1601,  3756,  2605,  1372,  1043,
    2288,  3067,  2039,  1860,   925,  2142,  1309,  3368,  3369,   530,
    2962,  1779,  1043,  2614,  1106,  2389,  1603,  1107,  3532,   525,
    1106,  3363,  1373,  1107,  1104,  1105,  1218,  2595,  1426,  1344,
    1431,  1106,  1345,  2944,  1107,   690,  2390,  1104,  1105,  1108,
    3680,  3681,  1104,  1105,  1788,  2490,  2491,  1367,  2972,  3988,
    1104,  1105,  1108,   926,  1966,  3178,  2546,  1106,  1104,  1105,
    1107,  1022,  1552,  2896,  1108,  2078,   810,  1967,   533,   911,
    1203,  2484,   531,  1551,  1108,   568,  2042,  3273,  3388,  1977,
    1910,  2494,  3702,  3576,  3576,  1106,  2376,  3903,  1107,  1978,
    3749,  3686,  2048,  3080,  2966,  1661,   532,  3401,   666, -2277,
    1104,  1105,  1106,  2957,  1761,  1107,  1636,  1269,  1800,  1108,
    1789,  1689,   568,   535,  2136,  2137,  2612,  1607,  1104,  1105,
    1310,   969,   558,  1106,  1981,  1108,  1107,   927,  1106,  2115,
    3793,  1107,   558,  1551,  1104,  1105,  3097,  2053,  3712,  3693,
    1993,  2824, -1607,  1311,  2043,  1780,  2806,  1602,  3694,  2763,
    3077,  2178,  1261,  3402,   639,  3303,  3463,  1204,  1104,  1105,
    1108,  2918,  1108,  2286,   502,  1106,  1709,  1915,  1107,  1639,
    3963,  1642,  3965,   558,   550,  2001,  2606,  2005,  2382,  1690,
    -394,   970,  1104,  1105,  1747,   558,  1106,  2919,  1609,  1107,
    1646,   568,  3981,  1108,  1106,  1104,  1105,  1107,  3659, -2277,
     558,   558, -2154,  1106,  2075,  2689,  1107,  1761,  2006,  1783,
    1366,  1678,   644,  2779,  3757,  2075,   599,  3576,  3576,  1687,
    1710,  -186,  1551,   551,  1104,  1105,  1769,  4012,  4013, -2154,
    1104,  1105,   453,   453,   453,   558,   453,   558,  1108,  2764,
    1104,  1105,  1699,  3877,  1108,  3687,  1916,  1121,  1721,   453,
     553,   568,  2383,  2007,  1299,  1108,  3635,   453,  1942,  1703,
    1704,  1705,  2049,  1707,  1929,  1691,  3636,  1104,  1105,   605,
    2008,  1262,   912,   934,  3523,  3524,  1722,   558,  1364, -1630,
    1139,  1108,   690,  1367,  1727,  3660,   666,  1930,  1106,  1104,
    1105,  1107,  1263,  1844,  1783,  1106,  2012,  2258,  1107,   913,
    3078,  1706,    43,  1708,   655,  3576,  3592,  2678,  1022,  1108,
    2161,  3661,  1659,  1106,  1104,  1105,  1107,  2641,  1438,  2641,
    3576,   971,   568,   928,  2031,  2920,  1108,  1611,  1425,   597,
    2044,  3589,  1264,  1748,  3576,  1847,   558,  1749,   564,  3695,
     558,  2807,   559,  1736,  1799,   970,   562,  1108,   747,  2255,
    1104,  1105,  1108,  1106,  1660,  1877,  1107,  3916,  3916,  1104,
    1105, -2314,  2808,  2056,  1023,  1692,  1106,  2819,  1801,  1107,
    3468,  1106,  3087,  2146,  1107,   787,   671,  2679,   576,  1106,
    1269,  2147,  1107,  1711,   929,  1240,   930,  1106,  3576,  1108,
    1107,   568,  1097,   453,   453,   453,  1927,   453,  3403,  2284,
    3576,  3576,  1876,   988,  2829,   995,  2729,  1939,  1300,  2846,
    1108,  1104,  1105,  1104,  1105,  1104,  1105,   575,  1108,  1438,
    1923,  1924,  1925,  3634,  1747,  2830,  1124,  1108, -1630,  1106,
    3969,  1508,  1107,  3310,  1438,  3576,  1372,   934,  1104,  1105,
    3081,  1954,  2879,  2489,  3401,  3576,  3970,  1106,  1679,  2050,
    1107,    55,  2730,  3082,  1301,   788,  3446,  1104,  1105,  1551,
    1373,  3637,  2376,  1106,   116,  2051,  1107,  3083,  1372,  2680,
     690,  3576,  2868,  3576,  1104,  1105,   872,   841,  3215,  1043,
    1986,  1104,  1105,  3576,   587,   971,  2146,  1106,  2148,  2149,
    1107,  1788,  1373,  3576,  3127,  3576,  1022,  3576,  2080,  3629,
    3402,  2069,  2524,  3994,  3576,  3395,  1104,  1105,  2437,  2070,
    3408,  1106,  1108,  3576,  1107,  1929,  2321,   956,   957,  1108,
    3630,  2443,  2150,   789,  1106, -2314,  1958,  1107,  3576,  3576,
    3384,   586,  1512,  1965,  1104,  1105,  3128,  1108,  1930,  2047,
     590,  1465,  1104,  1105,  3576,  3576,   592,  1535,  3395,  3576,
    1178,  2825,  1074,  1106,  2458,  1612,  1107,  1104,  1105,  1106,
    1140,  1680,  1107,  3080,  1126,  1127,  3891,   698,  3809,  1106,
    2069,   131,  1107,  1748,   132,  1104,  1105,  1108,  2904,  1104,
    1105,  2071,  2232,  3846,  1104,  1105,  1104,  1105,  2285,   568,
    1108,  1968,  1104,  1105,   568,  1108,  1106,  2146,  3409,  1107,
     558,  2286,  2086,  1108,  1969,  3447,  2121,  2091,  2091,  1976,
    2091,  1108,  1104,  1105,   594,  2500,  3638,  1989,  1106,  3223,
     513,  1107,  3224,   558,  1179,  1990,   558,  1915,  2383,  1381,
    1382,  1104,  1105,  2382,  3410,  3462,   467,  1714,   568,   568,
     558,   558,   606,  1106,  1357,  1358,  1107,   608,  2091,  2091,
    2091,   739,  2135,  1108,  1104,  1105,  1104,  1105,  1104,  1105,
    1104,  1105,  2154,   744,  2122,  1980,  2173,  1994,  1180,  1104,
    1105,  1108,  3292,  2090,  2090,  2184,  2090,  1980,  3920,  1106,
     782,  1416,  1107,  1181,  3316,  1998,  2180,  1108,  1106,  2112,
    2123,  1107,  1209,  1129,  1130,  1131,  1132,  1133,  1134,  1135,
    1136,  1999,  3155,  1104,  1105,  2641,  1226,  2139,   794,  1715,
     558,  1108,  2148,  2149,  2090,  2090,  2090,  1401,  1957,  1141,
    2238,  3156,  2201,  1242,   131,  2000,   241,   132,   243,   558,
    2924,  1104,  1105,   673,   800,  1108,  2668,  1104,  1105,  3744,
    1106,  3745,  1106,  1107,  1106,  1107,  2882,  1107,  1108,  2004,
    3157,  1271,  3479,  1973,  1141,   798,  2124,  1104,  1105,  2222,
    1393,  1394,  2009,  2926,   666,  1571,  3075,  1106,  2229,  2230,
    1107,  2287,  1982,  1141,  2202,  1955,  2194,  1108,  2239,  2234,
    2235,  2236,  2237,  1108,  2245,  2246,  1106,  3089,  3090,  1107,
     810,  2017,  2546,  1108,  2370,  2212,   886,  2022,  3603,  3604,
    3605,  3606,   906,  1106,  2240,   907,  1107,  2037,  3102,  1551,
    1106,  1104,  1105,  1107,  1956,  1141,  3911,  1719,  1402,  2093,
    1108,  2094,  1403,   915,  2492,   785,  2315,   924,  2125,   934,
     841,   842,  2433,  1404,  2781,  1106,   945,  2433,  1107,  1766,
     962,  2330,  1108,  1104,  1105,  2612,  1104,  1105,   967,  3480,
    3481,   963,  2340,   997,  3482,  3483,  2797,  1104,  1105,  2156,
    2157,  2158,  1551,  1106,  1983,  1506,  1107,  1108,  1995,  1141,
    2241,  1106,  2343,  2344,  1107,  2351,  2689,  2353,  2354,  2355,
    2356,  2357,  2065,   998,  2360,  2361,  1106,  1104,  1105,  1107,
     568,  2468,  2121,  1551,   114,  2386,  2203,   999,  3577,  1001,
    1716,  2958,  2417,  1108,  1106,   558,   558,  1107,  1106,  1996,
    1141,  1107,  1108,  1106,  2204,  1106,  1107,  2803,  1107,  1997,
    1141,  1106,  2482,  1141,  1107,  2205,  2804,  1002,   568,   956,
     957,  1003,  2969,   568,  1121,  1572,  1903,  1006,  2238,  2002,
    1141,  1106,  2242,  2974,  1107,  1007,  2976,  1008,   690,  3084,
    2122,  2247,  2248,  1405,  2503,  1009,  3713,  1104,  1105,   896,
    1106,  2478,  1141,  1107,  1108,  1010,  1108,  3365,  1108,  3216,
    3026,  2405,  2407,  1011,  1022,  1012,  2123,  1144,  2811,  1145,
    2815,   872,  2875,  1106,  2629,  1106,  1107,  1106,  1107,  1106,
    1107,  1108,  1107,  1013,  3415,  3416,  2239,  1631,  1106,  2206,
    1632,  1107,  1014,  1633,  1194,  2816,  1017,  3419,  3209,  2382,
    1108,  3212,  3213,  3422,  1019,  1800,  1020,  2470,   568,  2126,
    1149,  3806,  2240,  1160,  2817,  3259,  2917,  1108,  3225,  1021,
    1078,  1025,  1106,  2845,  1108,  1107,  3438,  2506,  2507,  3440,
    2879,  2818,  2124,  2501,  1406,   841,   842,  2472,  2820,  1026,
     568,  1027,  2433,  3703,  2580,  2585,  1028,  1551,  2121,  1108,
    1106,  1903,  2783,  1107,   884,   885,  1106,   888,  3831,  1107,
    4004,  3907,  1177,  2823,  1029, -1336,  1783,  2821,  1141,  3718,
    1030,  3964,  3721,  3722,  3723,  3724,  1106,  1108,  2241,  1107,
    2202,  2885,  2886,   133,  1031,  1108,  2623,  2433,  1032,   457,
     458,  2828,  2978,  2979,  2207,  1182,  2532,   741,   742,  2831,
    1108,   745,   746,  1124,  2125,   748,  2122,   750,  1033,   507,
    3065,  2979,  1573,  2547,  2833,   514,  1034, -1336,  1108,   518,
    1800,  1195,  1108,  2243, -1607,  3112,  1141,  1108,  1574,  1108,
    1106,  2566,  2568,  1107,  1770,  1108,  2835,  1037,   568,  2372,
     568,   568,  1175,  2837,  1038,  1771, -1336,  2565, -1336,  2838,
    2242,   900,   901,  2208,   902,  1108,   903,  2503,  3307,  3130,
    3131,  1044, -1336,  3264,  3265,  1106,  1903, -1336,  1107,  2839,
     825,  3823,  3824,  1552,  1108,  1045,  1106,  1046,  1904,  1107,
    3836, -1336,   568,   568,  1611,  2503,  1903, -1336,  3107,  3295,
    3304,  1783,  1047,  1194,  1048, -1336,  1049,  1108,  3825,  1108,
    1050,  1108,  2203,  1108,  1051, -1336,  1106,  3311,  1141,  1107,
     579,  3108,  1108,  3109,  1184,  3309, -1336,  3315,  2643,  1052,
    2204, -1336,  2330,  1054,  1401,  1192,  3317,  2655,  1121,  2330,
   -1336,  2205,  2330,  2665,  1367,  1056,  2330,  1057,  2664,  3321,
    1141,  1126,  1127,  3334,  3335,  1058,  1108,  1059,  2664,  1905,
    2330,  2330,  1060,   568,  2372,  2686,  2666,  2667,  1061, -1607,
    2330,  2697,  1552,  1062, -1336,  1801,  3978,  2699,  2700,  1063,
    3826,  1064,   558,  1065,  1108,  1066,  1106,  3449,  2248,  1107,
    1108,   568,  2696,   826,  1067,  2701,  1000,  2702,  2330,  2720,
   -1336,  3464,  3465,  1193,  3318,  2126,  3522,  3131,  1772,  1068,
    1108,  2238,  1069,  1904,  2690,  2206,  1783,  3525,  3465,  1611,
    3613,  3614, -1336,   118,  3319,  1070, -1336,  3648,  3649,  1071,
    1195, -1336,  3653,  3465,  2703,  1402,  1783,  1072,  2202,  1403,
    1076,  2202,  1077,   872,  3654,  3465,  3664,  3665,  2698,  1080,
    1404,  2243,  1081,  2742,  1201,  2704,  3095, -1336,  3666,  3667,
    1085, -1336,   827,  1089,  1108,  3997,  3998,   558,  2330,  2239,
    1090, -1336,  1091,   114,  3668,  3667, -1336,  1773,  3320,  1159,
    1129,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  2705,  1208,
    1801,  3847,  3649,  1906,  3113,  2240, -1336,  3848,  3649,  1108,
    1092,  1774,  3853,  3131, -1336, -1336,  1442,  1443,  1444,  1207,
    1108,  3829,  3829,  3600, -1336,  3882,  3883,  1124,  1455,  1471,
    2207,  2421,  1612,  3889,  3890, -1336, -1336,  1093,  1904,  1143,
   -1336,  3931,  2741,  2766,  1611,  3517,  3518,  2868,  1221, -1336,
    1108,  3278,  4040,  4041,  1541,  1541,  2422,  1232,  1904,  1509,
    2238,  1233,  1513,  2692,  1611,  3297,  1121,   115,  3302,  1775,
    2203,  2241,  1237,  2203, -1336,  1236,  1104,  1105,   872,  1240,
    1405,  3827,  1531,  1532,  1243,   116,  1536,  3232,  2204,  2208,
    2086,  2204,  1199,   568,   568,   568,  1539,  2423,  1251,  2205,
    2424,  3540,  2205,   558,  1252,  1553,  1554,  3540,  2425, -1336,
    3526,  3527,  3147,  3148,  3117,  3118,   568,  1257,  2239,  1552,
    1108,  1256,  1475,  3332,  3333,  1269,  1278, -1336,  3233,  1905,
    1286, -1336,  3234,   568,   568,   568,  1279,  1283, -1336, -1336,
   -1336,  1551,  1280,  2242,  2240,  1281,  2903,  1282,  1305,  3300,
     117,  1776,  2905,  1306,  2907,  2433, -1336,  1612, -1336,  1287,
     568,  1320,  2902,  1322,  1467,  1468,  1469,  1470,  1471,  2112,
   -1336,  1406,  1323,  2206,  3235,  1325,  2206,   118, -1336, -1336,
     539,  1330, -1336, -1336,  2750,  2706,  1335,  1341,  1347,  1351,
     751,  1349,  1355,   872,  1354,  3366,  1359,  2930,  3370,  1362,
    1288,  1410,  1363,  1411,  1412,  1289,  1415,  1417,   797,  1418,
    2241,  1423,  1424,   872, -1336,   808,  1432,  1476,  1434,  1139,
    1438,  1479,   540,  1457,  1445,  1459,  2707,   119,  1480,  1084,
    1495,  1505,  1506,  2330,  3435, -1336,   892,  3437,  2664,   828,
     829,   830,   831,   832,   833,  1124,  1507,  1566,  1549,  1561,
    1588,   568,  1582,  1615,  2330,  -559,   834,  1608,  1472,  1473,
    1474,  1475,  1616,  1906,  2258,  1621,  1625,  1624,  2964,  2664,
    1626,  1628,  1612, -1336,  3816,  2259,  2967,  1629,  2207,  1647,
    2664,  2207,  2242,  2664,  1653,  1651,  1648,  3469,  1657,   541,
    1665,  1666,  1612,  1667,  -698,   558,  1131,  1132,  1133,  1134,
    1135,  1136,  1674,  1481,  2980,  1697,  1668,   558,  1682,  1688,
    1701,  3036,  1725,  1790,  2426,  1729,  1730,   453,  1731,  2368,
    1732,  3046,  1742,  1734,  2340,  1744, -1336,  1746,  1759,  1871,
    1121,  3051,  1768,  3489,  2243,  1367,  1879,  2208, -1336,  1880,
    2208,  1551,  1290,  3061,  3042,  1881,  1882,   120,  1883,  1898,
     558,  1884,  1483,  1899,  3761, -1336,  1476, -1336,  1477,  1478,
    1479,  1885,  1024,  1075,  1079,  1886,  -559,  1480,  1887,  1888,
    1889,  1890,  2260,  2981,  1891,  1242,  3816, -1336, -1336,  1892,
    1893, -1336, -1336,  1126,  1127,  3152,   956,   957,  1894,  1120,
    1895,  1896,  3236,  3542,   478,  1897,  1918,  1917,  3237,  1920,
    1932,  2623,  1933,  1372,  1944,  1106,  1816,  1817,  1107,  1922,
     121,  1291,  1937,  1791,  1964,  1972,  3063,  1946,  1947,  1111,
    1112,  3839,  3840,  1948,  3842,  3111,  1963,  1373,  -559,  1970,
    1971,  1980,  1974,  2566,  1984,  3238,  2046,  2258,  -684,  -684,
    1819,  3816,  1481,  1988, -1057,  2427,  1992,  -684,  2259,  2565,
     479,  1822,  2010,  1113,  1943,  2011,  2016,  2532,  2020,  1823,
    2021,  2032,  1114,  2033,   122,  2034,  -852,  2052,  1136,  2547,
    3142,  1292,   568,  2243,  2062,  2082, -1174,   480,  2081,  1825,
    1484,   568,  2109,  2106,  1121,  2118,  2130,  2501,  2133,  2155,
    1482,  1483,  1486,  1341,  2169,  2181,  1826,   568,  3239,  1115,
    2183,  3578,  2187,  2189,  2428,  2173,  2210,   481,  2211,  1124,
    1116,  3669,  1129,  1130,  1131,  1132,  1133,  1134,  1135,  1136,
     542,  2214,  1552,  1987,  1831,  2217,  4032,  1991,  3893,  2215,
    3894,  3895,  2223,  2429,  2330,  2224,  2225,  1117,  2226,  -559,
    2221,   543,  2330,  1551,  2664,  2260,  2227,  2095,  2228,  2258,
    2015,  2270,  2279,  1552,   482,  2261,  2275,  4032,  2664,  2276,
    3627,  2280,  2330,  2856,  2857,  2858,  1551,  2096,  -559,  1792,
     544,  2282,  2433,  1293,  1551,  2289,  1372,  2283,  2291,  1793,
    1122,  2097,  2292,  2299,  2333,  1794,  2371,  2298,  2305,  1834,
    2098,  2392,  1118,  2304,  3240,  2408,  2310,  1835,  2311,  2415,
    1373,  2411,  1123,  2890,  2891,  2892,  1294,  2420,  2438,  2439,
    2440,  2070,  1836,  1813,  1467,  1468,  1469,  1470,  1471,  1484,
    1814,  1815,   545,  2450,  2505,  2451,  2463,  2479,  2480,  1108,
    1485,  1486,  1816,  1817,  2498,  2481,  3354,  2099,  2100,  2488,
    2497,  2510,  2511,  3261,  2508,  2509,  2512,  1126,  1127,  2522,
    2518,  2262,  2523,  2520,  3290,  2525,  2533,  2526,  2537,  2549,
    2550,  3282,  1818,  1124,  1837,  2101,  1819,  1820,   568,   -63,
    1795,  1821,  2551,  2552,   483,  2162,  2161,  1822,  2569,  2570,
    2571,  1838,   956,   957,  2592,  1823,   618,  2593,  2600,  2596,
    3627,  2601,  1824,  3803,  2602,  2618,  3801,  2625,  4026,  2626,
    2712,  2671,  2673,  2728,  2734,  1825,  2738,   461,  1472,  1473,
    1474,  1475,  3343,  2741,  2747,  2740,  2748,  1552,  2753,  1341,
    2623,  2754,  1826,  2102,  2755,  1844,  2784,  -559,  1761,  1827,
    1828,  2752,   568,  1842,  1121,  1843,  1829,   484,  1938,  2788,
    2793,  -559,  1845,  2794,  1830,  2795,  2796,  2798,  -791,  2799,
    1831,  2844,  2849,  3389,  1125,  2842,  2852,  2859,  1796,  2861,
     639,  2854,  2865,   618,  3364,  1213,  2870,  2874,  2873,  2887,
    2881,  2884,  2889,  3290,  2103,  3398,  2900,  1832,  1131,  1132,
    1133,  1134,  1135,  1136,  2901,  2906,  2914,  2433,  2925,   462,
    2931,   485,  2935,  2936,  3040,   486,  2939,  2951,  2952,  3037,
    2961,  1126,  1127,  3043,  2970,  1851,  1476,  3044,  1477,  1478,
    1479,   643,  1128,  1833,   487,  1834,   568,  1480,   644,  3048,
    -732,  3055,  3050,  1835,  2262,  3057,  -401,  3062,  2146,  3071,
    3389,  3073,  3091,  3424,  3088,  3098,  3110,   639,  1836,   488,
    3099,  3441,  3152,  3123,   648,  3134,  3145,  3153,  3445,  3125,
    3161,  3162,  3165,  3166,   489,  3170,  3171,  3191,  1852,  3183,
    3190,  3192,  3203,  3061,  3210,  3255,  3258,   463,  3450,  2331,
    3260,  3262,  3269,  1853,  3279,  3283,  1854,  3880,  1121,  3280,
    3284,  3286,  3293,   568,  3249,  3294,  3295,  4038,   643,  3296,
    1837,  3305,  1481,  3306,  1855,   644,  3308,  3312,  3313,  3617,
    -559,  1856,  3330,  1121,  3337,  3338,  3314,  1838,  3339,  3341,
     655,  1839,  1857,  1124,  3348,  2904,  3335,  3350,  3801,  3355,
    3351,   648,  3954,  3356,  3493,   754,   755,  3618,  3359,  3361,
    1129,  1130,  1131,  1132,  1133,  1134,  1135,  1136,   568,  3246,
    1482,  1483,  3143,  1816,  1817,  3362, -1257,  1840,  3374,  3428,
   -1262,  3429,  1841,  3386,  3430,  3432,  3387,  3515,  3414,  1842,
    3420,  1843,  3418,  3433,  2773,  3439,   666,  1844,  1845,  3290,
    3290,  3954, -1607,  3454,  2003,  -684,  -684,  1819,  3470,  3453,
    3472,   670,   671,  3473,  -684,  3467,  3536,   655,  1822,  3474,
    3627,  3475,  3476,  3487,  3494,  3503,  1823,  1846,  3506,  2812,
    4021,   756,  3507,  3509,  3529,  3543,  3511,  3513,  3544,  1847,
    1848,  1849,  1850,  3545,  3304,  3598,  1825,  3579,  1162,  3586,
    3599,  3608,  3602,  3609,  3645,  3641,  3611,  3643,  3650,   757,
    1341,  1851,  3647,  1826,  4021,  3657,  3671,  3619,  3584,   558,
    -271,  3689,   758,   666,  3699,  3704,  3717,  3716,  3290,  3719,
     464,  1126,  1127,  3692,  3425,  3691,  3701,  1124,   670,   671,
    3707,  1831,  3720,  3725,   759,   737,   760,  3728,   465,  1484,
    3732,  3734,  3735,  3736,  3737,  3743,  2724,   761,  3755,  3768,
    1485,  1486,  1124,  1770,  1852,  3765,  -289,  3794,  3795,  3796,
    3797,   737,  3808,  3833,  1771,  1163,  3811,   762,  3841,  1853,
    3843,  3844,  1854,  3849,   466,  3585,  -484,  3850,   467,  3851,
    3859,  3860,  3620,  3852,  3864,  3870,  3871,  3873,  3896,  3899,
    1855,   763,  3904,  3906, -2074,  3908,  1834,  1856,   764,  3621,
    3912,  3675,  3918,  3798,  1835,  3909,  3682,  3923,  1857,  3929,
    3924,  3930,  3936,  3949,   468,  3928,  3950,  3958,  3960,  1836,
     690,  3622,   469, -1410,  3390,  1164,  3961,  3391,  3962,  3966,
    3967,  3971,  2394,  3976,  3980,  3977,  3984,   765,   696,  3992,
    3996,  3986,  3989,   698,  4000,  3990,   699,  1165,  4002,  4009,
    4024,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  4033,  4027,
    4037,  1552,   558,  2504,  -791,  1126,  1127,  3493,  4010,  3684,
    3268,  1837,  2363,  2633,  3863,   737,   980,  3270,  3696,  3872,
     737,  3832,  3581,  1353,  3919,  3455,  3458,  4043,  1838,  3863,
    1126,  1127,  3583,  4005,  4014,  3392,  3393,   690,  3515,  3933,
    3515,  3390,  3746,  3874,  3391,  3556,  3857,  3934,  3917,  3557,
     737,  3559,  3560,  3869,  3562,   696,  3563,  1772,  3759,  3868,
     698,  3564,  3565,   699,  3566,  3567,   737,  3570,  3711,  3571,
     792,  3769,  1414,  3572,  1812,  2073,  2695,  3588,  1858,  2869,
    1842,  3132,  1843,  1166,  3715,  3610,  3812,  3922,  3344,  1845,
    3885,  1167,  3927,  3953,  3727,  1902,   607,  2320,  3285,   766,
    3520,  3204,  3054,  2771,  2327,  3193,  2725,   737,   737,   737,
     737,  2649,  3392,  3393,  3217,  3218,   872,   568,   767,   737,
    3256,  1168,  3538,  3431,   768,  3838,  1773,  3822,  3397,  3423,
    3196,  3623,   769,  2503,  1129,  1130,  1131,  1132,  1133,  1134,
    1135,  1136,  3159,  3758,  3863,  3537,  1931,   956,   957,  3752,
    1774,  2404,  1851,  3663,  3948,   770,  3705,  3597,  1169,  1129,
    1130,  1131,  1132,  1133,  1134,  1135,  1136,  2324,   771,   772,
    3541,  2715,  3195,  2199,  2534,  3400,  1745,  2433,  3194,  1900,
    2138,  1371,  1170,  2864,  1247,  3926,  2553,  2521,   904,  1004,
    3628,  2160,  3973,  2851,  3114,  2436,  1504,  3167,  2613,  3652,
    1171,  1552,  3897,   132,  3863,  1852,  3863,  3519,  1775,   773,
    3049,  3898,  1542,  3991,  3199,  2495,  3516,  1456,  2710,  1036,
    1853,  3995,  3863,  1854,  3830,  3505,  2560,  2406,  1670,   568,
    3137,  2517,  3886,  3887,  2540,  1053,  3346,  3138,   774,  4042,
    3177,  1855,  3878,  2412,  2340,  2340,  1936,   893,  1856,   996,
    2191,   878,  1645,  3863,  3863,  1713,  2083,  2977,  4036,  1857,
     775,  3124,   776,  3738,  3952,  3974,  4044,  3845,  3141,  3427,
    1686,  2170,  2922,   568,  3360,  3508,  3163,  2117,   821,  1099,
    3601,   568,  1235,  3607,  1638,   823,  2853,  1672,  1921,  1239,
    1776,  2477,  2841,  1677,  1557,   601,   602,   984,  3938,   985,
     986,     0,     0,     0,     0,  3946,     0,     0,     0,  2395,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4039,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   737,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3982,     0,     0,     0,     0,
    3987,  1379,  1380,  1381,  1382,  1383,  1384,     0,  1385,  1386,
    1387,  1388,  1389,  1390,  1391,     0,  1392,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4022,   737,   737,     0,     0,     0,
       0,     0,     0,  1552,   737,   737,   737,   737,   737,   737,
     737,     0,     0,     0,     0,   737,     0,     0,   737,   737,
       0,   737,   568,   737,     0,     0,  1552,   737,  4022,     0,
     737,   737,   737,   737,  1552,   737,   737,     0,     0,     0,
       0,     0,     0,   737,   737,     0,   737,   737,   737,   737,
     737,     0,   737,     0,   737,   737,   737,   737,   737,   737,
     737,   737,   737,   737,   737,     0,     0,   737,   737,     0,
     737,     0,   737,     0,     0,     0,   737,     0,   737,   737,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     737,   737,     0,     0,  1393,  1394,   737,     0,     0,   737,
       0,     0,     0,     0,     0,     0,   737,   737,   737,     0,
     737,     0,  1378,     0,     0,     0,     0,   737,   737,   737,
       0,   737,   737,   737,   737,   737,     0,   737,   737,   737,
     737,   737,   737,   737,   737,     0,     0,     0,   737,   737,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1436,  1437,     0,     0,     0,     0,
       0,     0,     0,  1447,  1448,     0,     0,  1451,  1452,  1453,
       0,     0,     0,     0,  1458,     0,     0,  1460,  1461,     0,
    1462,     0,  1463,     0,     0,     0,     0,     0,     0,  1497,
    1498,  1499,  1500,     0,  1502,     0,     0,     0,     0,     0,
       0,     0,  1510,  1511,     0,  1514,  1515,     0,     0,     0,
       0,  1519,     0,  1520,  1521,  1522,     0,     0,  1525,  1526,
    1527,  1528,  1529,  1530,     0,     0,  1533,  1534,     0,  1537,
       0,  1538,     0,     0,   737,  1543,     0,  1547,  1548,     0,
       0,     0,   737,     0,     0,     0,     0,     0,     0,  1555,
    1556,     0,     0,     1,     2,  1099,     0,     0,  1562,     0,
       0,     0,     0,     0,     0,  1567,  1568,  1569,     3,     0,
       4,     0,     0,     0,     5,     0,     0,     0,     0,     0,
       0,   839,     0,     0,     0,     0,     0,     0,     6,     7,
       0,   801,   840,     0,     0,     8,     0,     0,  1605,     9,
      10,     0,     0,     0,     0,     0,     0,     0,     0,   819,
     755,     0,    11,     0,     0,   841,   842,     0,     0,     0,
       0,     0,     0,     0,     0,   843,     0,   844,    12,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   845,     0,   846,     0,   847,     0,    13,     0,
       0,     0,     0,     0,   848,     0,    14,    15,    16,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    17,    18,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    19,     0,     0,     0,   756,     0,     0,     0,     0,
       0,     0,     0,    20,     0,     0,     0,     0,     0,     0,
   -1607,   849,     0,  1685,     0,   850,     0,     0,   851,    21,
       0,  1700,     0,   757,     0,     0,     0,     0,     0,     0,
       0,     0,   755,     0,    22,     0,   758,     0,     0,    23,
       0,     0,    24,   737,   852,     0,   853,     0,     0,     0,
       0,   854,     0,   855,     0,     0,     0,     0,   759,     0,
     760,     0,     0,     0,     0,    25,     0,    26,     0,     0,
       0,   761,     0,     0,     0,   856,   857,     0,     0,     0,
     858,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,   762,     0,     0,     0,     0,     0,     0,   859,     0,
      28,     0,     0,     0,    29,     0,     0,   756,     0,     0,
       0,     0,     0,     0,     0,   763,     0,     0,     0,   860,
       0,     0,   764,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   757,     0,     0,     0,     0,
       0,     0,   737,   737,   737,     0,   861,     0,   758,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   737,     0,
       0,   765,     0,     0,     0,     0,     0,     0,     0,     0,
     759,     0,   760,     0,     0,     0,     0,     0,   862,     0,
     737,     0,     0,   761,     0,     0,   737,     0,   863,   737,
      30,   737,     0,     0,     0,     0,     0,   737,     0,   737,
     737,     0,     0,   762,     0,     0,     0,   864,     0,     0,
      31,     0,  1949,     0,     0,     0,     0,     0,     0,     0,
      32,     0,     0,     0,     0,     0,     0,   763,     0,     0,
      33,   865,     0,     0,   764,     0,     0,     0,     0,     0,
       0,     0,   866,   867,     0,     0,   868,   869,     0,     0,
      34,     0,     0,    35,     0,    36,     0,     0,    37,     0,
     737,    38,     0,    39,     0,     0,     0,     0,    40,     0,
      41,     0,     0,   765,     0,     0,     0,    42,     0,     0,
       0,     0,    43,   766,     0,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,    45,     0,     0,     0,    46,
       0,     0,   767,     0,     0,   870,     0,     0,   768,     0,
       0,  2024,  2026,  2028,     0,     0,   769,   871,     0,     0,
       0,     0,    47,     0,     0,     0,    48,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   770,
       0, -2100,     0,     0,     0,   872,     0,     0,     0,  2054,
       0,     0,   771,   772,     0,     0,     0,     0,  2059,     0,
    2060,     0,   873,     0,     0,     0,     0,     0,    49,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      50,     0,     0,     0,    51,     0,     0,    52,     0,     0,
       0,     0,    53,   773,     0,   766,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1816,  1817,     0,
       0,     0,     0,     0,   767,     0,     0,    54,     0, -2100,
     768,     0,   774,     0,     0,   874,     0,     0,   769,  2134,
       0,    55,     0,     0,     0,     0,     0,     0,     0,  -684,
    -684,  1819,     0,     0,   775,     0,   776,     0,  -684,     0,
       0,   770,  1822,     0,     0,     0,     0,     0,     0,     0,
    1823,     0,     0,     0,   771,   772,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   737,
    1825,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1341,     0,     0,  1826,     0,     0,
       0,     0,     0,     0,     0,   773,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1831,     0,     0,     0,     0,
       0,     0,     0,     0,   774,     0,     0,     0,     0,   737,
       0,     0,     0,   737,     0,     0,     0,     0,   737,   737,
       0,     0,     0,     0,     0,     0,   775,   737,   776,     0,
     737,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     737,     0,   737,   737,     0,   737,   737,   737,   737,   737,
       0,     0,   737,     0,     0,     0,     0,     0,     0,     0,
    1834,   737,     0,     0,     0,     0,     0,     0,  1835,   737,
       0,   737,     0,   737,   737,   737,   737,     0,     0,     0,
     737,   737,   737,  1836,     0,     0,     0,   737,   737,   737,
       0,   737,     0,   737,     0,   737,     0,   737,     0,   737,
       0,     0,     0,     0,   737,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   737,     0,     0,     0,  2341,     0,
       0,   737,     0,     0,   737,     0,     0,     0,     0,     0,
     737,     0,     0,   737,     0,  1837,     0,   737,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1838,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2414,     0,
       0,     0,  2416,     0,     0,     0,     0,  2418,  2419,     0,
       0,     0,     0,     0,     0,     0,  2434,     0,     0,     0,
       0,     0,     0,     0,  1842,     0,  1843,     0,     0,  2441,
       0,  2442,     0,  1845,  2444,  2445,  2446,  2447,  2448,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2452,     0,     0,     0,     0,     0,     0,     0,  2453,     0,
    2454,     0,  2455,  2456,  2457,     0,     0,     0,     0,  2460,
    2461,  2462,     0,     0,     0,     0,  2464,  2465,  2466,     0,
    2467,     0,  2469,     0,  2471,     0,  2473,     0,  2474,     0,
       0,     0,     0,  2475,     1,     2,  1851,     0,     0,     0,
       0,     0,     0,  2483,     0,     0,     0,     0,     0,     3,
       0,     0,     0,     0,     0,     5,     0,     0,     0,  2493,
       0,     0,  2496,     0,     0,     0,     0,     0,     0,     6,
       7,     0,     0,     0,     0,     0,     8,     0,     0,     0,
       9,    10,     0,     0,     0,     0,     0,     0,     0,  1852,
       0,     0,     0,    11,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1853,     0,     0,  1854,     0,    12,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1855,     0,     0,     0,    13,
       0,     0,  1856,     0,     0,     0,     0,    14,    15,    16,
       0,     0,     0,  1857,     0,     0,     0,     0,     0,    17,
      18,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    20,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    22,     0,     0,     0,     0,
      23,     0,     0,    24,     0,     0,  1816,  1817,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,     0,    26,     0,
       0,   737,     0,     0,     0,   737,     0,     0,     0,     0,
    1819,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,  1822,     0,     0,     0,     0,     0,   737,   737,  1823,
       0,    28,     0,     0,     0,    29,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   737,     0,  1825,
       0,     0,     0,     0,     0,     0,   737,     0,   737,     0,
     737,     0,     0,  1341,     0,     0,  1826,     0,     0,     0,
       0,     0,     0,     0,     0,   737,     0,     0,     0,     0,
     737,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1831,     0,     0,     0,     0,     0,
       0,     0,   737,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   737,     0,     0,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,     0,     0,     0,  1834,
     737,    33,     0,     0,   737,     0,     0,  1835,     0,     0,
    2780,     0,     0,     0,  2782,     0,     0,     0,     0,     0,
       0,    34,  1836,     0,    35,     0,    36,     0,     0,    37,
       0,     0,    38,     0,    39,     0,  2801,  2802,     0,    40,
       0,    41,     0,     0,     0,     0,     0,   737,    42,     0,
       0,     0,     0,    43,     0,     0,  2822,     0,     0,     0,
       0,    44,     0,     0,     0,  2832,    45,  2834,     0,  2836,
      46,     0,     0,   737,  1837,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1838,     0,    47,     0,     0,     0,    48,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2860,     0,     0,  2982,  2983,     0,     0,     0,     0,
    2984,     0,  2985,     0,  2986,  2987,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    49,
    2988,     0,     0,  1842,     0,  1843,     0,     0,     0,     0,
       0,    50,  1845,     0,     0,    51,     0,     0,    52,   737,
     737,     0,     0,    53,     0,     0,     0,     0,     0,  2912,
       0,     0,     0,  2916,     0,     0,     0,     0,     0,     0,
       0,  2989,     0,     0,  2990,     0,     0,     0,    54,     0,
       0,     0,  2991,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    55,     0,     0,     0,     0,     0,     0,  2992,
       0,   737,     0,     0,     0,  1851,  2945,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2993,     0,     0,     0,
       0,     0,     0,     0,     0,   737,   737,     0,   737,     0,
       0,     0,  2950,     0,     0,     0,     0,   737,  2994,     0,
    2995,     0,   737,     0,     0,   737,     0,   737,   737,     0,
       0,     0,  2996,  2997,     0,     0,     0,     0,  1852,     0,
       0,     0,     0,     0,     0,     0,   737,     0,     0,     0,
       0,     0,     0,  1853,     0,     0,  1854,   737,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2998,     0,  1855,     0,     0,     0,   737,     0,
       0,  1856,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1857,     0,     0,     0,     0,     0,  3038,  3039,
    2999,     0,     0,     0,     0,     0,     0,   737,     0,  3000,
    3001,     0,  3002,     0,     0,     0,     0,     0,     0,     0,
       0,   737,     0,     0,     0,     0,     0,     0,     0,  2713,
       0,     0,     0,     0,     0,     0,  1814,     0,     0,   737,
       0,  3003,  3004,  3005,     0,     0,     0,     0,  1816,  1817,
    3076,     0,     0,     0,     0,     0,     0,     0,     0,  3006,
    3007,  3008,     0,     0,     0,  3009,     0,     0,  3010,     0,
       0,     0,     0,     0,  3093,  3094,     0,     0,  1818,     0,
       0,     0,  1819,     0,  3011,  3012,  3101,     0,     0,     0,
       0,  3103,     0,  1822,  3104,     0,  3105,  3106,     0,     0,
       0,  1823,     0,     0,     0,     0,     0,     0,  1824,     0,
       0,     0,     0,     0,     0,     0,     0,  3013,  3014,     0,
       0,  1825,     0,     0,     0,     0,  3120,     0,     0,     0,
       0,     0,     0,     0,     0,  1341,     0,     0,  1826,     0,
       0,  3015,     0,     0,     0,  1827,     0,  3120,     0,     0,
       0,     0,  2714,     0,     0,     0,     0,     0,     0,     0,
    1830,     0,     0,     0,     0,     0,  1831,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3016,     0,
    3164,     0,  3017,  1832,     0,     0,     0,     0,     0,     0,
       0,     0,  3018,     0,     0,     0,     0,     0,  3120,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1834,     0,   737,     0,     0,     0,     0,     0,  1835,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3019,     0,  1836,  3020,     0,     0,  3021,  3022,
    3023,  3024,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   737,   737,     0,     0,     0,     0,     0,     0,
       0,   737,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3025,  3026,     0,     0,     0,  1837,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3027,  1838,     0,     0,     0,  1839,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1841,     0,
       0,     0,     0,     0,     0,  1842,     0,  1843,     0,     0,
       0,     0,     0,     0,  1845,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3120,     0,     0,     0,     0,     0,   737,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1848,     0,     0,     0,
       0,     0,     0,   737,     0,     0,     0,     0,     0,     0,
       0,  3372,  3373,     0,     0,     0,     0,  1851,   737,     0,
    2945,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   737,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1852,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1853,     0,     0,  1854,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1855,     0,     0,     0,
       0,     0,  3574,  1856,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1857,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3471,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   737,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   737,
       0,     0,  3120,     0,     0,     0,     0,     0,   737,     0,
     737,     0,     0,     0,     0,     0,     0,  2945,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2912,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   737,     0,     0,     0,     0,     0,  3574,
    3574,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   737,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3633,   737,
       0,   737,     0,     0,     0,     0,     0,  3644,     0,  3646,
       0,   737,     0,  3574,  3574,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3807,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3670,     0,   737,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   737,
       0,  3574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3574,   737,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2945,     0,     0,
    3574,     0,     0,     0,     0,     0,     0,   737,     0,     0,
       0,     0,     0,     0,     0,     0,   737,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3763,     0,
    3764,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3772,     0,     0,   737,  3574,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3574,  3574,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   737,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3574,     0,     0,     0,     0,     0,     0,   737,     0,
       0,  3574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     737,     0,     0,     0,     0,     0,     0,  3574,  3861,  3574,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3574,
       0,     0,   737,     0,     0,     0,  3866,     0,     0,  3574,
       0,  3574,     0,  3574,     0,     0,     0,     0,     0,     0,
    3574,     0,     0,     0,     0,     0,  3120,     0,     0,  3574,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3574,  3574,     0,     0,     0,     0,
     737,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3574,  3574,     0,     0,     0,  3574,     0,     0,     0,     0,
       0,     0,  3902,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3940,     0,     0,
       0,     0,     0,     0,     0,     0,   138,     0,   614,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,  3959,
       0,   615,     0,   146,   147,   148,   149,   150,   616,   152,
       0,   153,     0,     0,   617,   154,   618,   619,   620,   155,
     621,  3975,   156,   157,   158,  1544,   159,     0,   160,   161,
       0,     0,   162,   622,   623,   163,     0,   164,   624,   625,
     166,     0,   167,   168,   169,   626,   171,     0,   627,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   628,   184,     0,   185,   629,   630,   186,  4023,
       0,   187,   631,   632,     0,   633,   634,     0,   188,   189,
     190,   635,   636,   637,     0,     0,     0,     0,   638,   193,
     639,     0,     0,   640,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   641,     0,   217,   218,   219,
     642,   643,   220,   221,     0,   222,   223,   224,   644,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   645,   231,   646,   233,     0,   234,     0,   647,     0,
     235,   236,     0,   237,   648,     0,   238,   239,     0,     0,
       0,   649,   241,   242,   243,   650,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   651,   248,   249,   652,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,  1545,   258,
       0,   653,   259,   260,     0,     0,     0,     0,     0,   654,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     655,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   656,   282,   283,   284,   285,   657,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   658,   293,     0,     0,
     659,   295,   660,   296,     0,   297,   661,   662,   663,   664,
     665,   302,   303,   304,   305,     0,   666,   306,   307,     0,
       0,   308,   309,   310,   311,   667,   668,   669,   312,   313,
       0,   670,   671,     0,   314,   315,   672,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,   673,   325,   326,   327,
     328,   329,   674,   331,   332,   333,   675,   676,   336,   677,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   678,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,   679,   680,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
     681,   368,   369,   370,   371,   372,   682,   374,   375,   376,
       0,   683,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,   684,   685,   400,   401,     0,
     402,   686,   404,   405,   406,   687,   688,   407,   408,   409,
     410,   689,   411,   412,     0,     0,   413,   414,   415,     0,
     690,   416,   417,     0,   691,   692,   693,   694,     0,     0,
       0,     0,  1546,   422,   423,   424,     0,   695,   696,   697,
     426,   427,   428,   698,   429,   430,   699,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   700,   439,     0,     0,   701,   702,   703,   704,   440,
       0,     0,   441,   705,     0,   706,   442,   443,   444,   707,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
       0,   708,     0,     0,     0,   709,   710,     0,     0,     0,
       0,   711,   712,     0,     0,   713,   714,     0,     0,   715,
     716,   138,     0,   614,   140,   141,   142,   143,  2908,     0,
       0,     0,     0,   144,     0,     0,   615,     0,   146,   147,
     148,   149,   150,   616,   152,     0,   153,     0,     0,  2909,
     154,   618,   619,   620,   155,   621,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   622,   623,
     163,     0,   164,   624,   625,   166,     0,   167,   168,   169,
     626,   171,     0,   627,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   628,   184,     0,
     185,   629,   630,   186,     0,     0,   187,   631,   632,     0,
     633,   634,     0,   188,   189,   190,   635,   636,   637,     0,
       0,     0,     0,   638,   193,   639,     0,     0,  2910,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     641,     0,   217,   218,   219,   642,   643,   220,   221,     0,
     222,   223,   224,   644,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   645,   231,   646,   233,
       0,   234,     0,   647,     0,   235,   236,     0,   237,   648,
       0,   238,   239,     0,     0,     0,   649,   241,   242,   243,
     650,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   651,   248,   249,   652,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   653,   259,   260,     0,
       0,     0,     0,     0,   654,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   655,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   656,   282,   283,   284,
     285,   657,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   658,   293,     0,     0,   659,   295,   660,   296,     0,
     297,   661,   662,   663,   664,   665,   302,   303,   304,   305,
       0,   666,   306,   307,     0,     0,   308,   309,   310,   311,
     667,   668,   669,   312,   313,     0,   670,   671,     0,   314,
     315,   672,  2911,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,   673,   325,   326,   327,   328,   329,   674,   331,   332,
     333,   675,   676,   336,   677,     0,   337,   338,   339,     0,
     340,     0,   341,   342,   343,   344,     0,   678,   346,   347,
       0,     0,   348,     0,     0,     0,   349,   350,   351,   352,
     353,     0,     0,   354,   355,   356,     0,   357,   358,     0,
     359,   360,   361,   679,   680,   362,     0,   363,   364,   365,
       0,   366,   367,     0,     0,   681,   368,   369,   370,   371,
     372,   682,   374,   375,   376,     0,   683,   378,     0,     0,
       0,   379,   380,   381,   382,     0,     0,     0,   383,     0,
       0,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,     0,     0,     0,     0,     0,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,   398,   399,
     684,   685,   400,   401,     0,   402,   686,   404,   405,   406,
     687,   688,   407,   408,   409,   410,   689,   411,   412,     0,
       0,   413,   414,   415,     0,   690,   416,   417,     0,   691,
     692,   693,   694,     0,     0,     0,     0,     0,   422,   423,
     424,     0,   695,   696,   697,   426,   427,   428,   698,   429,
     430,   699,   431,   432,     0,   433,   434,     0,     0,   435,
       0,     0,   436,     0,   437,     0,   700,   439,     0,     0,
     701,   702,   703,   704,   440,     0,     0,   441,   705,     0,
     706,   442,   443,   444,   707,     0,     0,     0,     0,   446,
     447,     0,   448,   449,     0,     0,   708,     0,     0,     0,
     709,   710,     0,     0,     0,     0,   711,   712,     0,     0,
     713,   714,     0,     0,   715,   716,   138,     0,   614,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   615,     0,   146,   147,   148,   149,   150,   616,   152,
       0,   153,     0,     0,   617,   154,   618,   619,   620,   155,
     621,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   622,   623,   163,     0,   164,   624,   625,
     166,     0,   167,   168,   169,   626,   171,     0,   627,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   628,   184,     0,   185,   629,   630,   186,     0,
       0,   187,   631,   632,     0,   633,   634,     0,   188,   189,
     190,   635,   636,   637,     0,     0,     0,     0,   638,   193,
     639,     0,     0,   640,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   641,     0,   217,   218,   219,
     642,   643,   220,   221,     0,   222,   223,   224,   644,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   645,   231,   646,   233,     0,   234,     0,   647,     0,
     235,   236,     0,   237,   648,     0,   238,   239,     0,     0,
       0,   649,   241,   242,   243,   650,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   651,   248,   249,   652,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   653,   259,   260,     0,     0,     0,     0,     0,   654,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     655,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   656,   282,   283,   284,   285,   657,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   658,   293,     0,     0,
     659,   295,   660,   296,     0,   297,   661,   662,   663,   664,
     665,   302,   303,   304,   305,     0,   666,   306,   307,     0,
       0,   308,   309,   310,   311,   667,   668,   669,   312,   313,
       0,   670,   671,     0,   314,   315,   672,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,   673,   325,   326,   327,
     328,   329,   674,   331,   332,   333,   675,   676,   336,   677,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   678,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,   679,   680,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
     681,   368,   369,   370,   371,   372,   682,   374,   375,   376,
       0,   683,   378,  1097,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,   684,   685,   400,   401,     0,
     402,   686,   404,   405,   406,   687,   688,   407,   408,   409,
     410,   689,   411,   412,     0,     0,   413,   414,   415,     0,
     690,   416,   417,     0,   691,   692,   693,   694,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   695,   696,   697,
     426,   427,   428,   698,   429,   430,   699,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   700,   439,     0,     0,   701,   702,   703,   704,   440,
       0,     0,   441,   705,     0,   706,   442,   443,   444,   707,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
       0,   708,     0,     0,     0,   709,   710,     0,     0,     0,
       0,   711,  1098,     0,     0,   713,   714,     0,     0,   715,
     716,   138,     0,   614,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   615,     0,   146,   147,
     148,   149,   150,   616,   152,     0,   153,     0,     0,   617,
     154,   618,   619,   620,   155,   621,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   622,   623,
     163,     0,   164,   624,   625,   166,     0,   167,   168,   169,
     626,   171,     0,   627,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   628,   184,     0,
     185,   629,   630,   186,     0,     0,   187,   631,   632,     0,
     633,   634,     0,   188,   189,   190,   635,   636,   637,     0,
       0,     0,     0,   638,   193,   639,     0,     0,   640,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     641,     0,   217,   218,   219,   642,   643,   220,   221,     0,
     222,   223,   224,   644,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   645,   231,   646,   233,
       0,   234,     0,   647,     0,   235,   236,     0,   237,   648,
       0,   238,   239,     0,     0,     0,   649,   241,   242,   243,
     650,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   651,   248,   249,   652,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   653,   259,   260,     0,
       0,     0,     0,     0,   654,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   655,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   656,   282,   283,   284,
     285,   657,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   658,   293,     0,     0,   659,   295,   660,   296,     0,
     297,   661,   662,   663,   664,   665,   302,   303,   304,   305,
       0,   666,   306,   307,     0,     0,   308,   309,   310,   311,
     667,   668,   669,   312,   313,     0,   670,   671,     0,   314,
     315,   672,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,   673,   325,   326,   327,   328,   329,   674,   331,   332,
     333,   675,   676,   336,   677,     0,   337,   338,   339,     0,
     340,     0,   341,   342,   343,   344,     0,   678,   346,   347,
       0,     0,   348,     0,     0,     0,   349,   350,   351,   352,
     353,     0,     0,   354,   355,   356,     0,   357,   358,     0,
     359,   360,   361,   679,   680,   362,     0,   363,   364,   365,
       0,   366,   367,     0,     0,   681,   368,   369,   370,   371,
     372,   682,   374,   375,   376,     0,   683,   378,     0,     0,
       0,   379,   380,   381,   382,     0,     0,     0,   383,     0,
       0,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,     0,     0,     0,     0,     0,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,   398,   399,
     684,   685,   400,   401,     0,   402,   686,   404,   405,   406,
     687,   688,   407,   408,   409,   410,   689,   411,   412,     0,
       0,   413,   414,   415,     0,   690,   416,   417,     0,   691,
     692,   693,   694,     0,     0,     0,     0,     0,   422,   423,
     424,     0,   695,   696,   697,   426,   427,   428,   698,   429,
     430,   699,   431,   432,     0,   433,   434,     0,     0,   435,
       0,     0,   436,     0,   437,     0,   700,   439,     0,     0,
     701,   702,   703,   704,   440,     0,     0,   441,   705,     0,
     706,   442,   443,   444,   707,     0,     0,     0,     0,   446,
     447,     0,   448,   449,     0,     0,   708,     0,     0,     0,
     709,   710,     0,     0,     0,     0,   711,   712,  1457,     0,
     713,   714,     0,     0,   715,   716,   138,     0,   614,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   615,     0,   146,   147,   148,   149,   150,   616,   152,
       0,   153,     0,     0,   617,   154,   618,   619,   620,   155,
     621,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   622,   623,   163,     0,   164,   624,   625,
     166,     0,   167,   168,   169,   626,   171,     0,   627,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   628,   184,     0,   185,   629,   630,   186,     0,
       0,   187,   631,   632,     0,   633,   634,     0,   188,   189,
     190,   635,   636,   637,     0,     0,     0,     0,   638,   193,
     639,     0,     0,   640,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   641,     0,   217,   218,   219,
     642,   643,   220,   221,     0,   222,   223,   224,   644,     0,
     225,     0,     0,     0,   226,   227,  2023,   228,     0,   229,
       0,   645,   231,   646,   233,     0,   234,     0,   647,     0,
     235,   236,     0,   237,   648,     0,   238,   239,     0,     0,
       0,   649,   241,   242,   243,   650,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   651,   248,   249,   652,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   653,   259,   260,     0,     0,     0,     0,     0,   654,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     655,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   656,   282,   283,   284,   285,   657,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   658,   293,     0,     0,
     659,   295,   660,   296,     0,   297,   661,   662,   663,   664,
     665,   302,   303,   304,   305,     0,   666,   306,   307,     0,
       0,   308,   309,   310,   311,   667,   668,   669,   312,   313,
       0,   670,   671,     0,   314,   315,   672,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,   673,   325,   326,   327,
     328,   329,   674,   331,   332,   333,   675,   676,   336,   677,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   678,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,   679,   680,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
     681,   368,   369,   370,   371,   372,   682,   374,   375,   376,
       0,   683,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,   684,   685,   400,   401,     0,
     402,   686,   404,   405,   406,   687,   688,   407,   408,   409,
     410,   689,   411,   412,     0,     0,   413,   414,   415,     0,
     690,   416,   417,     0,   691,   692,   693,   694,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   695,   696,   697,
     426,   427,   428,   698,   429,   430,   699,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   700,   439,     0,     0,   701,   702,   703,   704,   440,
       0,     0,   441,   705,     0,   706,   442,   443,   444,   707,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
       0,   708,     0,     0,     0,   709,   710,     0,     0,     0,
       0,   711,   712,     0,     0,   713,   714,     0,     0,   715,
     716,   138,     0,   614,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   615,     0,   146,   147,
     148,   149,   150,   616,   152,     0,   153,     0,     0,   617,
     154,   618,   619,   620,   155,   621,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   622,   623,
     163,     0,   164,   624,   625,   166,     0,   167,   168,   169,
     626,   171,     0,   627,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   628,   184,     0,
     185,   629,   630,   186,     0,     0,   187,   631,   632,     0,
     633,   634,     0,   188,   189,   190,   635,   636,   637,     0,
       0,     0,     0,   638,   193,   639,     0,     0,   640,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     641,     0,   217,   218,   219,   642,   643,   220,   221,     0,
     222,   223,   224,   644,     0,   225,     0,     0,     0,   226,
     227,  2025,   228,     0,   229,     0,   645,   231,   646,   233,
       0,   234,     0,   647,     0,   235,   236,     0,   237,   648,
       0,   238,   239,     0,     0,     0,   649,   241,   242,   243,
     650,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   651,   248,   249,   652,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   653,   259,   260,     0,
       0,     0,     0,     0,   654,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   655,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   656,   282,   283,   284,
     285,   657,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   658,   293,     0,     0,   659,   295,   660,   296,     0,
     297,   661,   662,   663,   664,   665,   302,   303,   304,   305,
       0,   666,   306,   307,     0,     0,   308,   309,   310,   311,
     667,   668,   669,   312,   313,     0,   670,   671,     0,   314,
     315,   672,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,   673,   325,   326,   327,   328,   329,   674,   331,   332,
     333,   675,   676,   336,   677,     0,   337,   338,   339,     0,
     340,     0,   341,   342,   343,   344,     0,   678,   346,   347,
       0,     0,   348,     0,     0,     0,   349,   350,   351,   352,
     353,     0,     0,   354,   355,   356,     0,   357,   358,     0,
     359,   360,   361,   679,   680,   362,     0,   363,   364,   365,
       0,   366,   367,     0,     0,   681,   368,   369,   370,   371,
     372,   682,   374,   375,   376,     0,   683,   378,     0,     0,
       0,   379,   380,   381,   382,     0,     0,     0,   383,     0,
       0,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,     0,     0,     0,     0,     0,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,   398,   399,
     684,   685,   400,   401,     0,   402,   686,   404,   405,   406,
     687,   688,   407,   408,   409,   410,   689,   411,   412,     0,
       0,   413,   414,   415,     0,   690,   416,   417,     0,   691,
     692,   693,   694,     0,     0,     0,     0,     0,   422,   423,
     424,     0,   695,   696,   697,   426,   427,   428,   698,   429,
     430,   699,   431,   432,     0,   433,   434,     0,     0,   435,
       0,     0,   436,     0,   437,     0,   700,   439,     0,     0,
     701,   702,   703,   704,   440,     0,     0,   441,   705,     0,
     706,   442,   443,   444,   707,     0,     0,     0,     0,   446,
     447,     0,   448,   449,     0,     0,   708,     0,     0,     0,
     709,   710,     0,     0,     0,     0,   711,   712,     0,     0,
     713,   714,     0,     0,   715,   716,   138,     0,   614,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   615,     0,   146,   147,   148,   149,   150,   616,   152,
       0,   153,     0,     0,   617,   154,   618,   619,   620,   155,
     621,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   622,   623,   163,     0,   164,   624,   625,
     166,     0,   167,   168,   169,   626,   171,     0,   627,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   628,   184,     0,   185,   629,   630,   186,     0,
       0,   187,   631,   632,     0,   633,   634,     0,   188,   189,
     190,   635,   636,   637,     0,     0,     0,     0,   638,   193,
     639,     0,     0,   640,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   641,     0,   217,   218,   219,
     642,   643,   220,   221,     0,   222,   223,   224,   644,     0,
     225,     0,     0,     0,   226,   227,  2027,   228,     0,   229,
       0,   645,   231,   646,   233,     0,   234,     0,   647,     0,
     235,   236,     0,   237,   648,     0,   238,   239,     0,     0,
       0,   649,   241,   242,   243,   650,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   651,   248,   249,   652,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   653,   259,   260,     0,     0,     0,     0,     0,   654,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     655,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   656,   282,   283,   284,   285,   657,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   658,   293,     0,     0,
     659,   295,   660,   296,     0,   297,   661,   662,   663,   664,
     665,   302,   303,   304,   305,     0,   666,   306,   307,     0,
       0,   308,   309,   310,   311,   667,   668,   669,   312,   313,
       0,   670,   671,     0,   314,   315,   672,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,   673,   325,   326,   327,
     328,   329,   674,   331,   332,   333,   675,   676,   336,   677,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   678,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,   679,   680,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
     681,   368,   369,   370,   371,   372,   682,   374,   375,   376,
       0,   683,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,   684,   685,   400,   401,     0,
     402,   686,   404,   405,   406,   687,   688,   407,   408,   409,
     410,   689,   411,   412,     0,     0,   413,   414,   415,     0,
     690,   416,   417,     0,   691,   692,   693,   694,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   695,   696,   697,
     426,   427,   428,   698,   429,   430,   699,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   700,   439,     0,     0,   701,   702,   703,   704,   440,
       0,     0,   441,   705,     0,   706,   442,   443,   444,   707,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
       0,   708,     0,     0,     0,   709,   710,     0,     0,     0,
       0,   711,   712,     0,     0,   713,   714,     0,     0,   715,
     716,   138,     0,   614,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   615,     0,   146,   147,
     148,   149,   150,   616,   152,     0,   153,     0,     0,   617,
     154,   618,   619,   620,   155,   621,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   622,   623,
     163,     0,   164,   624,   625,   166,     0,   167,   168,   169,
     626,   171,     0,   627,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   628,   184,     0,
     185,   629,   630,   186,     0,     0,   187,   631,   632,     0,
     633,   634,     0,   188,   189,   190,   635,   636,   637,     0,
       0,     0,     0,   638,   193,   639,     0,     0,   640,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     641,     0,   217,   218,   219,   642,   643,   220,   221,     0,
     222,   223,   224,   644,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   645,   231,   646,   233,
       0,   234,     0,   647,     0,   235,   236,     0,   237,   648,
       0,   238,   239,     0,     0,     0,   649,   241,   242,   243,
     650,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   651,   248,   249,   652,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   653,   259,   260,     0,
       0,     0,     0,     0,   654,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   655,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   656,   282,   283,   284,
     285,   657,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   658,   293,     0,     0,   659,   295,   660,   296,     0,
     297,   661,   662,   663,   664,   665,   302,   303,   304,   305,
       0,   666,   306,   307,     0,     0,   308,   309,   310,   311,
     667,   668,   669,   312,   313,     0,   670,   671,     0,   314,
     315,   672,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,   673,   325,   326,   327,   328,   329,   674,   331,   332,
     333,   675,   676,   336,   677,     0,   337,   338,   339,     0,
     340,     0,   341,   342,   343,   344,     0,   678,   346,   347,
       0,     0,   348,     0,     0,     0,   349,   350,   351,   352,
     353,     0,     0,   354,   355,   356,     0,   357,   358,     0,
     359,   360,   361,   679,   680,   362,     0,   363,   364,   365,
       0,   366,   367,     0,     0,   681,   368,   369,   370,   371,
     372,   682,   374,   375,   376,     0,   683,   378,     0,     0,
       0,   379,   380,   381,   382,     0,     0,     0,   383,     0,
       0,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,     0,     0,     0,     0,     0,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,   398,   399,
     684,   685,   400,   401,     0,   402,   686,   404,   405,   406,
     687,   688,   407,   408,   409,   410,   689,   411,   412,     0,
       0,   413,   414,   415,     0,   690,   416,   417,     0,   691,
     692,   693,   694,     0,     0,     0,     0,     0,   422,   423,
     424,     0,   695,   696,   697,   426,   427,   428,   698,   429,
     430,   699,   431,   432,     0,   433,   434,     0,     0,   435,
       0,     0,   436,     0,   437,     0,   700,   439,     0,     0,
     701,   702,   703,   704,   440,     0,     0,   441,   705,     0,
     706,   442,   443,   444,   707,     0,     0,     0,     0,   446,
     447,     0,   448,   449,     0,     0,   708,     0,     0,     0,
     709,   710,     0,     0,     0,     0,   711,   712,     0,     0,
     713,   714,     0,     0,   715,   716,   138,     0,   614,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   615,     0,   146,   147,   148,   149,   150,   616,   152,
       0,   153,     0,     0,   617,   154,   618,   619,   620,   155,
     621,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   622,   623,   163,     0,   164,   624,   625,
     166,     0,   167,   168,   169,   626,   171,     0,   627,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   628,   184,     0,   185,   629,   630,   186,     0,
       0,   187,   631,   632,     0,   633,   634,     0,   188,   189,
     190,   635,   636,   637,     0,     0,     0,     0,   638,   193,
     639,     0,     0,   640,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   641,     0,   217,   218,   219,
     642,   643,   220,   221,     0,   222,   223,   224,   644,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   645,   231,   646,   233,     0,   234,     0,   647,     0,
     235,   236,     0,   237,   648,     0,   238,   239,     0,     0,
       0,   649,   241,   242,   243,   650,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   651,   248,   249,   652,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   653,   259,   260,     0,     0,     0,     0,     0,   654,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     655,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   656,   282,   283,   284,   285,   657,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   658,   293,     0,     0,
     659,   295,   660,   296,     0,   297,   661,   662,   663,   664,
     665,   302,   303,   304,   305,     0,   666,   306,   307,     0,
       0,   308,   309,   310,   311,   667,   668,   669,   312,   313,
       0,   670,   671,     0,   314,   315,   672,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,   673,   325,   326,   327,
     328,   329,   674,   331,   332,   333,   675,   676,   336,   677,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   678,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,   679,   680,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
     681,   368,   369,   370,   371,   372,   682,   374,   375,   376,
       0,   683,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,   684,   685,   400,   401,     0,
     402,   686,   404,   405,   406,   687,   688,   407,   408,   409,
     410,   689,   411,   412,     0,     0,   413,   414,   415,     0,
     690,   416,   417,     0,   691,   692,   693,   694,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   695,   696,   697,
     426,   427,   428,   698,   429,   430,   699,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   700,   439,     0,     0,   701,   702,   703,   704,   440,
       0,     0,   441,   705,     0,   706,   442,   443,   444,   707,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
       0,   708,     0,     0,     0,   709,   710,     0,     0,     0,
       0,   711,  1035,     0,     0,   713,   714,     0,     0,   715,
     716,   138,     0,   614,   140,   141,   142,   143,  1576,     0,
       0,     0,     0,  1577,     0,     0,   615,     0,   146,   147,
     148,   149,   150,   616,   152,     0,   153,     0,     0,   617,
     154,   618,   619,   620,   155,   621,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   622,   623,
     163,     0,   164,   624,   625,   166,     0,   167,   168,   169,
     626,   171,     0,   627,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   628,   184,     0,
     185,   629,   630,   186,     0,     0,   187,   631,   632,     0,
     633,   634,     0,   188,   189,   190,   635,   636,   637,     0,
       0,     0,     0,   638,   193,   639,     0,     0,   640,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     641,     0,   217,   218,   219,   642,   643,   220,   221,     0,
     222,   223,   224,   644,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   645,   231,   646,   233,
       0,   234,     0,   647,     0,   235,   236,     0,   237,   648,
       0,   238,   239,     0,     0,     0,   649,   241,   242,   243,
     650,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   651,   248,   249,   652,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   653,   259,   260,     0,
       0,     0,     0,     0,   654,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   655,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   656,   282,   283,   284,
     285,   657,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   658,   293,     0,     0,   659,   295,   660,   296,     0,
     297,   661,   662,   663,   664,   665,   302,   303,   304,   305,
       0,   666,   306,   307,     0,     0,   308,   309,   310,   311,
     667,     0,   669,   312,   313,     0,   670,   671,     0,   314,
     315,   672,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,   673,   325,   326,   327,   328,   329,   674,   331,   332,
     333,   675,   676,   336,   677,     0,   337,   338,   339,     0,
     340,     0,   341,   342,   343,   344,     0,   678,   346,   347,
       0,     0,   348,     0,     0,     0,   349,   350,   351,   352,
     353,     0,     0,   354,   355,   356,     0,   357,   358,     0,
     359,   360,   361,   679,   680,   362,     0,   363,   364,   365,
       0,   366,   367,     0,     0,   681,   368,   369,   370,   371,
     372,   682,   374,   375,   376,     0,   683,   378,     0,     0,
       0,   379,   380,   381,   382,     0,     0,     0,   383,     0,
       0,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,     0,     0,     0,     0,     0,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,   398,   399,
     684,   685,   400,   401,     0,   402,   686,   404,   405,   406,
     687,   688,   407,   408,   409,   410,   689,   411,   412,     0,
       0,   413,   414,   415,     0,   690,   416,   417,     0,   691,
     692,   693,   694,     0,     0,     0,     0,     0,   422,   423,
     424,     0,   695,   696,   697,   426,   427,   428,   698,   429,
     430,   699,   431,   432,     0,   433,   434,     0,     0,   435,
       0,     0,   436,     0,   437,     0,   700,   439,     0,     0,
     701,   702,   703,   704,   440,     0,     0,   441,   705,     0,
     706,   442,   443,   444,   707,     0,     0,     0,     0,   446,
     447,     0,   448,   449,     0,     0,   708,     0,     0,     0,
     709,   710,     0,     0,     0,     0,   711,   712,     0,     0,
     713,   714,     0,     0,   715,   716,   138,     0,   614,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   615,     0,   146,   147,   148,   149,   150,   616,   152,
       0,   153,     0,     0,   617,   154,   618,   619,   620,   155,
     621,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   622,   623,   163,     0,   164,   624,   625,
     166,     0,   167,   168,   169,   626,   171,     0,   627,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   628,   184,     0,   185,   629,   630,   186,     0,
       0,   187,   631,   632,     0,   633,   634,     0,   188,   189,
     190,   635,   636,   637,     0,     0,     0,     0,   638,   193,
     639,     0,     0,   640,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   641,     0,   217,   218,   219,
     642,   643,   220,   221,     0,   222,   223,   224,   644,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   645,   231,   646,   233,     0,   234,     0,   647,     0,
     235,   236,     0,   237,   648,     0,   238,   239,     0,     0,
       0,   649,   241,   242,   243,   650,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   651,   248,   249,  2413,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   653,   259,   260,     0,     0,     0,     0,     0,   654,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     655,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   656,   282,   283,   284,   285,   657,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   658,   293,     0,     0,
     659,   295,   660,   296,     0,   297,   661,   662,   663,   664,
     665,   302,   303,   304,   305,     0,   666,   306,   307,     0,
       0,   308,   309,   310,   311,   667,   668,   669,   312,   313,
       0,   670,   671,     0,   314,   315,   672,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,   673,   325,   326,   327,
     328,   329,   674,   331,   332,   333,   675,   676,   336,   677,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   678,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,   679,   680,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
     681,   368,   369,   370,   371,   372,   682,   374,   375,   376,
       0,   683,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,   684,   685,   400,   401,     0,
     402,   686,   404,   405,   406,   687,   688,   407,   408,   409,
     410,   689,   411,   412,     0,     0,   413,   414,   415,     0,
     690,   416,   417,     0,   691,   692,   693,   694,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   695,   696,   697,
     426,   427,   428,   698,   429,   430,   699,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   700,   439,     0,     0,   701,   702,   703,   704,   440,
       0,     0,   441,   705,     0,   706,   442,   443,   444,   707,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
       0,   708,     0,     0,     0,   709,   710,     0,     0,     0,
       0,   711,   712,     0,     0,   713,   714,     0,     0,   715,
     716,   138,     0,   614,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   615,     0,   146,   147,
     148,   149,   150,   616,   152,     0,   153,     0,     0,   617,
     154,   618,   619,   620,   155,   621,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   622,   623,
     163,     0,   164,   624,   625,   166,     0,   167,   168,   169,
     626,   171,     0,   627,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   628,   184,     0,
     185,   629,   630,   186,     0,     0,   187,   631,   632,     0,
     633,   634,     0,   188,   189,   190,   635,   636,   637,     0,
       0,     0,     0,   638,   193,   639,     0,     0,   640,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     641,     0,   217,   218,   219,   642,   643,   220,   221,     0,
     222,   223,   224,   644,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   645,   231,   646,   233,
       0,   234,     0,   647,     0,   235,   236,     0,   237,   648,
       0,   238,   239,     0,     0,     0,   649,   241,   242,   243,
     650,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   651,   248,   249,  2459,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   653,   259,   260,     0,
       0,     0,     0,     0,   654,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   655,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   656,   282,   283,   284,
     285,   657,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   658,   293,     0,     0,   659,   295,   660,   296,     0,
     297,   661,   662,   663,   664,   665,   302,   303,   304,   305,
       0,   666,   306,   307,     0,     0,   308,   309,   310,   311,
     667,   668,   669,   312,   313,     0,   670,   671,     0,   314,
     315,   672,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,   673,   325,   326,   327,   328,   329,   674,   331,   332,
     333,   675,   676,   336,   677,     0,   337,   338,   339,     0,
     340,     0,   341,   342,   343,   344,     0,   678,   346,   347,
       0,     0,   348,     0,     0,     0,   349,   350,   351,   352,
     353,     0,     0,   354,   355,   356,     0,   357,   358,     0,
     359,   360,   361,   679,   680,   362,     0,   363,   364,   365,
       0,   366,   367,     0,     0,   681,   368,   369,   370,   371,
     372,   682,   374,   375,   376,     0,   683,   378,     0,     0,
       0,   379,   380,   381,   382,     0,     0,     0,   383,     0,
       0,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,     0,     0,     0,     0,     0,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,   398,   399,
     684,   685,   400,   401,     0,   402,   686,   404,   405,   406,
     687,   688,   407,   408,   409,   410,   689,   411,   412,     0,
       0,   413,   414,   415,     0,   690,   416,   417,     0,   691,
     692,   693,   694,     0,     0,     0,     0,     0,   422,   423,
     424,     0,   695,   696,   697,   426,   427,   428,   698,   429,
     430,   699,   431,   432,     0,   433,   434,     0,     0,   435,
       0,     0,   436,     0,   437,     0,   700,   439,     0,     0,
     701,   702,   703,   704,   440,     0,     0,   441,   705,     0,
     706,   442,   443,   444,   707,     0,     0,     0,     0,   446,
     447,     0,   448,   449,     0,     0,   708,     0,     0,     0,
     709,   710,     0,     0,     0,     0,   711,   712,     0,     0,
     713,   714,     0,     0,   715,   716,   138,     0,   614,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   615,     0,   146,   147,   148,   149,   150,   616,   152,
       0,   153,     0,     0,   617,   154,   618,   619,   620,   155,
     621,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   622,   623,   163,     0,   164,   624,   625,
     166,     0,   167,   168,   169,   626,   171,     0,   627,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   628,   184,     0,   185,   629,   630,   186,     0,
       0,   187,   631,   632,     0,   633,   634,     0,   188,   189,
     190,   635,   636,   637,     0,     0,     0,     0,   638,   193,
     639,     0,     0,  3119,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   641,     0,   217,   218,   219,
     642,   643,   220,   221,     0,   222,   223,   224,   644,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   645,   231,   646,   233,     0,   234,     0,   647,     0,
     235,   236,     0,   237,   648,     0,   238,   239,     0,     0,
       0,   649,   241,   242,   243,   650,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   651,   248,   249,   652,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   653,   259,   260,     0,     0,     0,     0,     0,   654,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     655,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   656,   282,   283,   284,   285,   657,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   658,   293,     0,     0,
     659,   295,   660,   296,     0,   297,   661,   662,   663,   664,
     665,   302,   303,   304,   305,     0,   666,   306,   307,     0,
       0,   308,   309,   310,   311,   667,   668,   669,   312,   313,
       0,   670,   671,     0,   314,   315,   672,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,   673,   325,   326,   327,
     328,   329,   674,   331,   332,   333,   675,   676,   336,   677,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   678,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,   679,   680,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
     681,   368,   369,   370,   371,   372,   682,   374,   375,   376,
       0,   683,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,   684,   685,   400,   401,     0,
     402,   686,   404,   405,   406,   687,   688,   407,   408,   409,
     410,   689,   411,   412,     0,     0,   413,   414,   415,     0,
     690,   416,   417,     0,   691,   692,   693,   694,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   695,   696,   697,
     426,   427,   428,   698,   429,   430,   699,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   700,   439,     0,     0,   701,   702,   703,   704,   440,
       0,     0,   441,   705,     0,   706,   442,   443,   444,   707,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
       0,   708,     0,     0,     0,   709,   710,     0,     0,     0,
       0,   711,   712,     0,     0,   713,   714,     0,     0,   715,
     716,   138,     0,   614,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   615,     0,   146,   147,
     148,   149,   150,   616,   152,     0,   153,     0,     0,   617,
     154,   618,   619,   620,   155,   621,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   622,   623,
     163,     0,   164,   624,   625,   166,     0,   167,   168,   169,
     626,   171,     0,   627,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   628,   184,     0,
     185,   629,   630,   186,     0,     0,   187,   631,   632,     0,
     633,   634,     0,   188,   189,   190,   635,   636,   637,     0,
       0,     0,     0,   638,   193,   639,     0,     0,   640,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     641,     0,   217,   218,   219,   642,   643,   220,   221,     0,
     222,   223,   224,   644,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   645,   231,   646,   233,
       0,   234,     0,   647,     0,   235,   236,     0,   237,   648,
       0,   238,   239,     0,     0,     0,   649,   241,   242,   243,
     650,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   651,   248,   249,   652,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   653,   259,   260,     0,
       0,     0,     0,     0,   654,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   655,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   656,   282,   283,   284,
     285,   657,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   658,   293,     0,     0,   659,   295,   660,   296,     0,
     297,   661,   662,   663,   664,   665,   302,   303,   304,   305,
       0,   666,   306,   307,     0,     0,   308,   309,   310,   311,
     667,     0,   669,   312,   313,     0,   670,   671,     0,   314,
     315,   672,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,   673,   325,   326,   327,   328,   329,   674,   331,   332,
     333,   675,   676,   336,   677,     0,   337,   338,   339,     0,
     340,     0,   341,   342,   343,   344,     0,   678,   346,   347,
       0,     0,   348,     0,     0,     0,   349,   350,   351,   352,
     353,     0,     0,   354,   355,   356,     0,   357,   358,     0,
     359,   360,   361,   679,   680,   362,     0,   363,   364,   365,
       0,   366,   367,     0,     0,   681,   368,   369,   370,   371,
     372,   682,   374,   375,   376,     0,   683,   378,     0,     0,
       0,   379,   380,   381,   382,     0,     0,     0,   383,     0,
       0,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,     0,     0,     0,     0,     0,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,   398,   399,
     684,   685,   400,   401,     0,   402,   686,   404,   405,   406,
     687,   688,   407,   408,   409,   410,   689,   411,   412,     0,
       0,   413,   414,   415,     0,   690,   416,   417,     0,   691,
     692,   693,   694,     0,     0,     0,     0,     0,   422,   423,
     424,     0,   695,   696,   697,   426,   427,   428,   698,   429,
     430,   699,   431,   432,     0,   433,   434,     0,     0,   435,
       0,     0,   436,     0,   437,     0,   700,   439,     0,     0,
     701,   702,   703,   704,   440,     0,     0,   441,   705,     0,
     706,   442,   443,   444,   707,     0,     0,     0,     0,   446,
     447,     0,   448,   449,     0,     0,   708,     0,     0,     0,
     709,   710,     0,     0,     0,     0,   711,   712,     0,     0,
     713,   714,     0,     0,   715,   716,   138,     0,   614,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   615,     0,   146,   147,   148,   149,   150,   616,   152,
       0,   153,     0,     0,   617,   154,   618,   619,   620,   155,
     621,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   622,   623,   163,     0,   164,   624,   625,
     166,     0,   167,   168,   169,   626,   171,     0,   627,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   628,   184,     0,   185,   629,   630,   186,     0,
       0,   187,   631,   632,     0,   633,   634,     0,   188,   189,
     190,   635,   636,   637,     0,     0,     0,     0,   638,   193,
     639,     0,     0,   640,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   641,     0,   217,   218,   219,
     642,   643,   220,   221,     0,   222,   223,   224,   644,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   645,   231,   646,   233,     0,   234,     0,   647,     0,
     235,   236,     0,   237,   648,     0,   238,   239,     0,     0,
       0,   649,   241,   242,   243,   650,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   651,   248,   249,  1591,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   653,   259,   260,     0,     0,     0,     0,     0,   654,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     655,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   656,   282,   283,   284,   285,   657,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   658,   293,     0,     0,
     659,   295,   660,   296,     0,   297,   661,   662,   663,   664,
     665,   302,   303,   304,   305,     0,   666,   306,   307,     0,
       0,   308,   309,   310,   311,   667,     0,   669,   312,   313,
       0,   670,   671,     0,   314,   315,   672,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,   673,   325,   326,   327,
     328,   329,   674,   331,   332,   333,   675,   676,   336,   677,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   678,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,   679,   680,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
     681,   368,   369,   370,   371,   372,   682,   374,   375,   376,
       0,   683,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,   684,   685,   400,   401,     0,
     402,   686,   404,   405,   406,   687,   688,   407,   408,   409,
     410,   689,   411,   412,     0,     0,   413,   414,   415,     0,
     690,   416,   417,     0,   691,   692,   693,   694,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   695,   696,   697,
     426,   427,   428,   698,   429,   430,   699,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   700,   439,     0,     0,   701,   702,   703,   704,   440,
       0,     0,   441,   705,     0,   706,   442,   443,   444,   707,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
       0,   708,     0,     0,     0,   709,   710,     0,     0,     0,
       0,   711,   712,     0,     0,   713,   714,     0,     0,   715,
     716,   138,     0,   614,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   615,     0,   146,   147,
     148,   149,   150,   616,   152,     0,   153,     0,     0,   617,
     154,   618,   619,   620,   155,   621,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   622,   623,
     163,     0,   164,   624,   625,   166,     0,   167,   168,   169,
     626,   171,     0,   627,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   628,   184,     0,
     185,   629,   630,   186,     0,     0,   187,   631,   632,     0,
     633,   634,     0,   188,   189,   190,   635,   636,   637,     0,
       0,     0,     0,   638,   193,   639,     0,     0,   640,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     641,     0,   217,   218,   219,   642,   643,   220,   221,     0,
     222,   223,   224,   644,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   645,   231,   646,   233,
       0,   234,     0,   647,     0,   235,   236,     0,   237,   648,
       0,   238,   239,     0,     0,     0,   649,   241,   242,   243,
     650,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   651,   248,   249,  1593,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   653,   259,   260,     0,
       0,     0,     0,     0,   654,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   655,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   656,   282,   283,   284,
     285,   657,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   658,   293,     0,     0,   659,   295,   660,   296,     0,
     297,   661,   662,   663,   664,   665,   302,   303,   304,   305,
       0,   666,   306,   307,     0,     0,   308,   309,   310,   311,
     667,     0,   669,   312,   313,     0,   670,   671,     0,   314,
     315,   672,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,   673,   325,   326,   327,   328,   329,   674,   331,   332,
     333,   675,   676,   336,   677,     0,   337,   338,   339,     0,
     340,     0,   341,   342,   343,   344,     0,   678,   346,   347,
       0,     0,   348,     0,     0,     0,   349,   350,   351,   352,
     353,     0,     0,   354,   355,   356,     0,   357,   358,     0,
     359,   360,   361,   679,   680,   362,     0,   363,   364,   365,
       0,   366,   367,     0,     0,   681,   368,   369,   370,   371,
     372,   682,   374,   375,   376,     0,   683,   378,     0,     0,
       0,   379,   380,   381,   382,     0,     0,     0,   383,     0,
       0,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,     0,     0,     0,     0,     0,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,   398,   399,
     684,   685,   400,   401,     0,   402,   686,   404,   405,   406,
     687,   688,   407,   408,   409,   410,   689,   411,   412,     0,
       0,   413,   414,   415,     0,   690,   416,   417,     0,   691,
     692,   693,   694,     0,     0,     0,     0,     0,   422,   423,
     424,     0,   695,   696,   697,   426,   427,   428,   698,   429,
     430,   699,   431,   432,     0,   433,   434,     0,     0,   435,
       0,     0,   436,     0,   437,     0,   700,   439,     0,     0,
     701,   702,   703,   704,   440,     0,     0,   441,   705,     0,
     706,   442,   443,   444,   707,     0,     0,     0,     0,   446,
     447,     0,   448,   449,     0,     0,   708,     0,     0,     0,
     709,   710,     0,     0,     0,     0,   711,   712,     0,     0,
     713,   714,     0,     0,   715,   716,   138,     0,   614,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   615,     0,   146,   147,   148,   149,   150,   616,   152,
       0,   153,     0,     0,   617,   154,   618,   619,   620,   155,
     621,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   622,   623,   163,     0,   164,   624,   625,
     166,     0,   167,   168,   169,   626,   171,     0,   627,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   628,   184,     0,   185,   629,   630,   186,     0,
       0,   187,   631,   632,     0,   633,   634,     0,   188,   189,
     190,   635,   636,   637,     0,     0,     0,     0,   638,   193,
     639,     0,     0,   640,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   641,     0,   217,   218,   219,
     642,   643,   220,   221,     0,   222,   223,   224,   644,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   645,   231,   646,   233,     0,   234,     0,   647,     0,
     235,   236,     0,   237,   648,     0,   238,   239,     0,     0,
       0,   649,   241,   242,   243,   650,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   651,   248,   249,   652,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   653,   259,   260,     0,     0,     0,     0,     0,   654,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     655,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   656,   282,   283,   284,   285,   657,   286,   287,  3884,
       0,     0,     0,   289,   290,   291,   658,   293,     0,     0,
     659,   295,   660,   296,     0,   297,   661,   662,   663,   664,
     665,   302,   303,   304,   305,     0,   666,   306,   307,     0,
       0,   308,   309,   310,   311,   667,     0,   669,   312,   313,
       0,   670,   671,     0,   314,   315,   672,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,   673,   325,   326,   327,
     328,   329,   674,   331,   332,   333,   675,   676,   336,   677,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   678,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,   679,   680,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
     681,   368,   369,   370,   371,   372,   682,   374,   375,   376,
       0,   683,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,   684,   685,   400,   401,     0,
     402,   686,   404,   405,   406,   687,   688,   407,   408,   409,
     410,   689,   411,   412,     0,     0,   413,   414,   415,     0,
     690,   416,   417,     0,   691,   692,   693,   694,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   695,   696,   697,
     426,   427,   428,   698,   429,   430,   699,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   700,   439,     0,     0,   701,   702,   703,   704,   440,
       0,     0,   441,   705,     0,   706,   442,   443,   444,   707,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
       0,   708,     0,     0,     0,   709,   710,     0,     0,     0,
       0,   711,   712,     0,     0,   713,   714,     0,     0,   715,
     716,   138,     0,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,  2259,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,  2260,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,  1372,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,  1373,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
    2767,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,     0,   325,   326,   327,   328,  2768,   330,   331,   332,
     333,   334,   335,   336,     0,     0,   337,   338,   339,     0,
     340,     0,   341,   342,   343,   344,     0,   345,   346,   347,
       0,     0,   348,     0,     0,     0,   349,   350,   351,   352,
     353,     0,     0,   354,   355,   356,     0,   357,   358,     0,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
       0,   366,   367,     0,     0,     0,   368,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,  -399,     0,
       0,   379,   380,   381,   382,     0,     0,     0,   383,     0,
       0,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,  2262,     0,     0,     0,     0,     0,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
     424,     0,     0,     0,   425,   426,   427,   428,     0,   429,
     430,     0,   431,   432,     0,   433,   434,     0,     0,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,     0,
       0,     0,     0,     0,   440,     0,     0,   441,     0,     0,
       0,   442,   443,   444,   445,     0,     0,     0,     0,   446,
     447,     0,   448,   449,     0,     0,   450,     0,     0,   138,
       0,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,  2326,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,  2259,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,  2260,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,  1372,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,  1373,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   324,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,     0,     0,   337,   338,   339,     0,   340,     0,
     341,   342,   343,   344,     0,   345,   346,   347,     0,     0,
     348,     0,     0,     0,   349,   350,   351,   352,   353,     0,
       0,   354,   355,   356,     0,   357,   358,     0,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,     0,   366,
     367,     0,     0,     0,   368,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,     0,     0,     0,   379,
     380,   381,   382,     0,     0,     0,   383,     0,     0,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
    2262,     0,     0,     0,     0,     0,   393,   394,     0,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,   424,     0,
       0,     0,   425,   426,   427,   428,     0,   429,   430,     0,
     431,   432,     0,   433,   434,     0,     0,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,     0,     0,     0,
       0,     0,   440,     0,     0,   441,     0,     0,     0,   442,
     443,   444,   445,     0,     0,     0,     0,   446,   447,     0,
     448,   449,     0,     0,   450,     0,     0,   138,     0,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,  2326,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,   324,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
       0,     0,   337,   338,   339,     0,   340,     0,   341,   342,
     343,   344,     0,   345,   346,   347,     0,     0,   348,     0,
       0,     0,   349,   350,   351,   352,   353,     0,     0,   354,
     355,   356,     0,   357,   358,     0,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,     0,   366,   367,     0,
       0,     0,   368,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,  2146,     0,     0,   379,   380,   381,
     382,     0,     0,     0,   383,     0,     0,     0,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,     0,     0,
       0,     0,     0,     0,   393,   394,     0,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,   424,     0,     0,     0,
     425,   426,   427,   428,     0,   429,   430,     0,   431,   432,
       0,   433,   434,     0,     0,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,     0,     0,     0,     0,     0,
     440,     0,     0,   441,     0,     0,     0,   442,   443,   444,
     445,     0,     0,     0,     0,   446,   447,     0,   448,   449,
       0,     0,   450,     0,     0,   138,     0,   139,   140,   141,
     142,   143,     0,     0,  2541,     0,     0,   144,     0,     0,
     145,   716,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   324,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,     0,     0,
     337,   338,   339,     0,   340,     0,   341,   342,   343,   344,
       0,   345,   346,   347,     0,     0,   348,     0,     0,     0,
     349,   350,   351,   352,   353,     0,     0,   354,   355,   356,
       0,   357,   358,     0,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,     0,   366,   367,     0,     0,     0,
     368,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,     0,     0,     0,   379,   380,   381,   382,     0,
       0,     0,   383,     0,     0,     0,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,     0,     0,     0,
       0,     0,   393,   394,     0,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,   424,     0,     0,     0,   425,   426,
     427,   428,     0,   429,   430,     0,   431,   432,     0,   433,
     434,     0,     0,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,     0,     0,     0,     0,     0,   440,     0,
       0,   441,     0,     0,     0,   442,   443,   444,   445,     0,
       0,     0,     0,   446,   447,     0,   448,   449,     0,     0,
     450,     0,     0,     0,     0,   138,     0,   139,   140,   141,
     142,   143,  4028,     0,     0,     0,     0,   144,  4029,   716,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   324,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,     0,     0,
     337,   338,   339,     0,   340,     0,   341,   342,   343,   344,
       0,   345,   346,   347,     0,     0,   348,     0,     0,     0,
     349,   350,   351,   352,   353,     0,     0,   354,   355,   356,
       0,   357,   358,     0,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,     0,   366,   367,     0,     0,     0,
     368,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,     0,     0,     0,   379,   380,   381,   382,     0,
       0,     0,   383,     0,     0,     0,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,     0,     0,     0,
       0,     0,   393,   394,     0,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,   424,     0,     0,     0,   425,   426,
     427,   428,     0,   429,   430,     0,   431,   432,     0,   433,
     434,     0,     0,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,     0,     0,     0,     0,     0,   440,     0,
       0,   441,     0,     0,     0,   442,   443,   444,   445,     0,
       0,     0,     0,   446,   447,     0,   448,   449,     0,     0,
     450,     0,     0,   138,     0,   139,   140,   141,   142,   143,
       0,  1039,     0,     0,     0,   144,     0,     0,   145,   716,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,  1228,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,   324,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,     0,     0,   337,   338,
     339,     0,   340,     0,   341,   342,   343,   344,     0,   345,
     346,   347,     0,     0,   348,     0,     0,     0,   349,   350,
     351,   352,   353,     0,     0,   354,   355,   356,     0,   357,
     358,     0,   359,   360,   361,     0,     0,   362,     0,   363,
     364,   365,     0,   366,   367,     0,     0,     0,   368,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
       0,     0,     0,   379,   380,   381,   382,     0,     0,     0,
     383,     0,     0,     0,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,     0,     0,     0,     0,     0,     0,
     393,   394,     0,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,   424,     0,     0,     0,   425,   426,   427,   428,
       0,   429,   430,     0,   431,   432,     0,   433,   434,     0,
       0,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,     0,     0,     0,     0,     0,   440,     0,     0,   441,
       0,     0,     0,   442,   443,   444,   445,     0,     0,     0,
       0,   446,   447,     0,   448,   449,     0,     0,   450,     0,
       0,   138,     0,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,   494,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,     0,     0,   337,   338,   339,     0,
     340,     0,   341,   342,   343,   344,     0,   345,   346,   347,
       0,     0,   348,     0,     0,     0,   349,   350,   351,   352,
     353,     0,     0,   354,   355,   356,     0,   357,   358,     0,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
       0,   366,   367,     0,     0,     0,   368,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,     0,     0,
       0,   379,   380,   381,   382,     0,     0,     0,   383,     0,
       0,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,     0,     0,     0,     0,     0,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
     424,     0,     0,     0,   425,   426,   427,   428,     0,   429,
     430,     0,   431,   432,     0,   433,   434,     0,     0,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,     0,
       0,     0,     0,     0,   440,     0,     0,   441,     0,     0,
       0,   442,   443,   444,   445,     0,     0,     0,     0,   446,
     447,     0,   448,   449,     0,     0,   450,     0,     0,     0,
       0,   138,  2089,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,   494,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,     0,     0,   337,   338,   339,     0,
     340,     0,   341,   342,   343,   344,     0,   345,   346,   347,
       0,     0,   348,     0,     0,     0,   349,   350,   351,   352,
     353,     0,     0,   354,   355,   356,     0,   357,   358,     0,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
       0,   366,   367,     0,     0,     0,   368,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,     0,     0,
       0,   379,   380,   381,   382,     0,     0,     0,   383,     0,
       0,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,     0,     0,     0,     0,     0,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,     0,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
     424,     0,     0,     0,   425,   426,   427,   428,     0,   429,
     430,     0,   431,   432,     0,   433,   434,     0,     0,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,     0,
       0,     0,     0,     0,   440,     0,     0,   441,     0,     0,
       0,   442,   443,   444,   445,     0,     0,     0,     0,   446,
     447,     0,   448,   449,     0,     0,   450,     0,     0,   138,
       0,   139,   140,   141,   142,   143,     0,  2325,     0,     0,
       0,   144,     0,     0,   145,  2326,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   324,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,     0,     0,   337,   338,   339,     0,   340,     0,
     341,   342,   343,   344,     0,   345,   346,   347,     0,     0,
     348,     0,     0,     0,   349,   350,   351,   352,   353,     0,
       0,   354,   355,   356,     0,   357,   358,     0,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,     0,   366,
     367,     0,     0,     0,   368,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,     0,     0,     0,   379,
     380,   381,   382,     0,     0,     0,   383,     0,     0,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
       0,     0,     0,     0,     0,     0,   393,   394,     0,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,   424,     0,
       0,     0,   425,   426,   427,   428,     0,   429,   430,     0,
     431,   432,     0,   433,   434,     0,     0,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,     0,     0,     0,
       0,     0,   440,     0,     0,   441,     0,     0,     0,   442,
     443,   444,   445,     0,     0,     0,     0,   446,   447,     0,
     448,   449,     0,     0,   450,     0,     0,     0,     0,   138,
       0,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,  4029,   716,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   324,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,     0,     0,   337,   338,   339,     0,   340,     0,
     341,   342,   343,   344,     0,   345,   346,   347,     0,     0,
     348,     0,     0,     0,   349,   350,   351,   352,   353,     0,
       0,   354,   355,   356,     0,   357,   358,     0,   359,   360,
     361,     0,     0,   362,     0,   363,   364,   365,     0,   366,
     367,     0,     0,     0,   368,   369,   370,   371,   372,   373,
     374,   375,   376,     0,   377,   378,     0,     0,     0,   379,
     380,   381,   382,     0,     0,     0,   383,     0,     0,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
       0,     0,     0,     0,     0,     0,   393,   394,     0,   395,
       0,     0,   396,     0,     0,   397,   398,   399,     0,     0,
     400,   401,     0,   402,   403,   404,   405,   406,     0,     0,
     407,   408,   409,   410,     0,   411,   412,     0,     0,   413,
     414,   415,     0,     0,   416,   417,     0,   418,   419,   420,
     421,     0,     0,     0,     0,     0,   422,   423,   424,     0,
       0,     0,   425,   426,   427,   428,     0,   429,   430,     0,
     431,   432,     0,   433,   434,     0,     0,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,     0,     0,     0,
       0,     0,   440,     0,     0,   441,     0,     0,     0,   442,
     443,   444,   445,     0,     0,     0,     0,   446,   447,     0,
     448,   449,     0,     0,   450,     0,     0,   138,     0,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,   494,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   554,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,   324,     0,   325,   326,
     327,   555,   329,   330,   331,   332,   333,   334,   335,   336,
       0,     0,   337,   338,   339,     0,   340,     0,   341,   342,
     343,   344,     0,   345,   346,   347,     0,     0,   348,     0,
       0,     0,   349,   350,   351,   352,   353,     0,     0,   354,
     355,   356,     0,   357,   358,     0,   359,   360,   361,     0,
       0,   362,     0,   363,   364,   365,     0,   366,   367,     0,
       0,     0,   368,   369,   370,   371,   372,   373,   374,   375,
     376,     0,   377,   378,     0,     0,     0,   379,   380,   381,
     382,     0,     0,     0,   383,     0,     0,     0,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,     0,     0,
       0,     0,     0,     0,   393,   394,     0,   395,     0,     0,
     396,     0,     0,   397,   398,   399,     0,     0,   400,   401,
       0,   402,   403,   404,   405,   406,     0,     0,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
       0,     0,   416,   417,     0,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,   424,     0,     0,     0,
     425,   426,   427,   428,     0,   429,   430,     0,   431,   432,
       0,   433,   434,     0,     0,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,     0,     0,     0,     0,     0,
     440,     0,     0,   441,     0,     0,     0,   442,   443,   444,
     445,     0,     0,     0,     0,   446,   447,     0,   448,   449,
       0,     0,   450,     0,     0,   138,     0,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,   494,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   324,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,     0,     0,
     337,   338,   339,     0,   340,     0,   341,   342,   343,   344,
       0,   345,   346,   347,     0,     0,   348,     0,     0,     0,
     349,   350,   351,   352,   353,     0,     0,   354,   355,   356,
       0,   357,   358,     0,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,     0,   366,   367,     0,     0,     0,
     368,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,     0,     0,     0,   379,   380,   381,   382,     0,
       0,     0,   383,     0,     0,     0,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,     0,     0,     0,
       0,     0,   393,   394,     0,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,     0,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,   424,     0,     0,     0,   425,   426,
     427,   428,     0,   429,   430,     0,   431,   432,     0,   433,
     434,     0,     0,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,     0,     0,     0,     0,     0,   440,     0,
       0,   441,     0,     0,     0,   442,   443,   444,   445,     0,
       0,     0,     0,   446,   447,     0,   448,   449,     0,     0,
     450,     0,     0,   138,     0,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,   716,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,   324,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,     0,     0,   337,   338,
     339,     0,   340,     0,   341,   342,   343,   344,     0,   345,
     346,   347,     0,     0,   348,     0,     0,     0,   349,   350,
     351,   352,   353,     0,     0,   354,   355,   356,     0,   357,
     358,     0,   359,   360,   361,     0,     0,   362,     0,   363,
     364,   365,     0,   366,   367,     0,     0,     0,   368,   369,
     370,   371,   372,   373,   374,   375,   376,     0,   377,   378,
       0,     0,     0,   379,   380,   381,   382,     0,     0,     0,
     383,     0,     0,     0,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,     0,     0,     0,     0,     0,     0,
     393,   394,     0,   395,     0,     0,   396,     0,     0,   397,
     398,   399,     0,     0,   400,   401,     0,   402,   403,   404,
     405,   406,     0,     0,   407,   408,   409,   410,     0,   411,
     412,     0,     0,   413,   414,   415,     0,     0,   416,   417,
       0,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,   424,     0,     0,     0,   425,   426,   427,   428,
       0,   429,   430,     0,   431,   432,     0,   433,   434,     0,
       0,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,     0,     0,     0,     0,     0,   440,     0,     0,   441,
       0,     0,     0,   442,   443,   444,   445,     0,     0,     0,
       0,   446,   447,     0,   448,   449,     0,     0,   450,     0,
       0,   138,     0,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,  2326,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,   566,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,     0,     0,   337,   338,   339,     0,
     340,     0,   341,   342,   343,   344,     0,   345,   346,   347,
       0,     0,   348,     0,     0,     0,   349,   350,   351,   352,
     353,     0,     0,   354,   355,   356,     0,   357,   358,     0,
     359,   360,   361,     0,     0,   362,     0,   363,   364,   365,
       0,   366,   367,     0,     0,     0,   368,   369,   370,   371,
     372,   373,   374,   375,   376,     0,   377,   378,     0,     0,
       0,   379,   380,   381,   382,     0,     0,     0,   383,     0,
       0,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,     0,     0,     0,     0,     0,     0,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,   398,   399,
       0,     0,   400,   401,     0,   402,   403,   404,   405,   406,
       0,     0,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,     0,   135,   416,   417,     0,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
     424,     0,     0,     0,   425,   426,   427,   428,     0,   429,
     430,     0,   431,   432,     0,   433,   434,     0,     0,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,     0,
       0,     0,     0,     0,   440,     0,     0,   441,     0,     0,
       0,   442,   443,   444,   445,     0,     0,     0,     0,   446,
     447,     0,   448,   449,     0,     0,   450,     0,   138,     0,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,  1563,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,   566,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,     0,     0,   337,   338,   339,     0,   340,     0,   341,
     342,   343,   344,     0,   345,   346,   347,     0,     0,   348,
       0,     0,     0,   349,   350,   351,   352,   353,     0,     0,
     354,   355,   356,     0,   357,   358,     0,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,     0,   366,   367,
       0,     0,     0,   368,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,     0,     0,     0,   379,   380,
     381,   382,     0,     0,     0,   383,     0,     0,     0,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,     0,
       0,     0,     0,     0,     0,   393,   394,     0,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,   135,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,     0,
       0,   425,   426,   427,   428,     0,   429,   430,     0,   431,
     432,     0,   433,   434,     0,     0,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,     0,     0,     0,     0,
       0,   440,     0,     0,   441,     0,     0,     0,   442,   443,
     444,   445,     0,     0,     0,     0,   446,   447,     0,   448,
     449,     0,     0,   450,     0,   138,     0,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,  2579,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,   566,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   324,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,     0,     0,
     337,   338,   339,     0,   340,     0,   341,   342,   343,   344,
       0,   345,   346,   347,     0,     0,   348,     0,     0,     0,
     349,   350,   351,   352,   353,     0,     0,   354,   355,   356,
       0,   357,   358,     0,   359,   360,   361,     0,     0,   362,
       0,   363,   364,   365,     0,   366,   367,     0,     0,     0,
     368,   369,   370,   371,   372,   373,   374,   375,   376,     0,
     377,   378,     0,     0,     0,   379,   380,   381,   382,     0,
       0,     0,   383,     0,     0,     0,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,     0,     0,     0,     0,
       0,     0,   393,   394,     0,   395,     0,     0,   396,     0,
       0,   397,   398,   399,     0,     0,   400,   401,     0,   402,
     403,   404,   405,   406,     0,     0,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,     0,   135,
     416,   417,     0,   418,   419,   420,   421,     0,     0,     0,
       0,     0,   422,   423,   424,     0,     0,     0,   425,   426,
     427,   428,     0,   429,   430,     0,   431,   432,     0,   433,
     434,     0,     0,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,     0,     0,     0,     0,     0,   440,     0,
       0,   441,     0,     0,     0,   442,   443,   444,   445,     0,
       0,     0,     0,   446,   447,     0,   448,   449,     0,     0,
     450,     0,   138,     0,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,     0,  3149,   146,
     147,   148,   149,   150,   151,     0,     0,  -291,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,     0,     0,     0,     0,   162,  3547,
       0,   163,     0,   164,     0,     0,     0,     0,   167,   168,
    3548,   170,   171,     0,   172,   173,     0,     0,   175,     0,
     177,   178,   179,   180,     0,   181,   182,     0,     0,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,     0,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,     0,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,     0,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
       0,     0,     0,   217,   218,   219,     0,     0,   220,   221,
    3549,   222,   223,   224,     0,     0,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,     0,   236,     0,     0,
       0,     0,     0,   239,     0,     0,     0,   240,   241,   242,
     243,  3550,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,     0,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,  3551,     0,     0,   255,     0,
       0,     0,   257,     0,     0,   258,  3552,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,  -246,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,     0,   313,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,  3553,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   322,
     323,   324,     0,     0,   326,   327,   328,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,     0,   338,   339,
       0,   340,     0,   341,   342,   343,   344,     0,   345,   346,
     347,     0,     0,   348,     0,     0,     0,   349,   350,   351,
     352,   353,     0,     0,   354,   355,   356,     0,   357,     0,
       0,   359,     0,   361,  -246,     0,   362,     0,     0,   364,
       0,     0,   366,   367,  3554,     0,     0,     0,   369,   370,
     371,   372,   373,   374,     0,   376,     0,   377,     0,     0,
       0,     0,   379,   380,   381,     0,     0,     0,     0,   383,
       0,     0,     0,   384,     0,   386,     0,     0,   388,     0,
       0,   391,   392,     0,     0,     0,     0,     0,     0,   393,
     394,     0,   395,     0,     0,   396,     0,     0,   397,     0,
     399,     0,     0,     0,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,     0,     0,     0,
     435,     0,     0,   436,     0,     0,     0,   438,   439,     0,
       0,     0,     0,     0,     0,   440,     0,     0,   441,     0,
       0,     0,   442,   443,   444,   445,     0,     0,  -246,     0,
     446,     0,     0,   448,     0,     0,   138,   450,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
    4035,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,     0,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   345,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
       0,   368,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,     0,     0,   425,
     426,   427,   428,     0,   429,   430,     0,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,     0,     0,     0,     0,     0,   440,
       0,     0,   441,     0,     0,     0,   442,   443,   444,   445,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
     138,   450,   139,   140,   141,   142,   143,  1938,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   324,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,     0,     0,   337,   338,   339,     0,   340,
       0,   341,   342,   343,   344,     0,   345,   346,   347,     0,
       0,   348,     0,     0,     0,   349,   350,   351,   352,   353,
       0,     0,   354,   355,   356,     0,   357,   358,     0,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,     0,
     366,   367,     0,     0,     0,   368,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,     0,     0,     0,
     379,   380,   381,   382,     0,     0,     0,   383,     0,     0,
       0,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,     0,     0,     0,     0,     0,     0,   393,   394,     0,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,     0,     0,   425,   426,   427,   428,     0,   429,   430,
       0,   431,   432,     0,   433,   434,     0,     0,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,     0,     0,
       0,     0,     0,   440,     0,     0,   441,     0,     0,     0,
     442,   443,   444,   445,     0,     0,     0,     0,   446,   447,
       0,   448,   449,     0,   138,   450,   139,   140,   141,   142,
     143,  2567,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,     0,     0,   337,
     338,   339,     0,   340,     0,   341,   342,   343,   344,     0,
     345,   346,   347,     0,     0,   348,     0,     0,     0,   349,
     350,   351,   352,   353,     0,     0,   354,   355,   356,     0,
     357,   358,     0,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,     0,   366,   367,     0,     0,     0,   368,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,     0,     0,     0,   379,   380,   381,   382,     0,     0,
       0,   383,     0,     0,     0,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,     0,     0,     0,     0,     0,
       0,   393,   394,     0,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,     0,     0,   425,   426,   427,
     428,     0,   429,   430,     0,   431,   432,     0,   433,   434,
       0,     0,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,     0,     0,     0,     0,     0,   440,     0,     0,
     441,     0,     0,     0,   442,   443,   444,   445,     0,     0,
       0,     0,   446,   447,     0,   448,   449,     0,   138,   450,
     139,   140,   141,   142,   143,  2855,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,     0,     0,   337,   338,   339,     0,   340,     0,   341,
     342,   343,   344,     0,   345,   346,   347,     0,     0,   348,
       0,     0,     0,   349,   350,   351,   352,   353,     0,     0,
     354,   355,   356,     0,   357,   358,     0,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,     0,   366,   367,
       0,     0,     0,   368,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,     0,     0,     0,   379,   380,
     381,   382,     0,     0,     0,   383,     0,     0,     0,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,     0,
       0,     0,     0,     0,     0,   393,   394,     0,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,     0,
       0,   425,   426,   427,   428,     0,   429,   430,     0,   431,
     432,     0,   433,   434,     0,     0,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,     0,     0,     0,     0,
       0,   440,     0,     0,   441,     0,     0,     0,   442,   443,
     444,   445,     0,     0,     0,     0,   446,   447,     0,   448,
     449,     0,   138,   450,   139,   140,   141,   142,   143,  3154,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,  2238,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,  2239,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
    2240,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,  2241,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,   956,   957,     0,   312,   313,     0,     0,  2242,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,     0,     0,   337,   338,   339,
       0,   340,     0,   341,   342,   343,   344,     0,   345,   346,
     347,     0,     0,   348,     0,     0,     0,   349,   350,   351,
     352,   353,     0,     0,   354,   355,   356,     0,   357,   358,
       0,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,     0,   366,   367,     0,     0,     0,   368,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,     0,
       0,     0,   379,   380,   381,   382,     0,     0,     0,   383,
       0,     0,     0,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,     0,     0,  4015,  4004,  4016,     0,   393,
     394,     0,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,     0,     0,   425,   426,   427,   428,  2243,
     429,   430,     0,   431,   432,     0,   433,   434,     0,     0,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
       0,     0,     0,     0,     0,   440,     0,     0,   441,     0,
       0,     0,   442,   443,   444,   445,     0,     0,     0,     0,
     446,   447,     0,   448,   449,     0,   138,   450,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,  2431,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,  2573,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,  2074,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,   566,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,     0,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   345,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
       0,   368,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,  2075,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
     135,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,     0,     0,   425,
     426,   427,   428,     0,   429,   430,     0,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,     0,     0,     0,     0,     0,   440,
       0,     0,   441,     0,     0,     0,   442,   443,   444,   445,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
     138,   450,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,  2581,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,  2582,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,   566,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   324,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,     0,     0,   337,   338,   339,     0,   340,
       0,   341,   342,   343,   344,     0,   345,   346,   347,     0,
       0,   348,     0,     0,     0,   349,   350,   351,   352,   353,
       0,     0,   354,   355,   356,     0,   357,   358,     0,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,     0,
     366,   367,     0,     0,     0,   368,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,     0,     0,     0,
     379,   380,   381,   382,     0,     0,     0,   383,     0,     0,
       0,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,     0,     0,     0,     0,     0,     0,   393,   394,     0,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,   135,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,     0,     0,   425,   426,   427,   428,     0,   429,   430,
       0,   431,   432,     0,   433,   434,     0,     0,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,     0,     0,
       0,     0,     0,   440,     0,     0,   441,     0,     0,     0,
     442,   443,   444,   445,     0,     0,     0,     0,   446,   447,
       0,   448,   449,     0,   138,   450,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,  2431,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,  2573,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,   566,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,     0,     0,   337,
     338,   339,     0,   340,     0,   341,   342,   343,   344,     0,
     345,   346,   347,     0,     0,   348,     0,     0,     0,   349,
     350,   351,   352,   353,     0,     0,   354,   355,   356,     0,
     357,   358,     0,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,     0,   366,   367,     0,     0,     0,   368,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,     0,     0,     0,   379,   380,   381,   382,     0,     0,
       0,   383,     0,     0,     0,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,     0,     0,     0,     0,     0,
       0,   393,   394,     0,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,   135,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,     0,     0,   425,   426,   427,
     428,     0,   429,   430,     0,   431,   432,     0,   433,   434,
       0,     0,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,     0,     0,     0,     0,     0,   440,     0,     0,
     441,     0,     0,     0,   442,   443,   444,   445,     0,     0,
       0,     0,   446,   447,     0,   448,   449,     0,   138,   450,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,   916,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,   566,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,     0,     0,   337,   338,   339,     0,   340,     0,   341,
     342,   343,   344,     0,   345,   346,   347,     0,     0,   348,
       0,     0,     0,   349,   350,   351,   352,   353,     0,     0,
     354,   355,   356,     0,   357,   358,     0,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,     0,   366,   367,
       0,     0,     0,   368,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,     0,     0,     0,   379,   380,
     381,   382,     0,     0,     0,   383,     0,     0,     0,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,     0,
       0,     0,     0,     0,     0,   393,   394,     0,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,   135,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,     0,
       0,   425,   426,   427,   428,     0,   429,   430,     0,   431,
     432,     0,   433,   434,     0,     0,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,     0,     0,     0,     0,
       0,   440,     0,     0,   441,     0,     0,     0,   442,   443,
     444,   445,     0,     0,     0,     0,   446,   447,     0,   448,
     449,     0,   138,   450,   139,   140,   141,   142,   143,  1266,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
     566,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,     0,     0,   337,   338,   339,
       0,   340,     0,   341,   342,   343,   344,     0,   345,   346,
     347,     0,     0,   348,     0,     0,     0,   349,   350,   351,
     352,   353,     0,     0,   354,   355,   356,     0,   357,   358,
       0,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,     0,   366,   367,     0,     0,     0,   368,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,     0,
       0,     0,   379,   380,   381,   382,     0,     0,     0,   383,
       0,     0,     0,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,     0,     0,     0,     0,     0,     0,   393,
     394,     0,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,   135,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,     0,     0,   425,   426,   427,   428,     0,
     429,   430,     0,   431,   432,     0,   433,   434,     0,     0,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
       0,     0,     0,     0,     0,   440,     0,     0,   441,     0,
       0,     0,   442,   443,   444,   445,     0,     0,     0,     0,
     446,   447,     0,   448,   449,     0,   138,   450,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,   894,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,   895,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,     0,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   345,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
       0,   368,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
     896,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,     0,     0,   425,
     426,   427,   428,     0,   429,   430,     0,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,     0,     0,     0,     0,     0,   440,
       0,     0,   441,     0,     0,     0,   442,   443,   444,   445,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
     138,   450,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,  2431,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,   566,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   324,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,     0,     0,   337,   338,   339,     0,   340,
       0,   341,   342,   343,   344,     0,   345,   346,   347,     0,
       0,   348,     0,     0,     0,   349,   350,   351,   352,   353,
       0,     0,   354,   355,   356,     0,   357,   358,     0,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,     0,
     366,   367,     0,     0,     0,   368,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,     0,     0,     0,
     379,   380,   381,   382,     0,     0,     0,   383,     0,     0,
       0,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,     0,     0,     0,     0,     0,     0,   393,   394,     0,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,   135,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,     0,     0,   425,   426,   427,   428,     0,   429,   430,
       0,   431,   432,     0,   433,   434,     0,     0,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,     0,     0,
       0,     0,     0,   440,     0,     0,   441,     0,     0,     0,
     442,   443,   444,   445,     0,     0,     0,     0,   446,   447,
       0,   448,   449,     0,   138,   450,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,  2620,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,   566,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,     0,     0,   337,
     338,   339,     0,   340,     0,   341,   342,   343,   344,     0,
     345,   346,   347,     0,     0,   348,     0,     0,     0,   349,
     350,   351,   352,   353,     0,     0,   354,   355,   356,     0,
     357,   358,     0,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,     0,   366,   367,     0,     0,     0,   368,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,     0,     0,     0,   379,   380,   381,   382,     0,     0,
       0,   383,     0,     0,     0,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,     0,     0,     0,     0,     0,
       0,   393,   394,     0,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,   135,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,     0,     0,   425,   426,   427,
     428,     0,   429,   430,     0,   431,   432,     0,   433,   434,
       0,     0,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,     0,     0,     0,     0,     0,   440,     0,     0,
     441,     0,     0,     0,   442,   443,   444,   445,     0,     0,
       0,     0,   446,   447,     0,   448,   449,     0,   138,   450,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,   566,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,     0,     0,   337,   338,   339,     0,   340,     0,   341,
     342,   343,   344,     0,   345,   346,   347,     0,     0,   348,
       0,     0,     0,   349,   350,   351,   352,   353,     0,     0,
     354,   355,   356,     0,   357,   358,     0,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,     0,   366,   367,
       0,     0,     0,   368,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,     0,     0,     0,   379,   380,
     381,   382,     0,     0,     0,   383,     0,     0,     0,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,     0,
       0,     0,     0,     0,     0,   393,   394,     0,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,   135,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,     0,
       0,   425,   426,   427,   428,     0,   429,   430,     0,   431,
     432,     0,   433,   434,     0,     0,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,     0,     0,     0,     0,
       0,   440,     0,     0,   441,     0,     0,     0,   442,   443,
     444,   445,     0,     0,     0,     0,   446,   447,     0,   448,
     449,     0,   138,   450,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,  2563,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,     0,     0,   337,   338,   339,
       0,   340,     0,   341,   342,   343,   344,     0,   345,   346,
     347,     0,     0,   348,     0,     0,     0,   349,   350,   351,
     352,   353,     0,     0,   354,   355,   356,     0,   357,   358,
       0,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,     0,   366,   367,     0,     0,     0,   368,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,     0,
       0,     0,   379,   380,   381,   382,     0,     0,     0,   383,
       0,     0,     0,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,     0,     0,     0,     0,     0,     0,   393,
     394,     0,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,   135,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,     0,     0,   425,   426,   427,   428,     0,
     429,   430,     0,   431,   432,     0,   433,   434,     0,     0,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
       0,     0,     0,     0,     0,   440,     0,     0,   441,     0,
       0,     0,   442,   443,   444,   445,     0,     0,     0,     0,
     446,   447,     0,   448,   449,     0,   138,   450,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,  3942,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,  3943,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,     0,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   345,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
       0,   368,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,     0,     0,   425,
     426,   427,   428,     0,   429,   430,     0,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,     0,     0,     0,     0,     0,   440,
       0,     0,   441,     0,     0,     0,   442,   443,   444,   445,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
     138,   450,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
     991,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   324,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,     0,     0,   337,   338,   339,     0,   340,
       0,   341,   342,   343,   344,     0,   345,   346,   347,     0,
       0,   348,     0,     0,     0,   349,   350,   351,   352,   353,
       0,     0,   354,   355,   356,     0,   357,   358,     0,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,     0,
     366,   367,     0,     0,     0,   368,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,     0,     0,     0,
     379,   380,   381,   382,     0,     0,     0,   383,     0,     0,
       0,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,     0,     0,     0,     0,     0,     0,   393,   394,     0,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,     0,     0,   425,   426,   427,   428,     0,   429,   430,
       0,   431,   432,     0,   433,   434,     0,     0,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,     0,     0,
       0,     0,     0,   440,     0,     0,   441,     0,     0,     0,
     442,   443,   444,   445,     0,     0,     0,     0,   446,   447,
       0,   448,   449,     0,   138,   450,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,  1368,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,     0,     0,   337,
     338,   339,     0,   340,     0,   341,   342,   343,   344,     0,
     345,   346,   347,     0,     0,   348,     0,     0,     0,   349,
     350,   351,   352,   353,     0,     0,   354,   355,   356,     0,
     357,   358,     0,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,     0,   366,   367,     0,     0,     0,   368,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,     0,     0,     0,   379,   380,   381,   382,     0,     0,
       0,   383,     0,     0,     0,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,     0,     0,     0,     0,     0,
       0,   393,   394,     0,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,     0,     0,   425,   426,   427,
     428,     0,   429,   430,     0,   431,   432,     0,   433,   434,
       0,     0,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,     0,     0,     0,     0,     0,   440,     0,     0,
     441,     0,     0,     0,   442,   443,   444,   445,     0,     0,
       0,     0,   446,   447,     0,   448,   449,     0,   138,   450,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,  2171,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,     0,     0,   337,   338,   339,     0,   340,     0,   341,
     342,   343,   344,     0,   345,   346,   347,     0,     0,   348,
       0,     0,     0,   349,   350,   351,   352,   353,     0,     0,
     354,   355,   356,     0,   357,   358,     0,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,     0,   366,   367,
       0,     0,     0,   368,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,     0,     0,     0,   379,   380,
     381,   382,     0,     0,     0,   383,     0,     0,     0,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,     0,
       0,     0,     0,     0,     0,   393,   394,     0,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,  2172,   423,   424,     0,     0,
       0,   425,   426,   427,   428,     0,   429,   430,     0,   431,
     432,     0,   433,   434,     0,     0,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,     0,     0,     0,     0,
       0,   440,     0,     0,   441,     0,     0,     0,   442,   443,
     444,   445,     0,     0,     0,     0,   446,   447,     0,   448,
     449,     0,   138,   450,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,     0,     0,   337,   338,   339,
    2336,   340,     0,   341,   342,   343,   344,     0,   345,   346,
     347,     0,     0,   348,     0,     0,     0,   349,   350,   351,
     352,   353,     0,     0,   354,   355,   356,     0,   357,   358,
       0,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,     0,   366,   367,     0,     0,     0,   368,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,     0,
       0,     0,   379,   380,   381,   382,     0,     0,     0,   383,
       0,     0,     0,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,     0,     0,     0,     0,     0,     0,   393,
     394,     0,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,     0,     0,   425,   426,   427,   428,     0,
     429,   430,     0,   431,   432,     0,   433,   434,     0,     0,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
       0,     0,     0,     0,     0,   440,     0,     0,   441,     0,
       0,     0,   442,   443,   444,   445,     0,     0,     0,     0,
     446,   447,     0,   448,   449,     0,   138,   450,   139,   140,
     141,   142,   143,  2660,     0,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   324,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,     0,
       0,   337,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   345,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,   358,     0,   359,   360,   361,     0,     0,
     362,     0,   363,   364,   365,     0,   366,   367,     0,     0,
       0,   368,   369,   370,   371,   372,   373,   374,   375,   376,
       0,   377,   378,     0,     0,     0,   379,   380,   381,   382,
       0,     0,     0,   383,     0,     0,     0,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,   398,   399,     0,     0,   400,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,     0,     0,   425,
     426,   427,   428,     0,   429,   430,     0,   431,   432,     0,
     433,   434,     0,     0,   435,     0,     0,   436,     0,   437,
       0,   438,   439,     0,     0,     0,     0,     0,     0,   440,
       0,     0,   441,     0,     0,     0,   442,   443,   444,   445,
       0,     0,     0,     0,   446,   447,     0,   448,   449,     0,
     138,   450,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   324,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,     0,     0,   337,   338,   339,     0,   340,
       0,   341,   342,   343,   344,     0,   345,   346,   347,     0,
       0,   348,     0,     0,     0,   349,   350,   351,   352,   353,
       0,     0,   354,   355,   356,     0,   357,   358,     0,   359,
     360,   361,     0,     0,   362,     0,   363,   364,   365,     0,
     366,   367,     0,     0,     0,   368,   369,   370,   371,   372,
     373,   374,   375,   376,     0,   377,   378,     0,     0,     0,
     379,   380,   381,   382,     0,     0,     0,   383,     0,     0,
       0,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,     0,     0,     0,     0,     0,     0,   393,   394,     0,
     395,     0,     0,   396,     0,     0,   397,   398,   399,     0,
       0,   400,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,   135,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,     0,     0,   425,   426,   427,   428,     0,   429,   430,
       0,   431,   432,     0,   433,   434,     0,     0,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,     0,     0,
       0,     0,     0,   440,     0,     0,   441,     0,     0,     0,
     442,   443,   444,   445,     0,     0,     0,     0,   446,   447,
       0,   448,   449,     0,   138,   450,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,  2171,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   324,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,     0,     0,   337,
     338,   339,     0,   340,     0,   341,   342,   343,   344,     0,
     345,   346,   347,     0,     0,   348,     0,     0,     0,   349,
     350,   351,   352,   353,     0,     0,   354,   355,   356,     0,
     357,   358,     0,   359,   360,   361,     0,     0,   362,     0,
     363,   364,   365,     0,   366,   367,     0,     0,     0,   368,
     369,   370,   371,   372,   373,   374,   375,   376,     0,   377,
     378,     0,     0,     0,   379,   380,   381,   382,     0,     0,
       0,   383,     0,     0,     0,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,     0,     0,     0,     0,     0,
       0,   393,   394,     0,   395,     0,     0,   396,     0,     0,
     397,   398,   399,     0,     0,   400,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,     0,     0,   425,   426,   427,
     428,     0,   429,   430,     0,   431,   432,     0,   433,   434,
       0,     0,   435,     0,     0,   436,     0,   437,     0,   438,
     439,     0,     0,     0,     0,     0,     0,   440,     0,     0,
     441,     0,     0,     0,   442,   443,   444,   445,     0,     0,
       0,     0,   446,   447,     0,   448,   449,     0,   138,   450,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,     0,     0,   337,   338,   339,     0,   340,     0,   341,
     342,   343,   344,     0,   345,   346,   347,     0,     0,   348,
       0,     0,     0,   349,   350,   351,   352,   353,     0,     0,
     354,   355,   356,     0,   357,   358,     0,   359,   360,   361,
       0,     0,   362,     0,   363,   364,   365,     0,   366,   367,
       0,     0,     0,   368,   369,   370,   371,   372,   373,   374,
     375,   376,     0,   377,   378,     0,     0,     0,   379,   380,
     381,   382,     0,     0,     0,   383,     0,     0,     0,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,     0,
       0,     0,     0,     0,     0,   393,   394,     0,   395,     0,
       0,   396,     0,     0,   397,   398,   399,     0,     0,   400,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,     0,
       0,   425,   426,   427,   428,     0,   429,   430,     0,   431,
     432,     0,   433,   434,     0,     0,   435,     0,     0,   436,
       0,   437,     0,   438,   439,     0,     0,     0,     0,     0,
       0,   440,     0,     0,   441,     0,     0,     0,   442,   443,
     444,   445,     0,     0,     0,     0,   446,   447,     0,   448,
     449,     0,   138,   450,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,  1640,   224,     0,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,  1641,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,   324,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,     0,     0,   337,   338,   339,
       0,   340,     0,   341,   342,   343,   344,     0,   345,   346,
     347,     0,     0,   348,     0,     0,     0,   349,   350,   351,
     352,   353,     0,     0,   354,   355,   356,     0,   357,   358,
       0,   359,   360,   361,     0,     0,   362,     0,   363,   364,
     365,     0,   366,   367,     0,     0,     0,   368,   369,   370,
     371,   372,   373,   374,   375,   376,     0,   377,   378,     0,
       0,     0,   379,   380,   381,   382,     0,     0,     0,   383,
       0,     0,     0,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,     0,     0,     0,     0,     0,     0,   393,
     394,     0,   395,     0,     0,   396,     0,     0,   397,   398,
     399,     0,     0,   400,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,     0,     0,   425,   426,   427,   428,     0,
     429,   430,     0,   431,   432,     0,   433,   434,     0,     0,
     435,     0,     0,   436,     0,   437,     0,   438,   439,     0,
       0,     0,     0,     0,     0,   440,     0,     0,   441,     0,
       0,     0,   442,   443,   444,   445,     0,     0,     0,     0,
     446,   447,     0,   448,   449,     0,   138,   450,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
       0,  -291,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,     0,     0,
       0,     0,   162,  3547,     0,   163,     0,   164,     0,     0,
       0,     0,   167,   168,  3548,   170,   171,     0,   172,   173,
       0,     0,   175,     0,   177,   178,   179,   180,     0,   181,
     182,     0,     0,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,     0,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,     0,
       0,     0,   202,   203,   204,     0,  -261,  -261,   205,     0,
    -261,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,     0,     0,     0,   217,   218,   219,
       0,     0,   220,   221,  3549,   222,   223,   224,     0,     0,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
       0,   236,     0,     0,     0,     0,     0,   239,     0,     0,
       0,   240,   241,   242,   243,  3550,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,     0,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,  3551,
       0,     0,   255,     0,     0,     0,   257,     0,     0,   258,
    3552,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,  -246,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,     0,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
    3553,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   322,   323,   324,     0,     0,   326,   327,
     328,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,     0,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   345,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,     0,     0,   359,     0,   361,  -246,     0,
     362,     0,     0,   364,     0,     0,   366,   367,  3554,     0,
       0,     0,   369,   370,   371,   372,   373,   374,     0,   376,
       0,   377,     0,     0,     0,     0,   379,   380,   381,     0,
       0,     0,     0,   383,     0,     0,     0,   384,     0,   386,
       0,     0,   388,     0,     0,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   399,     0,     0,     0,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,     0,     0,     0,   435,     0,     0,   436,     0,     0,
       0,   438,   439,     0,     0,     0,     0,     0,     0,   440,
       0,     0,   441,     0,     0,     0,   442,   443,   444,   445,
       0,     0,  -246,     0,   446,     0,     0,   448,     0,     0,
     138,   450,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,     0,  -291,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,     0,     0,     0,     0,   162,  3547,     0,   163,
       0,   164,     0,     0,     0,     0,   167,   168,  3548,   170,
     171,     0,   172,   173,     0,     0,   175,     0,   177,   178,
     179,   180,     0,   181,   182,     0,     0,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,     0,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,     0,     0,     0,   202,   203,   204,     0,
    -282,     0,   205,     0,  -282,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,     0,     0,
       0,   217,   218,   219,     0,     0,   220,   221,  3549,   222,
     223,   224,     0,     0,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,     0,   236,     0,     0,     0,     0,
       0,   239,     0,     0,     0,   240,   241,   242,   243,  3550,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,     0,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,  3551,     0,     0,   255,     0,     0,     0,
     257,     0,     0,   258,  3552,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,  -246,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,     0,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,  3553,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   322,   323,   324,
       0,     0,   326,   327,   328,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,     0,   338,   339,     0,   340,
       0,   341,   342,   343,   344,     0,   345,   346,   347,     0,
       0,   348,     0,     0,     0,   349,   350,   351,   352,   353,
       0,     0,   354,   355,   356,     0,   357,     0,     0,   359,
       0,   361,  -246,     0,   362,     0,     0,   364,     0,     0,
     366,   367,  3554,     0,     0,     0,   369,   370,   371,   372,
     373,   374,     0,   376,     0,   377,     0,     0,     0,     0,
     379,   380,   381,     0,     0,     0,     0,   383,     0,     0,
       0,   384,     0,   386,     0,     0,   388,     0,     0,   391,
     392,     0,     0,     0,     0,     0,     0,   393,   394,     0,
     395,     0,     0,   396,     0,     0,   397,     0,   399,     0,
       0,     0,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,   432,     0,     0,     0,     0,     0,   435,     0,
       0,   436,     0,     0,     0,   438,   439,     0,     0,     0,
       0,     0,     0,   440,     0,     0,   441,     0,     0,     0,
     442,   443,   444,   445,  -282,     0,  -246,     0,   446,     0,
       0,   448,     0,     0,   138,   450,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,     0,  -291,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,     0,     0,     0,     0,
     162,  3547,     0,   163,     0,   164,     0,     0,     0,     0,
     167,   168,  3548,   170,   171,     0,   172,   173,     0,     0,
     175,     0,   177,   178,   179,   180,     0,   181,   182,     0,
       0,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,     0,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,     0,     0,     0,
     202,   203,   204,     0,  -279,     0,   205,     0,  -279,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,     0,     0,     0,   217,   218,   219,     0,     0,
     220,   221,  3549,   222,   223,   224,     0,     0,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,     0,   236,
       0,     0,     0,     0,     0,   239,     0,     0,     0,   240,
     241,   242,   243,  3550,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,     0,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,  3551,     0,     0,
     255,     0,     0,     0,   257,     0,     0,   258,  3552,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
    -246,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,     0,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,  3553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   326,   327,   328,     0,
     330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     338,   339,     0,   340,     0,   341,   342,   343,   344,     0,
     345,   346,   347,     0,     0,   348,     0,     0,     0,   349,
     350,   351,   352,   353,     0,     0,   354,   355,   356,     0,
     357,     0,     0,   359,     0,   361,  -246,     0,   362,     0,
       0,   364,     0,     0,   366,   367,  3554,     0,     0,     0,
     369,   370,   371,   372,   373,   374,     0,   376,     0,   377,
       0,     0,     0,     0,   379,   380,   381,     0,     0,     0,
       0,   383,     0,     0,     0,   384,     0,   386,     0,     0,
     388,     0,     0,   391,   392,     0,     0,     0,     0,     0,
       0,   393,   394,     0,   395,     0,     0,   396,     0,     0,
     397,     0,   399,     0,     0,     0,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,     0,
       0,     0,   435,     0,     0,   436,     0,     0,     0,   438,
     439,     0,     0,     0,     0,     0,     0,   440,     0,     0,
     441,     0,     0,     0,   442,   443,   444,   445,  -279,     0,
    -246,     0,   446,     0,     0,   448,     0,     0,   138,   450,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -291,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
       0,     0,     0,     0,   162,  3547,     0,   163,     0,   164,
       0,     0,     0,     0,   167,   168,  3548,   170,   171,     0,
     172,   173,     0,     0,   175,     0,   177,   178,   179,   180,
       0,   181,   182,     0,     0,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,     0,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,     0,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,  3862,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,     0,     0,     0,   217,
     218,   219,     0,     0,   220,   221,  3549,   222,   223,   224,
       0,     0,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,     0,   236,     0,     0,     0,     0,     0,   239,
       0,     0,     0,   240,   241,   242,   243,  3550,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
       0,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,  3551,     0,     0,   255,     0,     0,     0,   257,     0,
       0,   258,  3552,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,  -246,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
       0,   313,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,  3553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   324,     0,     0,
     326,   327,   328,     0,   330,   331,   332,   333,   334,   335,
       0,     0,     0,     0,   338,   339,     0,   340,     0,   341,
     342,   343,   344,     0,   345,   346,   347,     0,     0,   348,
       0,     0,     0,   349,   350,   351,   352,   353,     0,     0,
     354,   355,   356,     0,   357,     0,     0,   359,     0,   361,
    -246,     0,   362,     0,     0,   364,     0,     0,   366,   367,
    3554,     0,     0,     0,   369,   370,   371,   372,   373,   374,
       0,   376,     0,   377,     0,     0,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   383,     0,     0,     0,   384,
       0,   386,     0,     0,   388,     0,     0,   391,   392,     0,
       0,     0,     0,     0,     0,   393,   394,     0,   395,     0,
       0,   396,     0,     0,   397,     0,   399,     0,     0,     0,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,     0,     0,     0,   435,     0,     0,   436,
       0,     0,     0,   438,   439,     0,     0,     0,     0,     0,
       0,   440,     0,     0,   441,     0,     0,     0,   442,   443,
     444,   445,     0,     0,  -246,     0,   446,     0,     0,   448,
       0,     0,   138,   450,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,     0,  -291,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,     0,     0,     0,     0,   162,  3547,
       0,   163,     0,   164,     0,     0,     0,     0,   167,   168,
    3548,   170,   171,     0,   172,   173,     0,     0,   175,     0,
     177,   178,   179,   180,     0,   181,   182,     0,     0,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,     0,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,     0,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,  -284,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
       0,     0,     0,   217,   218,   219,     0,     0,   220,   221,
    3549,   222,   223,   224,     0,     0,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,     0,   236,     0,     0,
       0,     0,     0,   239,     0,     0,     0,   240,   241,   242,
     243,  3550,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,     0,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,  3551,     0,     0,   255,     0,
       0,     0,   257,     0,     0,   258,  3552,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,  -246,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,     0,   313,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,  3553,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   322,
     323,   324,     0,     0,   326,   327,   328,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,     0,   338,   339,
       0,   340,     0,   341,   342,   343,   344,     0,   345,   346,
     347,     0,     0,   348,     0,     0,     0,   349,   350,   351,
     352,   353,     0,     0,   354,   355,   356,     0,   357,     0,
       0,   359,     0,   361,  -246,     0,   362,     0,     0,   364,
       0,     0,   366,   367,  3554,     0,     0,     0,   369,   370,
     371,   372,   373,   374,     0,   376,     0,   377,     0,     0,
       0,     0,   379,   380,   381,     0,     0,     0,     0,   383,
       0,     0,     0,   384,     0,   386,     0,     0,   388,     0,
       0,   391,   392,     0,     0,     0,     0,     0,     0,   393,
     394,     0,   395,     0,     0,   396,     0,     0,   397,     0,
     399,     0,     0,     0,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,     0,     0,     0,
     435,     0,     0,   436,     0,     0,     0,   438,   439,     0,
       0,     0,     0,     0,     0,   440,     0,     0,   441,     0,
       0,     0,   442,   443,   444,   445,     0,     0,  -246,     0,
     446,     0,     0,   448,     0,     0,   138,   450,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
       0,  -291,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,     0,     0,
       0,     0,   162,  3547,     0,   163,     0,   164,     0,     0,
       0,     0,   167,   168,  3548,   170,   171,     0,   172,   173,
       0,     0,   175,     0,   177,   178,   179,   180,     0,   181,
     182,     0,     0,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,     0,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,     0,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
    3947,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,     0,     0,     0,   217,   218,   219,
       0,     0,   220,   221,  3549,   222,   223,   224,     0,     0,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
       0,   236,     0,     0,     0,     0,     0,   239,     0,     0,
       0,   240,   241,   242,   243,  3550,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,     0,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,  3551,
       0,     0,   255,     0,     0,     0,   257,     0,     0,   258,
    3552,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,  -246,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,     0,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
    3553,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   322,   323,   324,     0,     0,   326,   327,
     328,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,     0,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   345,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,     0,     0,   359,     0,   361,  -246,     0,
     362,     0,     0,   364,     0,     0,   366,   367,  3554,     0,
       0,     0,   369,   370,   371,   372,   373,   374,     0,   376,
       0,   377,     0,     0,     0,     0,   379,   380,   381,     0,
       0,     0,     0,   383,     0,     0,     0,   384,     0,   386,
       0,     0,   388,     0,     0,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   399,     0,     0,     0,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,     0,     0,     0,   435,     0,     0,   436,     0,     0,
       0,   438,   439,     0,     0,     0,     0,     0,     0,   440,
       0,     0,   441,     0,     0,     0,   442,   443,   444,   445,
       0,     0,  -246,     0,   446,     0,     0,   448,     0,     0,
     138,   450,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,     0,  -291,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,     0,     0,     0,     0,   162,  3547,     0,   163,
       0,   164,     0,     0,     0,     0,   167,   168,  3548,   170,
     171,     0,   172,   173,     0,     0,   175,     0,   177,   178,
     179,   180,     0,   181,   182,     0,     0,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,     0,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,     0,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,  3985,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,     0,     0,
       0,   217,   218,   219,     0,     0,   220,   221,  3549,   222,
     223,   224,     0,     0,     0,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,     0,   236,     0,     0,     0,     0,
       0,   239,     0,     0,     0,   240,   241,   242,   243,  3550,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,     0,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,  3551,     0,     0,   255,     0,     0,     0,
     257,     0,     0,   258,  3552,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,  -246,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,     0,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,  3553,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   322,   323,   324,
       0,     0,   326,   327,   328,     0,   330,   331,   332,   333,
     334,   335,     0,     0,     0,     0,   338,   339,     0,   340,
       0,   341,   342,   343,   344,     0,   345,   346,   347,     0,
       0,   348,     0,     0,     0,   349,   350,   351,   352,   353,
       0,     0,   354,   355,   356,     0,   357,     0,     0,   359,
       0,   361,  -246,     0,   362,     0,     0,   364,     0,     0,
     366,   367,  3554,     0,     0,     0,   369,   370,   371,   372,
     373,   374,     0,   376,     0,   377,     0,     0,     0,     0,
     379,   380,   381,     0,     0,     0,     0,   383,     0,     0,
       0,   384,     0,   386,     0,     0,   388,     0,     0,   391,
     392,     0,     0,     0,     0,     0,     0,   393,   394,     0,
     395,     0,     0,   396,     0,     0,   397,     0,   399,     0,
       0,     0,   401,     0,   402,   403,   404,   405,   406,     0,
       0,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,     0,     0,   416,   417,     0,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,   432,     0,     0,     0,     0,     0,   435,     0,
       0,   436,     0,     0,     0,   438,   439,     0,     0,     0,
       0,     0,     0,   440,     0,     0,   441,     0,     0,     0,
     442,   443,   444,   445,     0,     0,  -246,     0,   446,     0,
       0,   448,     0,     0,   138,   450,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,     0,  -291,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,     0,     0,     0,     0,
     162,  3547,     0,   163,     0,   164,     0,     0,     0,     0,
     167,   168,  3548,   170,   171,     0,   172,   173,     0,     0,
     175,     0,   177,   178,   179,   180,     0,   181,   182,     0,
       0,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,     0,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,     0,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,  -265,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,     0,     0,     0,   217,   218,   219,     0,     0,
     220,   221,  3549,   222,   223,   224,     0,     0,     0,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,     0,   236,
       0,     0,     0,     0,     0,   239,     0,     0,     0,   240,
     241,   242,   243,  3550,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,     0,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,  3551,     0,     0,
     255,     0,     0,     0,   257,     0,     0,   258,  3552,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
    -246,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,     0,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,  3553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   326,   327,   328,     0,
     330,   331,   332,   333,   334,   335,     0,     0,     0,     0,
     338,   339,     0,   340,     0,   341,   342,   343,   344,     0,
     345,   346,   347,     0,     0,   348,     0,     0,     0,   349,
     350,   351,   352,   353,     0,     0,   354,   355,   356,     0,
     357,     0,     0,   359,     0,   361,  -246,     0,   362,     0,
       0,   364,     0,     0,   366,   367,  3554,     0,     0,     0,
     369,   370,   371,   372,   373,   374,     0,   376,     0,   377,
       0,     0,     0,     0,   379,   380,   381,     0,     0,     0,
       0,   383,     0,     0,     0,   384,     0,   386,     0,     0,
     388,     0,     0,   391,   392,     0,     0,     0,     0,     0,
       0,   393,   394,     0,   395,     0,     0,   396,     0,     0,
     397,     0,   399,     0,     0,     0,   401,     0,   402,   403,
     404,   405,   406,     0,     0,   407,   408,   409,   410,     0,
     411,   412,     0,     0,   413,   414,   415,     0,     0,   416,
     417,     0,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,     0,
       0,     0,   435,     0,     0,   436,     0,     0,     0,   438,
     439,     0,     0,     0,     0,     0,     0,   440,     0,     0,
     441,     0,     0,     0,   442,   443,   444,   445,     0,     0,
    -246,     0,   446,     0,     0,   448,     0,     0,   138,   450,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,     0,  -291,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
       0,     0,     0,     0,   162,  3547,     0,   163,     0,   164,
       0,     0,     0,     0,   167,   168,  3548,   170,   171,     0,
     172,   173,     0,     0,   175,     0,   177,   178,   179,   180,
       0,   181,   182,     0,     0,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,     0,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,     0,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,     0,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,     0,     0,     0,   217,
     218,   219,     0,     0,   220,   221,  3549,   222,   223,   224,
       0,     0,     0,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,     0,   236,     0,     0,     0,     0,     0,   239,
       0,     0,     0,   240,   241,   242,   243,  3550,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
       0,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,  3551,     0,     0,   255,     0,     0,     0,   257,     0,
       0,   258,  3552,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,  -246,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
       0,   313,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,  3553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   324,     0,     0,
     326,   327,   328,     0,   330,   331,   332,   333,   334,   335,
       0,     0,     0,     0,   338,   339,     0,   340,     0,   341,
     342,   343,   344,     0,   345,   346,   347,     0,     0,   348,
       0,     0,     0,   349,   350,   351,   352,   353,     0,     0,
     354,   355,   356,     0,   357,     0,     0,   359,     0,   361,
    -246,     0,   362,     0,     0,   364,     0,     0,   366,   367,
    3554,     0,     0,     0,   369,   370,   371,   372,   373,   374,
       0,   376,     0,   377,     0,     0,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   383,     0,     0,     0,   384,
       0,   386,     0,     0,   388,     0,     0,   391,   392,     0,
       0,     0,     0,     0,     0,   393,   394,     0,   395,     0,
       0,   396,     0,     0,   397,     0,   399,     0,     0,     0,
     401,     0,   402,   403,   404,   405,   406,     0,     0,   407,
     408,   409,   410,     0,   411,   412,     0,     0,   413,   414,
     415,     0,     0,   416,   417,     0,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,     0,     0,     0,   435,     0,     0,   436,
       0,     0,     0,   438,   439,     0,     0,     0,     0,     0,
       0,   440,     0,     0,   441,     0,     0,     0,   442,   443,
     444,   445,     0,     0,  -246,     0,   446,     0,     0,   448,
       0,     0,   138,   450,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,     0,  -291,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,     0,     0,     0,     0,   162,  3547,
       0,   163,     0,   164,     0,     0,     0,     0,   167,   168,
    3548,   170,   171,     0,   172,   173,     0,     0,   175,     0,
     177,   178,   179,   180,     0,   181,   182,     0,     0,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,     0,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,     0,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,     0,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
       0,     0,     0,   217,   218,   219,     0,     0,   220,   221,
    3549,   222,   223,   224,     0,     0,     0,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,     0,   236,     0,     0,
       0,     0,     0,   239,     0,     0,     0,   240,   241,   242,
     243,  3550,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,     0,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,  3551,     0,     0,   255,     0,
       0,     0,   257,     0,     0,   258,  3552,     0,   259,   260,
       0,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,  -246,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,     0,   313,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,  3553,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   322,
     323,   324,     0,     0,   326,   327,   328,     0,   330,   331,
     332,   333,   334,   335,     0,     0,     0,     0,   338,   339,
       0,   340,     0,   341,   342,   343,   344,     0,   345,   346,
     347,     0,     0,   348,     0,     0,     0,   349,   350,   351,
     352,   353,     0,     0,   354,   355,   356,     0,   357,     0,
       0,   359,     0,   361,  -246,     0,   362,     0,     0,   364,
       0,     0,   366,   367,  3554,     0,     0,     0,   369,   370,
     371,   372,   373,   374,     0,   376,     0,   377,     0,     0,
       0,     0,   379,   380,   381,     0,     0,     0,     0,   383,
       0,     0,     0,   384,     0,   386,     0,     0,   388,     0,
       0,   391,   392,     0,     0,     0,     0,     0,     0,   393,
     394,     0,   395,     0,     0,   396,     0,     0,   397,     0,
     399,     0,     0,     0,   401,     0,   402,   403,   404,   405,
     406,     0,     0,   407,   408,   409,   410,     0,   411,   412,
       0,     0,   413,   414,   415,     0,     0,   416,   417,     0,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,     0,     0,     0,
     435,     0,     0,  3865,     0,     0,     0,   438,   439,     0,
       0,     0,     0,     0,     0,   440,     0,     0,   441,     0,
       0,     0,   442,   443,   444,   445,     0,     0,  -246,     0,
     446,     0,     0,   448,     0,     0,   138,   450,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
       0,     0,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,     0,     0,
       0,     0,   162,     0,     0,   163,     0,   164,     0,     0,
       0,     0,   167,   168,     0,   170,   171,     0,   172,   173,
       0,     0,   175,     0,   177,   178,   179,   180,     0,   181,
     182,     0,     0,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,     0,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,     0,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
       0,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,     0,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
       0,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
       0,   236,     0,     0,     0,     0,     0,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,     0,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,     0,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,     0,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   322,   323,   324,     0,     0,   326,   327,
     328,     0,   330,   331,   332,   333,   334,   335,     0,     0,
       0,     0,   338,   339,     0,   340,     0,   341,   342,   343,
     344,     0,   345,   346,   347,     0,     0,   348,     0,     0,
       0,   349,   350,   351,   352,   353,     0,     0,   354,   355,
     356,     0,   357,     0,     0,   359,     0,   361,     0,     0,
     362,     0,     0,   364,     0,     0,   366,   367,     0,     0,
       0,     0,   369,   370,   371,   372,   373,   374,     0,   376,
       0,   377,     0,     0,     0,     0,   379,   380,   381,     0,
       0,     0,     0,   383,     0,     0,     0,   384,     0,   386,
       0,     0,   388,     0,     0,   391,   392,     0,     0,     0,
       0,     0,     0,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   399,     0,     0,     0,   401,     0,
     402,   403,   404,   405,   406,     0,     0,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,     0,
       0,   416,   417,     0,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,     0,     0,     0,   435,     0,     0,   436,     0,     0,
       0,   438,   439,     0,     0,     0,     0,     0,     0,   440,
       0,     0,   441,     0,     0,     0,   442,   443,   444,   445,
       0,     0,     0,     0,   446,     0,     0,   448,     0,     0,
       0,   450
};

static const yytype_int16 yycheck[] =
{
       7,   592,   527,   731,   527,   601,   602,   910,    21,   909,
     632,   633,   548,    20,     5,  1089,    23,    30,   121,   824,
     637,   944,  1657,    36,   617,    32,   747,     7,  1060,  1557,
    1209,   562,  1089,  1269,   850,    42,   848,   874,  2220,  2150,
    2290,  2181,  1036,   477,  2496,  1955,    53,   669,  2107,  1112,
    1960,  1153,  2174,  2175,  2176,  2597,  1119,  1334,   874,  1620,
    2548,   914,  1360,   875,   914,  2208,  1027,   689,  2318,  2968,
    1935,  2409,  1811,  1811,   691,  2941,  1813,   694,  1742,   701,
     702,   703,    23,  2395,  1352,  2397,    93,   534,  1120,  1121,
    2185,  2186,  1124,  1125,  1126,  1127,  2285,  1129,  1130,  1131,
    1132,  1133,  1134,  1135,  1136,   656,  2165,   606,   115,  1919,
     117,  1919,  1656,   120,   121,   122,   709,   710,   711,  2201,
    1814,    15,    16,    33,  1818,  2947,    16,  2209,   721,   720,
     137,  2271,  1794,    18,    18,  1829,  1283,   117,  2733,  2266,
     120,    18,  1342,    18,  3186,  1839,  1414,  2259,    15,    16,
      57,    58,    93,  1300,  2266,  2295,  2296,  2269,  2422,  1803,
      24,  2273,  2426,  1310,  1311,    58,  3001,  3002,  2249,  2250,
    3005,    50,    15,    16,  1683,  2287,  2288,  1908,    20,  1785,
    1919,  1919,    35,    16,    60,  2297,   175,   157,    29,  3024,
     580,   876,    24,    96,   127,  3030,   137,    62,   588,   589,
      35,    20,    90,   116,   112,    15,    16,    15,    16,    45,
      18,   112,    24,   112,    33,    57,    58,  2262,   749,  1757,
    1882,  2425,  2374,    60,   135,  1887,  2399,   170,    47,   109,
     157,  1893,  1894,   141,   178,  1897,  2541,   210,    57,    58,
     141,   222,   141,   345,    71,    66,   334,  1937,  1766,  1767,
    1352,   141,   205,   339,   359,   328,  1435,   141,   288,   416,
     145,   145,   205,  3697,   410,  1783,  3183,    54,   145,  3135,
     145,  2653,   124,     8,    65,   806,   130,    15,    16,    15,
      16,   314,  1800,  1801,    33,  2366,  2367,   167,   594,   147,
     135,    15,    16,   229,   916,   171,  1024,   432,  1816,  1817,
     175,  1819,   215,   336,  1822,  1823,   246,   790,  1826,   249,
     361,   143,  1414,  1831,   175,    15,    16,  1835,  1836,  1837,
    1838,    15,    16,   278,  1842,  1843,   135,  1845,  2193,    41,
      98,   116,   126,  1851,    15,    16,  1854,  1855,  1856,  1857,
     193,   113,   172,    20,    15,    16,   210,  1075,   473,   432,
     327,  1079,  2253,    12,   190,   328,    33,  2876,   193,   175,
     750,   464,    15,    16,   811,   251,    15,    16,    40,   470,
      47,    60,   968,   170,   970,   971,    50,   262,   210,   259,
      57,    58,  3281,  3218,  3525,  1903,  1904,  1905,  1906,   499,
      65,    22,  3227,  3193,   543,   498,   122,   498,   210,   399,
      15,    16,   222,   208,   311,    61,   222,   205,   205,    12,
     893,   137,  3247,   383,   472,  2867,   278,  3252,   476,  1322,
     284,   241,   134,   400,   254,  2944,   551,   382,   818,  1150,
     165,   375,   589,  3350,   583,    15,    16,   583,   744,   175,
     208,   293,    74,   329,   384,   141,   581,   563,   499,   221,
     344,   331,   284,   347,   361,   408,   383,   464,  2580,   466,
     321,  2604,  1274,  2207,   262,  1277,   125,  3289,   468,  3335,
     969,  2161,   284,  1285,   481,  1026,   581,   344,   485,   415,
     347,   583,   171,   556,    63,  3919,  2668,   494,  1039,  1342,
    2612,   498,  1342,   500,   449,   583,   328,   373,   581,   506,
    1312,  1313,   387,   589,   477,   512,    15,    16,  1610,    99,
     543,   305,   102,  3654,  2253,  2253,   328,  1785,  1334,    15,
      16,   152,   125,  2650,  1115,   346,   175,   534,   535,   278,
    1123,    15,    16,   421,   344,   414,   344,   347,  2650,   347,
     327,    15,    16,  1811,  2671,  2410,   553,  1140,   938,   245,
     494,   581,  2214,   244,    61,   562,  1588,   564,   395,  2671,
    1413,  3383,  1860,  1413,  2374,   506,  2374,  1599,   575,   576,
    1602,   227,  2954,   580,  1008,  1009,    15,    16,   432,   586,
    2885,   588,   589,   556,   449,   383,   593,   594,  2132,  1736,
     426,   598,    15,    16,   583,  1029,   576,  3139,  2750,   542,
    2773,   608,   583,  2648,  1038,   612,   344,  2251,   344,   347,
    2272,   347,  2274,   583,   541,  3657,  1050,  1051,  1052,  2281,
     344,  1582,  1307,   347,   537,  1059,  2232,    15,    16,    15,
      16,  1352,  2294,   510,   575,  2374,  2374,  2368,  2300,  2301,
    1908,   157,   522,   746,   344,   477,   499,   347,   559,   656,
     344,  1919,   555,   347,  2316,  2317,   532,   550,  2167,  2770,
      15,    16,  2200,   344,   499,   477,   347,   323,  2749,   510,
     603,   581,   562,   344,   568,  3270,   347,   510,  3500,   587,
     565,   588,   473,  1785,   373,  3584,   587,   529,   587,  2554,
    2555,   344,   586,  1414,   347,   344,   523,   587,   347,   557,
     109,   568,  1902,   587,   583,    15,    16,   714,   583,   716,
     529,    15,    16,  3630,   559,   582,   583,    68,  2408,   583,
     227,  2985,    15,    16,   556,   568,   494,   581,  3528,   344,
    2365,   585,   347,   740,   741,   742,  2637,   744,   745,   746,
     414,   748,   749,   750,   556,   542,   849,  1278,    15,    16,
     559,   583,   537,  1200,   141,  3019,  3020,  2879,   568,  1258,
     568,   741,  2280,  3027,   344,   745,   176,   347,   748,  1159,
    3034,  2882,   582,   583,  2292,  3597,    15,    16,   785,  2983,
    2984,  1228,   576,   577,   578,   579,  2975,  2991,  2931,   796,
    2994,  2995,  2935,    15,    16,  2917,   428,   469,   473,   806,
     807,  3700,    31,   141,   811,   543,  1908,  3011,   387,   800,
     178,   818,   129,   469,    15,    16,   488,  1919,   205,    15,
      16,  3025,  1212,  1346,  2951,   481,  3030,  3031,  3032,  3033,
     568,  3666,   568,  3668,  2893,   344,    10,  1227,   347,  2951,
    3178,   513,   849,   532,   568,   583,   262,   583,   344,  2931,
     259,   347,   529,  2935,  2372,   796,    15,    16,   582,   583,
     344,  2605,  2606,   347,   560,   131,   807,   383,   568,   560,
     344,   315,   213,   347,   568,   113,   553,    15,    16,    69,
      78,   222,   582,   583,    42,    15,    16,   568,   582,   583,
     110,   587,    95,   531,    15,    16,  1733,   568,  2637,  2637,
      11,   582,   583,   910,   581,   344,  1829,   245,   347,  3731,
     566,  2776,   583,   503,  1726,   568,   506,  1733,  3460,   568,
    1367,   344,   331,  1735,   347,  1762,  1738,  1739,   145,   582,
     583,   938,  2596,   582,   941,   942,   364,  3686,   114,   145,
    2750,    50,  2750,  3809,   582,   427,  1762,   357,   151,  2185,
    2186,   186,  1984,   568,   175,  1506,   344,   499,   344,   347,
     213,   347,   601,   602,  2232,   261,   172,   582,   583,   222,
      19,   387,  2535,  3285,   481,   178,  2713,   151,  3073,    15,
      16,   171,   989,   221,   991,  2253,    15,    16,   568,   344,
    2053,    76,   347,   222,   229,   231,  3444,   196,   219,  1102,
     220,   942,   113,   583,    15,    16,   229,   375,  1601,   350,
    1606,  2750,  2750,   364,  3352,   244,   112,   240,   208,  1026,
    2714,   408,  1558,  2321,     6,   541,   377,  3170,  3171,   449,
    2665,   392,  1039,  2212,   344,     8,  1139,   347,   448,   342,
     344,  3163,   232,   347,    15,    16,   588,  2194,   989,  1902,
     991,   344,  1902,  2616,   347,   499,    29,    15,    16,   568,
    3551,  3552,    15,    16,  1785,  2059,  2060,   583,   117,  3968,
      15,    16,   568,    55,   583,  2940,  2150,   344,    15,    16,
     347,   525,  1089,   349,   568,  1616,   262,   583,   494,   294,
     175,  2052,   512,  2150,   568,  1102,   183,   350,  3190,   583,
    2368,  2062,  3590,  3551,  3552,   344,  2374,  3856,   347,   583,
     345,   407,   160,   522,  2675,  1218,   449,   280,   315,   245,
      15,    16,   344,   440,   345,   347,   494,   245,    24,   568,
    2232,   183,  1139,   364,  1665,  1666,  2210,  1144,    15,    16,
     491,   151,  1149,   344,   583,   568,   347,   129,   344,   565,
    3692,   347,  1159,  2210,    15,    16,   314,    16,  3610,    51,
     583,   172,   143,   514,   251,   526,  2443,   396,    60,   389,
     109,  1694,   375,   336,   109,  3085,  3287,   262,    15,    16,
     568,   335,   568,   373,   382,   344,   256,  1908,   347,  1196,
    3939,  1198,  3941,  1200,     0,   583,   419,   583,  1919,   251,
     587,   375,    15,    16,   432,  1212,   344,   361,  1149,   347,
    1201,  1218,  3961,   568,   344,    15,    16,   347,   327,   345,
    1227,  1228,   560,   344,   441,  2299,   347,   345,   583,   210,
     510,  1238,   167,  2412,   330,   441,   347,  3685,  3686,  1246,
     310,   582,  2299,   141,    15,    16,  1349,  3996,  3997,   587,
      15,    16,  1259,  1260,  1261,  1262,  1263,  1264,   568,   479,
      15,    16,  1253,  3805,   568,   561,  2368,   126,  1275,  1276,
     370,  1278,  2374,   583,   473,   568,   138,  1284,   582,  1259,
    1260,  1261,   330,  1263,   520,   337,   148,    15,    16,   470,
     583,   494,   497,   467,  3386,  3387,  1276,  1304,   937,   432,
      66,   568,   499,   583,  1284,   414,   315,   543,   344,    15,
      16,   347,   515,   360,   210,   344,   583,    69,   347,   524,
     259,  1262,   432,  1264,   259,  3773,   562,   165,   525,   568,
     175,   440,   190,   344,    15,    16,   347,  2260,    12,  2262,
    3788,   515,  1349,   325,   583,   499,   568,   328,   987,   466,
     437,  3462,   555,   581,  3802,   402,  1363,   585,   186,   251,
    1367,   583,   145,  1304,  1355,   375,   145,   568,   485,  2637,
      15,    16,   568,   344,   232,  1366,   347,  3868,  3869,    15,
      16,   555,   583,   149,   581,   437,   344,   583,   284,   347,
    3300,   344,   331,   432,   347,   114,   331,   235,   151,   344,
     245,   440,   347,   473,   386,   531,   388,   344,  3856,   568,
     347,  1418,   432,  1420,  1421,  1422,  1423,  1424,   581,   171,
    3868,  3869,  1363,   604,   583,  1432,   325,  1434,   473,  2492,
     568,    15,    16,    15,    16,    15,    16,   494,   568,    12,
    1420,  1421,  1422,  3502,   432,   583,   305,   568,   581,   344,
      77,   125,   347,   583,    12,  3903,   208,   467,    15,    16,
      20,   582,  2536,  2056,   280,  3913,    93,   344,    12,   517,
     347,   581,   371,    33,   519,   194,   432,    15,    16,  2536,
     232,   343,  2750,   344,   113,   533,   347,    47,   208,   327,
     499,  3939,  2524,  3941,    15,    16,   477,    57,    58,  1506,
    1507,    15,    16,  3951,   510,   515,   432,   344,   547,   548,
     347,  2232,   232,  3961,   190,  3963,   525,  3965,  1621,   562,
     336,   581,  2118,  3975,  3972,  3192,    15,    16,  1962,   589,
     447,   344,   568,  3981,   347,   520,   583,   324,   325,   568,
     583,  1975,   581,   262,   344,   555,   582,   347,  3996,  3997,
    3185,   589,   125,   582,    15,    16,   232,   568,   543,  1566,
      16,   581,    15,    16,  4012,  4013,   204,   125,  3235,  4017,
     422,   582,   581,   344,  2008,   556,   347,    15,    16,   344,
     346,   125,   347,   522,   443,   444,  3836,   522,  3710,   344,
     581,   491,   347,   581,   494,    15,    16,   568,   589,    15,
      16,  1608,   583,  3743,    15,    16,    15,    16,   360,  1616,
     568,   582,    15,    16,  1621,   568,   344,   432,   535,   347,
    1627,   373,  1629,   568,   582,   581,   109,  1634,  1635,   582,
    1637,   568,    15,    16,   186,  2069,   498,   582,   344,   550,
     540,   347,   553,  1650,   496,   582,  1653,  2368,  2750,   266,
     267,    15,    16,  2374,   571,   581,   496,   259,  1665,  1666,
    1667,  1668,   494,   344,   926,   927,   347,   208,  1675,  1676,
    1677,   204,  1663,   568,    15,    16,    15,    16,    15,    16,
      15,    16,  1673,   186,   167,   575,  1693,   582,   540,    15,
      16,   568,   582,  1634,  1635,  1702,  1637,   575,  3880,   344,
     339,   963,   347,   555,   582,   582,  1697,   568,   344,  1650,
     193,   347,  1653,   572,   573,   574,   575,   576,   577,   578,
     579,   582,   387,    15,    16,  2648,  1667,  1668,   219,   331,
    1737,   568,   547,   548,  1675,  1676,  1677,    56,   582,   583,
     109,   406,  1749,  2548,   491,   582,   201,   494,   203,  1756,
    2587,    15,    16,   355,   175,   568,  2279,    15,    16,  3645,
     344,  3647,   344,   347,   344,   347,   581,   347,   568,   582,
     435,  2587,   184,   582,   583,    46,   259,    15,    16,  1770,
     397,   398,   582,  2595,   315,   160,  2780,   344,  1779,  1780,
     347,  2714,   582,   583,    89,   543,  1737,   568,   167,  1790,
    1791,  1792,  1793,   568,  1795,  1796,   344,  2801,  2802,   347,
     262,   582,  2886,   568,  1917,  1756,   562,   582,  3480,  3481,
    3482,  3483,   582,   344,   193,   587,   347,   582,  2822,  2886,
     344,    15,    16,   347,   582,   583,   128,  3073,   157,  1635,
     568,  1637,   161,   538,    16,   589,  1853,   341,   331,   467,
      57,    58,  1955,   172,   582,   344,   581,  1960,   347,    66,
     171,  1868,   568,    15,    16,  2939,    15,    16,   408,   281,
     282,     6,  1879,   581,   286,   287,   582,    15,    16,  1675,
    1676,  1677,  2939,   344,   582,   583,   347,   568,   582,   583,
     259,   344,  1883,  1884,   347,  1886,  2970,  1888,  1889,  1890,
    1891,  1892,  2498,   581,  1895,  1896,   344,    15,    16,   347,
    1917,   175,   109,  2970,    11,  1922,   211,   581,  3446,   581,
     522,  2655,   502,   568,   344,  1932,  1933,   347,   344,   582,
     583,   347,   568,   344,   229,   344,   347,   582,   347,   582,
     583,   344,  2045,   583,   347,   240,   582,   581,  1955,   324,
     325,   581,  2686,  1960,   126,   330,    70,   581,   109,   582,
     583,   344,   331,  2697,   347,   581,  2700,   581,   499,   529,
     167,   582,   583,   292,  2077,   581,  3611,    15,    16,   499,
     344,   582,   583,   347,   568,   581,   568,  3166,   568,   549,
     550,  1932,  1933,   581,   525,   581,   193,   589,   582,   154,
     582,   477,  2533,   344,   201,   344,   347,   344,   347,   344,
     347,   568,   347,   581,  3212,  3213,   167,  1185,   344,   314,
    1188,   347,   581,  1191,    18,   582,   581,  3225,  2991,  2750,
     568,  2994,  2995,  3231,   581,    24,   581,   175,  2045,   522,
     336,  3703,   193,   543,   582,  3039,  2577,   568,  3011,   581,
     581,   581,   344,  2487,   568,   347,  3254,   582,   583,  3257,
    3134,   582,   259,  2070,   383,    57,    58,   175,   582,   581,
    2077,   581,  2175,  3591,  2177,  2178,   581,  3134,   109,   568,
     344,    70,   502,   347,   529,   530,   344,   532,  3723,   347,
     459,   502,   422,   582,   581,    89,   210,   582,   583,  3617,
     581,   139,  3620,  3621,  3622,  3623,   344,   568,   259,   347,
      89,   582,   583,     3,   581,   568,  2219,  2220,   581,     9,
      10,   582,   582,   583,   419,   342,  2133,   479,   480,   582,
     568,   483,   484,   305,   331,   487,   167,   489,   581,    29,
     582,   583,   517,  2150,   582,    35,   581,   141,   568,    39,
      24,   145,   568,   522,   143,   582,   583,   568,   533,   568,
     344,  2168,  2169,   347,    70,   568,   582,   581,  2175,   158,
    2177,  2178,   374,   582,   581,    81,   170,  2168,   172,   582,
     331,   541,   542,   478,   544,   568,   546,  2290,  3091,   582,
     583,   581,   186,   582,   583,   344,    70,   191,   347,   582,
      12,  3719,  3720,  2210,   568,   581,   344,   581,   322,   347,
    3728,   205,  2219,  2220,   328,  2318,    70,   211,   582,   582,
     583,   210,   581,    18,   581,   219,   581,   568,   259,   568,
     581,   568,   211,   568,   581,   229,   344,   582,   583,   347,
     130,   582,   568,   582,   491,   582,   240,   582,  2261,   581,
     229,   245,  2259,   581,    56,   336,   582,  2270,   126,  2266,
     254,   240,  2269,  2276,   583,   581,  2273,   581,  2275,   582,
     583,   443,   444,   582,   583,   581,   568,   581,  2285,   393,
    2287,  2288,   581,  2290,   158,  2298,  2277,  2278,   581,   143,
    2297,  2304,  2299,   581,    89,   284,  3958,  2310,  2311,   581,
     331,   581,  2309,   581,   568,   581,   344,   582,   583,   347,
     568,  2318,  2303,   125,   581,    73,  2909,    75,  2325,  2326,
     314,   582,   583,   583,   582,   522,   582,   583,   234,   581,
     568,   109,   581,   322,   112,   314,   210,   582,   583,   328,
     582,   583,   336,   205,   582,   581,   141,   582,   583,   581,
     145,   345,   582,   583,   112,   157,   210,   581,    89,   161,
     581,    89,   581,   477,   582,   583,   582,   583,  2309,   581,
     172,   522,   581,  2364,   453,   133,  2810,   172,   582,   583,
     581,   375,   194,   581,   568,   135,   136,  2394,  2395,   167,
     581,   186,   581,    11,   582,   583,   191,   303,   582,   751,
     572,   573,   574,   575,   576,   577,   578,   579,   166,   175,
     284,   582,   583,   527,  2848,   193,   211,   582,   583,   568,
     581,   327,   582,   583,   219,   419,  1001,  1002,  1003,    48,
     568,  3721,  3722,   582,   229,   582,   583,   305,  1013,   107,
     419,    33,   556,   582,   583,   240,   440,   581,   322,   581,
     245,   582,   583,  2394,   328,  3378,  3379,  3489,   256,   254,
     568,  3057,   582,   583,  1076,  1077,    58,    48,   322,  1044,
     109,   583,  1047,   112,   328,  3081,   126,    95,  3084,   385,
     211,   259,   427,   211,   478,   336,    15,    16,   477,   531,
     292,   522,  1067,  1068,   576,   113,  1071,    25,   229,   478,
    2507,   229,  2509,  2510,  2511,  2512,   174,    99,   150,   240,
     102,  3414,   240,  2520,   440,  1090,  1091,  3420,   110,   314,
    3392,  3393,  2895,  2896,  2857,  2858,  2533,   581,   167,  2536,
     568,   519,   200,  3117,  3118,   245,   172,   531,    66,   393,
      12,   336,    70,  2550,  2551,  2552,   473,   491,   542,   543,
     345,  3608,   473,   331,   193,   473,  2563,   278,   256,  3082,
     178,   467,  2569,   142,  2571,  2668,   560,   556,   562,    41,
    2577,    79,  2563,   583,   103,   104,   105,   106,   107,  2520,
     375,   383,   338,   314,   112,   487,   314,   205,   582,   583,
      30,   582,   586,   587,   583,   353,   141,   112,    98,     6,
     490,   588,    97,   477,   581,   336,     4,   586,   336,   431,
      82,    54,   555,   400,   154,    87,    98,   202,   508,   583,
     259,   178,   178,   477,   419,   515,   583,   295,   589,    66,
      12,   299,    72,   582,   559,   582,   394,   255,   306,   499,
     125,     9,   583,  2650,  3250,   440,   536,  3253,  2655,   461,
     462,   463,   464,   465,   466,   305,   589,   589,   582,   582,
     244,  2668,   581,   143,  2671,    60,   478,   589,   197,   198,
     199,   200,   583,   527,    69,   588,   562,    48,  2669,  2686,
     583,   491,   556,   478,  3716,    80,  2677,   581,   419,   278,
    2697,   419,   331,  2700,   583,   278,   251,  3303,   359,   139,
     583,   510,   556,   583,   232,  2712,   574,   575,   576,   577,
     578,   579,   583,   381,  2721,   222,   510,  2724,   583,   583,
     576,  2728,   172,    95,   316,   223,   489,  2734,   162,   583,
     172,  2738,   536,   583,  2741,   583,   531,   451,   362,   336,
     126,  2748,   121,  3339,   522,   583,   581,   478,   543,   582,
     478,  3808,   224,  2760,  2734,   583,   145,   375,   145,   583,
    2767,   145,   430,   538,  3667,   560,   295,   562,   297,   298,
     299,   145,  3389,  3390,  3391,   145,   171,   306,   145,   145,
     145,   145,   177,  2724,   145,  3590,  3818,   582,   583,   145,
     145,   586,   587,   443,   444,  2898,   324,   325,   145,    31,
     145,   145,   330,  3425,    95,   145,   542,   564,   336,    46,
     336,  2914,   583,   208,   582,   344,    25,    26,   347,   178,
     438,   293,   175,   195,   576,   175,  2767,   582,   582,   145,
     146,  3734,  3735,   582,  3737,  2842,   582,   232,    60,   582,
     582,   575,   583,  2850,   581,   373,   441,    69,    57,    58,
      59,  3883,   381,   582,   581,   447,   582,    66,    80,  2850,
     151,    70,   582,   179,  1439,   582,   582,  2874,   583,    78,
     583,   582,   188,   582,   492,   582,   494,   581,   579,  2886,
    2887,   353,  2889,   522,   581,   387,   582,   178,   583,    98,
     558,  2898,   209,   560,   126,   581,   483,  2904,   581,   184,
     429,   430,   570,   112,   589,   175,   115,  2914,   436,   225,
     582,  3447,   449,   382,   506,  2922,   440,   208,   583,   305,
     236,  3543,   572,   573,   574,   575,   576,   577,   578,   579,
     370,   583,  2939,  1508,   143,    46,  4010,  1512,  3841,   172,
    3843,  3844,   467,   535,  2951,   467,   467,   263,   467,   171,
     312,   391,  2959,  4010,  2961,   177,   467,   145,   431,    69,
    1535,   360,   510,  2970,   255,   360,   360,  4041,  2975,   360,
    3495,   121,  2979,  2510,  2511,  2512,  4033,   165,   373,   351,
     420,   230,  3085,   455,  4041,   230,   208,   492,   492,   361,
     222,   179,   121,    46,   403,   367,   255,   360,   358,   208,
     188,   581,   318,   360,   532,   543,   360,   216,   360,   582,
     232,   589,   244,  2550,  2551,  2552,   488,   139,   582,   218,
     218,   589,   231,     6,   103,   104,   105,   106,   107,   558,
      13,    14,   472,   582,   254,   582,   582,   589,   589,   568,
     569,   570,    25,    26,   583,   589,  3149,   235,   236,   582,
     582,   510,   510,  3044,   589,   589,   510,   443,   444,   565,
     499,   456,   251,   583,  3071,    46,   510,   581,   581,   342,
     175,  3062,    55,   305,   283,   263,    59,    60,  3085,   370,
     452,    64,   175,   175,   375,   219,   175,    70,   589,   226,
     589,   300,   324,   325,   562,    78,    35,   331,   229,   583,
    3625,   229,    85,  3699,   348,   296,  3697,    98,  4008,    98,
     581,   232,   232,   589,   510,    98,   581,    95,   197,   198,
     199,   200,  3129,   583,   341,   582,   186,  3134,   416,   112,
    3233,   336,   115,   321,   581,   360,   581,   532,   345,   122,
     123,   499,  3149,   352,   126,   354,   129,   438,   576,   581,
     220,   373,   361,   220,   137,   582,   582,   582,   141,   582,
     143,   582,   582,   102,   396,   589,   582,   581,   540,   336,
     109,   576,   205,    35,  3165,   246,   360,   583,   582,   589,
     583,   582,   175,  3190,   372,  3198,   537,   170,   574,   575,
     576,   577,   578,   579,   222,   242,    66,  3300,   266,   177,
     229,   492,   229,   336,   336,   496,   583,   232,   232,   371,
     583,   443,   444,   336,   583,   424,   295,    70,   297,   298,
     299,   160,   454,   206,   515,   208,  3233,   306,   167,    18,
     208,   428,   581,   216,   456,   336,    46,   453,   432,   581,
     102,   245,   434,  3234,   582,   582,   582,   109,   231,   540,
     562,  3258,  3355,   132,   193,   583,   186,   442,  3265,   238,
     581,   581,   145,   582,   555,   229,   229,   112,   477,   583,
     581,   112,   582,  3280,   369,   581,   589,   255,  3269,    74,
     449,   128,   453,   492,   582,   582,   495,  3810,   126,   583,
     582,    18,   582,  3300,    33,   582,   582,  4025,   160,   582,
     283,   582,   381,   582,   513,   167,   582,   302,   234,    70,
     532,   520,   562,   126,   219,   582,   382,   300,   581,   581,
     259,   304,   531,   305,   582,   589,   583,    46,  3919,   583,
     191,   193,  3928,   302,  3341,    12,    13,    98,   387,   499,
     572,   573,   574,   575,   576,   577,   578,   579,  3355,   553,
     429,   430,  2889,    25,    26,   499,   543,   340,   581,   537,
     543,   112,   345,   581,   232,   232,   581,  3374,   581,   352,
     581,   354,   553,   330,   583,   331,   315,   360,   361,  3386,
    3387,  3977,   143,   583,   222,    57,    58,    59,   331,   582,
     302,   330,   331,   156,    66,   581,  3403,   259,    70,   499,
    3925,   499,   499,   232,   547,    68,    78,   390,   582,   222,
    4001,    88,   582,    16,   219,   326,   543,   543,   548,   402,
     403,   404,   405,   471,   583,   331,    98,   562,   119,   416,
     582,   537,   342,   494,   581,   247,   482,   267,   172,   116,
     112,   424,   581,   115,  4035,   581,   140,   208,  3455,  3456,
     559,    30,   129,   315,   172,   356,   501,   581,  3465,   121,
     438,   443,   444,   582,   326,   590,   582,   305,   330,   331,
     582,   143,   121,   581,   151,   477,   153,   143,   456,   558,
     375,    46,    46,   138,    46,   145,   395,   164,     5,   175,
     569,   570,   305,    70,   477,   559,    30,    60,   342,    60,
     128,   503,   583,   483,    81,   196,   582,   184,    46,   492,
      46,    46,   495,    46,   492,  3456,   494,    46,   496,   581,
     219,   139,   283,   581,   587,   342,   342,   120,    16,   559,
     513,   208,   139,   204,   590,   261,   208,   520,   215,   300,
     111,  3548,   134,   120,   216,   587,  3553,   582,   531,   270,
     582,   582,    52,   587,   532,   581,   425,   145,   139,   231,
     499,   322,   540,   582,   503,   256,   502,   506,   583,   189,
     583,   587,   244,   582,    52,   583,   407,   254,   517,   205,
     502,   172,   172,   522,   561,   172,   525,   278,   112,   331,
     548,   573,   574,   575,   576,   577,   578,   579,   440,   247,
     173,  3608,  3609,  2081,   587,   443,   444,  3614,   581,  3558,
    3050,   283,  1898,  2248,  3773,   617,   602,  3055,  3581,  3797,
     622,  3724,  3451,   923,  3876,  3277,  3280,  4035,   300,  3788,
     443,   444,  3454,  3989,  3998,   574,   575,   499,  3645,  3900,
    3647,   503,  3649,  3802,   506,  3444,  3766,  3900,  3869,  3444,
     652,  3444,  3444,  3792,  3444,   517,  3444,   234,  3665,  3791,
     522,  3444,  3444,   525,  3444,  3444,   668,  3444,  3609,  3444,
     503,  3678,   961,  3444,  1358,  1610,  2302,  3461,  1360,  2525,
     352,  2874,   354,   374,  3614,  3489,  3714,  3883,  3131,   361,
    3818,   382,  3890,  3925,  3625,  1413,   474,  1860,  3065,   376,
    3382,  2979,  2753,  2395,  1868,  2959,  2328,   709,   710,   711,
     712,  2264,   574,   575,  3002,  3002,   477,  3724,   395,   721,
    3035,   412,  3412,  3242,   401,  3732,   303,  3718,  3197,  3233,
    2963,   492,   409,  3836,   572,   573,   574,   575,   576,   577,
     578,   579,  2914,  3664,  3903,  3406,  1427,   324,   325,  3653,
     327,  1930,   424,  3534,  3913,   432,  3594,  3465,   449,   572,
     573,   574,   575,   576,   577,   578,   579,  1867,   445,   446,
    3420,  2321,  2961,  1744,  2145,  3202,  1319,  3880,  2960,  1409,
    1667,   942,   473,  2520,   836,  3888,  2159,  2112,   547,   622,
    3497,  1682,  3951,  2498,  2850,  1961,  1039,  2929,  2211,  3518,
     491,  3808,  3851,   494,  3963,   477,  3965,  3381,   385,   486,
    2741,  3852,  1077,  3972,  2970,  2063,  3375,  1013,  2317,   652,
     492,  3977,  3981,   495,  3722,  3355,  2164,  1933,  1228,  3836,
    2880,  2108,  3823,  3824,  2149,   668,  3134,  2881,   515,  4033,
    2939,   513,  3808,  1939,  3851,  3852,  1432,   537,   520,   613,
    1734,   527,  1200,  4012,  4013,  1267,  1626,  2712,  4017,   531,
     537,  2863,   539,  3639,  3921,  3952,  4041,  3741,  2886,  3235,
    1246,  1688,  2579,  3880,  3160,  3363,  2922,  1653,   519,   712,
    3478,  3888,   819,  3484,  1193,   520,  2507,  1233,  1418,   823,
     467,  2039,  2477,  1236,  1097,   470,   470,   602,  3905,   602,
     602,    -1,    -1,    -1,    -1,  3912,    -1,    -1,    -1,   581,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4029,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   945,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3962,    -1,    -1,    -1,    -1,
    3967,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,   277,    -1,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4001,   997,   998,    -1,    -1,    -1,
      -1,    -1,    -1,  4010,  1006,  1007,  1008,  1009,  1010,  1011,
    1012,    -1,    -1,    -1,    -1,  1017,    -1,    -1,  1020,  1021,
      -1,  1023,  4029,  1025,    -1,    -1,  4033,  1029,  4035,    -1,
    1032,  1033,  1034,  1035,  4041,  1037,  1038,    -1,    -1,    -1,
      -1,    -1,    -1,  1045,  1046,    -1,  1048,  1049,  1050,  1051,
    1052,    -1,  1054,    -1,  1056,  1057,  1058,  1059,  1060,  1061,
    1062,  1063,  1064,  1065,  1066,    -1,    -1,  1069,  1070,    -1,
    1072,    -1,  1074,    -1,    -1,    -1,  1078,    -1,  1080,  1081,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1092,  1093,    -1,    -1,   397,   398,  1098,    -1,    -1,  1101,
      -1,    -1,    -1,    -1,    -1,    -1,  1108,  1109,  1110,    -1,
    1112,    -1,   945,    -1,    -1,    -1,    -1,  1119,  1120,  1121,
      -1,  1123,  1124,  1125,  1126,  1127,    -1,  1129,  1130,  1131,
    1132,  1133,  1134,  1135,  1136,    -1,    -1,    -1,  1140,  1141,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   997,   998,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1006,  1007,    -1,    -1,  1010,  1011,  1012,
      -1,    -1,    -1,    -1,  1017,    -1,    -1,  1020,  1021,    -1,
    1023,    -1,  1025,    -1,    -1,    -1,    -1,    -1,    -1,  1032,
    1033,  1034,  1035,    -1,  1037,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1045,  1046,    -1,  1048,  1049,    -1,    -1,    -1,
      -1,  1054,    -1,  1056,  1057,  1058,    -1,    -1,  1061,  1062,
    1063,  1064,  1065,  1066,    -1,    -1,  1069,  1070,    -1,  1072,
      -1,  1074,    -1,    -1,  1246,  1078,    -1,  1080,  1081,    -1,
      -1,    -1,  1254,    -1,    -1,    -1,    -1,    -1,    -1,  1092,
    1093,    -1,    -1,    13,    14,  1098,    -1,    -1,  1101,    -1,
      -1,    -1,    -1,    -1,    -1,  1108,  1109,  1110,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,
      -1,    33,    34,    -1,    -1,    55,    -1,    -1,  1141,    59,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    12,
      13,    -1,    72,    -1,    -1,    57,    58,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    -1,    69,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    86,    -1,    88,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    96,    -1,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   141,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,
     142,   143,    -1,  1246,    -1,   147,    -1,    -1,   150,   169,
      -1,  1254,    -1,   116,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    13,    -1,   184,    -1,   129,    -1,    -1,   189,
      -1,    -1,   192,  1445,   176,    -1,   178,    -1,    -1,    -1,
      -1,   183,    -1,   185,    -1,    -1,    -1,    -1,   151,    -1,
     153,    -1,    -1,    -1,    -1,   215,    -1,   217,    -1,    -1,
      -1,   164,    -1,    -1,    -1,   207,   208,    -1,    -1,    -1,
     212,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,   230,    -1,
     250,    -1,    -1,    -1,   254,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   251,
      -1,    -1,   215,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   116,    -1,    -1,    -1,    -1,
      -1,    -1,  1544,  1545,  1546,    -1,   278,    -1,   129,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1560,    -1,
      -1,   254,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     151,    -1,   153,    -1,    -1,    -1,    -1,    -1,   310,    -1,
    1582,    -1,    -1,   164,    -1,    -1,  1588,    -1,   320,  1591,
     340,  1593,    -1,    -1,    -1,    -1,    -1,  1599,    -1,  1601,
    1602,    -1,    -1,   184,    -1,    -1,    -1,   339,    -1,    -1,
     360,    -1,  1445,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     370,    -1,    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,
     380,   363,    -1,    -1,   215,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   374,   375,    -1,    -1,   378,   379,    -1,    -1,
     400,    -1,    -1,   403,    -1,   405,    -1,    -1,   408,    -1,
    1662,   411,    -1,   413,    -1,    -1,    -1,    -1,   418,    -1,
     420,    -1,    -1,   254,    -1,    -1,    -1,   427,    -1,    -1,
      -1,    -1,   432,   376,    -1,    -1,    -1,    -1,    -1,    -1,
     440,    -1,    -1,    -1,    -1,   445,    -1,    -1,    -1,   449,
      -1,    -1,   395,    -1,    -1,   437,    -1,    -1,   401,    -1,
      -1,  1544,  1545,  1546,    -1,    -1,   409,   449,    -1,    -1,
      -1,    -1,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   432,
      -1,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,  1582,
      -1,    -1,   445,   446,    -1,    -1,    -1,    -1,  1591,    -1,
    1593,    -1,   494,    -1,    -1,    -1,    -1,    -1,   518,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,    -1,    -1,
      -1,    -1,   542,   486,    -1,   376,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    26,    -1,
      -1,    -1,    -1,    -1,   395,    -1,    -1,   567,    -1,   551,
     401,    -1,   515,    -1,    -1,   557,    -1,    -1,   409,  1662,
      -1,   581,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,
      58,    59,    -1,    -1,   537,    -1,   539,    -1,    66,    -1,
      -1,   432,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      78,    -1,    -1,    -1,   445,   446,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1881,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,  1941,
      -1,    -1,    -1,  1945,    -1,    -1,    -1,    -1,  1950,  1951,
      -1,    -1,    -1,    -1,    -1,    -1,   537,  1959,   539,    -1,
    1962,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1972,    -1,  1974,  1975,    -1,  1977,  1978,  1979,  1980,  1981,
      -1,    -1,  1984,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     208,  1993,    -1,    -1,    -1,    -1,    -1,    -1,   216,  2001,
      -1,  2003,    -1,  2005,  2006,  2007,  2008,    -1,    -1,    -1,
    2012,  2013,  2014,   231,    -1,    -1,    -1,  2019,  2020,  2021,
      -1,  2023,    -1,  2025,    -1,  2027,    -1,  2029,    -1,  2031,
      -1,    -1,    -1,    -1,  2036,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2046,    -1,    -1,    -1,  1881,    -1,
      -1,  2053,    -1,    -1,  2056,    -1,    -1,    -1,    -1,    -1,
    2062,    -1,    -1,  2065,    -1,   283,    -1,  2069,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   300,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1941,    -1,
      -1,    -1,  1945,    -1,    -1,    -1,    -1,  1950,  1951,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1959,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   352,    -1,   354,    -1,    -1,  1972,
      -1,  1974,    -1,   361,  1977,  1978,  1979,  1980,  1981,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1993,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2001,    -1,
    2003,    -1,  2005,  2006,  2007,    -1,    -1,    -1,    -1,  2012,
    2013,  2014,    -1,    -1,    -1,    -1,  2019,  2020,  2021,    -1,
    2023,    -1,  2025,    -1,  2027,    -1,  2029,    -1,  2031,    -1,
      -1,    -1,    -1,  2036,    13,    14,   424,    -1,    -1,    -1,
      -1,    -1,    -1,  2046,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,  2062,
      -1,    -1,  2065,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   492,    -1,    -1,   495,    -1,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,    -1,   108,
      -1,    -1,   520,    -1,    -1,    -1,    -1,   116,   117,   118,
      -1,    -1,    -1,   531,    -1,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   153,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,
     189,    -1,    -1,   192,    -1,    -1,    25,    26,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   215,    -1,   217,    -1,
      -1,  2413,    -1,    -1,    -1,  2417,    -1,    -1,    -1,    -1,
      59,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    -1,  2439,  2440,    78,
      -1,   250,    -1,    -1,    -1,   254,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2459,    -1,    98,
      -1,    -1,    -1,    -1,    -1,    -1,  2468,    -1,  2470,    -1,
    2472,    -1,    -1,   112,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2487,    -1,    -1,    -1,    -1,
    2492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2514,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2524,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   340,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   360,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,
    2572,   380,    -1,    -1,  2576,    -1,    -1,   216,    -1,    -1,
    2413,    -1,    -1,    -1,  2417,    -1,    -1,    -1,    -1,    -1,
      -1,   400,   231,    -1,   403,    -1,   405,    -1,    -1,   408,
      -1,    -1,   411,    -1,   413,    -1,  2439,  2440,    -1,   418,
      -1,   420,    -1,    -1,    -1,    -1,    -1,  2619,   427,    -1,
      -1,    -1,    -1,   432,    -1,    -1,  2459,    -1,    -1,    -1,
      -1,   440,    -1,    -1,    -1,  2468,   445,  2470,    -1,  2472,
     449,    -1,    -1,  2645,   283,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   300,    -1,   472,    -1,    -1,    -1,   476,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2514,    -1,    -1,    32,    33,    -1,    -1,    -1,    -1,
      38,    -1,    40,    -1,    42,    43,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   518,
      58,    -1,    -1,   352,    -1,   354,    -1,    -1,    -1,    -1,
      -1,   530,   361,    -1,    -1,   534,    -1,    -1,   537,  2731,
    2732,    -1,    -1,   542,    -1,    -1,    -1,    -1,    -1,  2572,
      -1,    -1,    -1,  2576,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,   102,    -1,    -1,    -1,   567,    -1,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   581,    -1,    -1,    -1,    -1,    -1,    -1,   127,
      -1,  2783,    -1,    -1,    -1,   424,  2619,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2807,  2808,    -1,  2810,    -1,
      -1,    -1,  2645,    -1,    -1,    -1,    -1,  2819,   166,    -1,
     168,    -1,  2824,    -1,    -1,  2827,    -1,  2829,  2830,    -1,
      -1,    -1,   180,   181,    -1,    -1,    -1,    -1,   477,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2848,    -1,    -1,    -1,
      -1,    -1,    -1,   492,    -1,    -1,   495,  2859,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   220,    -1,   513,    -1,    -1,    -1,  2880,    -1,
      -1,   520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   531,    -1,    -1,    -1,    -1,    -1,  2731,  2732,
     248,    -1,    -1,    -1,    -1,    -1,    -1,  2909,    -1,   257,
     258,    -1,   260,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2923,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,
      -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,  2941,
      -1,   289,   290,   291,    -1,    -1,    -1,    -1,    25,    26,
    2783,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   307,
     308,   309,    -1,    -1,    -1,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,    -1,  2807,  2808,    -1,    -1,    55,    -1,
      -1,    -1,    59,    -1,   332,   333,  2819,    -1,    -1,    -1,
      -1,  2824,    -1,    70,  2827,    -1,  2829,  2830,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,    -1,
      -1,    98,    -1,    -1,    -1,    -1,  2859,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,    -1,    -1,   115,    -1,
      -1,   389,    -1,    -1,    -1,   122,    -1,  2880,    -1,    -1,
      -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     137,    -1,    -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   436,    -1,
    2923,    -1,   440,   170,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   450,    -1,    -1,    -1,    -1,    -1,  2941,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   208,    -1,  3135,    -1,    -1,    -1,    -1,    -1,   216,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   500,    -1,   231,   503,    -1,    -1,   506,   507,
     508,   509,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3174,  3175,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   549,   550,    -1,    -1,    -1,   283,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   570,   300,    -1,    -1,    -1,   304,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,   352,    -1,   354,    -1,    -1,
      -1,    -1,    -1,    -1,   361,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3135,    -1,    -1,    -1,    -1,    -1,  3310,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,    -1,  3335,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3174,  3175,    -1,    -1,    -1,    -1,   424,  3350,    -1,
    3183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   492,    -1,    -1,   495,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,    -1,
      -1,    -1,  3444,   520,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   531,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3310,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3489,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3501,
      -1,    -1,  3335,    -1,    -1,    -1,    -1,    -1,  3510,    -1,
    3512,    -1,    -1,    -1,    -1,    -1,    -1,  3350,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3545,    -1,    -1,    -1,    -1,    -1,  3551,
    3552,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3630,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3501,  3671,
      -1,  3673,    -1,    -1,    -1,    -1,    -1,  3510,    -1,  3512,
      -1,  3683,    -1,  3685,  3686,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3704,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3545,    -1,  3716,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3771,
      -1,  3773,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3788,  3789,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3630,    -1,    -1,
    3802,    -1,    -1,    -1,    -1,    -1,    -1,  3809,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3818,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3671,    -1,
    3673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3683,    -1,    -1,  3855,  3856,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3868,  3869,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3883,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3903,    -1,    -1,    -1,    -1,    -1,    -1,  3910,    -1,
      -1,  3913,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3932,    -1,    -1,    -1,    -1,    -1,    -1,  3939,  3771,  3941,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3951,
      -1,    -1,  3954,    -1,    -1,    -1,  3789,    -1,    -1,  3961,
      -1,  3963,    -1,  3965,    -1,    -1,    -1,    -1,    -1,    -1,
    3972,    -1,    -1,    -1,    -1,    -1,  3809,    -1,    -1,  3981,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3996,  3997,    -1,    -1,    -1,    -1,
    4002,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4012,  4013,    -1,    -1,    -1,  4017,    -1,    -1,    -1,    -1,
      -1,    -1,  3855,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3910,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,  3932,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,  3954,    41,    42,    43,    44,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,  4002,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,   237,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,    -1,
     499,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,   511,   512,   513,   514,    -1,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,    -1,    -1,   584,   585,    -1,    -1,   588,
     589,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    -1,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,
      -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,    -1,   499,   500,   501,    -1,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,    -1,
     554,   555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,    -1,    -1,    -1,    -1,   580,   581,    -1,    -1,
     584,   585,    -1,    -1,   588,   589,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,    -1,
     499,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,    -1,    -1,   584,   585,    -1,    -1,   588,
     589,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    -1,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,
      -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,    -1,   499,   500,   501,    -1,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,    -1,
     554,   555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,    -1,    -1,    -1,    -1,   580,   581,   582,    -1,
     584,   585,    -1,    -1,   588,   589,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,    -1,
     499,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,    -1,    -1,   584,   585,    -1,    -1,   588,
     589,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    -1,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,
      -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,    -1,   499,   500,   501,    -1,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,    -1,
     554,   555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,    -1,    -1,    -1,    -1,   580,   581,    -1,    -1,
     584,   585,    -1,    -1,   588,   589,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,    -1,
     499,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,    -1,    -1,   584,   585,    -1,    -1,   588,
     589,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    -1,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,
      -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,    -1,   499,   500,   501,    -1,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,    -1,
     554,   555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,    -1,    -1,    -1,    -1,   580,   581,    -1,    -1,
     584,   585,    -1,    -1,   588,   589,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,    -1,
     499,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,    -1,    -1,   584,   585,    -1,    -1,   588,
     589,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    -1,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,    -1,    -1,   320,   321,   322,   323,
     324,    -1,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,
      -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,    -1,   499,   500,   501,    -1,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,    -1,
     554,   555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,    -1,    -1,    -1,    -1,   580,   581,    -1,    -1,
     584,   585,    -1,    -1,   588,   589,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,    -1,
     499,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,    -1,    -1,   584,   585,    -1,    -1,   588,
     589,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    -1,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,
      -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,    -1,   499,   500,   501,    -1,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,    -1,
     554,   555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,    -1,    -1,    -1,    -1,   580,   581,    -1,    -1,
     584,   585,    -1,    -1,   588,   589,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,    -1,
     499,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,    -1,    -1,   584,   585,    -1,    -1,   588,
     589,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    -1,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,    -1,    -1,   320,   321,   322,   323,
     324,    -1,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,
      -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,    -1,   499,   500,   501,    -1,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,    -1,
     554,   555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,    -1,    -1,    -1,    -1,   580,   581,    -1,    -1,
     584,   585,    -1,    -1,   588,   589,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,    -1,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,    -1,
     499,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,    -1,    -1,   584,   585,    -1,    -1,   588,
     589,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    -1,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,    -1,    -1,   320,   321,   322,   323,
     324,    -1,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,
      -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,    -1,
      -1,   495,   496,   497,    -1,   499,   500,   501,    -1,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,    -1,
     554,   555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,    -1,    -1,    -1,    -1,   580,   581,    -1,    -1,
     584,   585,    -1,    -1,   588,   589,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,    -1,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,    -1,    -1,   495,   496,   497,    -1,
     499,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,    -1,    -1,    -1,
      -1,   580,   581,    -1,    -1,   584,   585,    -1,    -1,   588,
     589,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    80,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,   177,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,   208,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,   232,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,
     244,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,    -1,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,    -1,    -1,   409,    -1,   411,   412,   413,
      -1,   415,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,    -1,    -1,    -1,    -1,    -1,   462,   463,
      -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,
      -1,    -1,   476,   477,    -1,   479,   480,   481,   482,   483,
      -1,    -1,   486,   487,   488,   489,    -1,   491,   492,    -1,
      -1,   495,   496,   497,    -1,    -1,   500,   501,    -1,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,    -1,    -1,   518,   519,   520,   521,    -1,   523,
     524,    -1,   526,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,
      -1,    -1,    -1,    -1,   548,    -1,    -1,   551,    -1,    -1,
      -1,   555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,    -1,    -1,   570,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,   589,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    80,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,   177,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,   208,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,   232,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,    -1,   370,   371,   372,    -1,   374,    -1,
     376,   377,   378,   379,    -1,   381,   382,   383,    -1,    -1,
     386,    -1,    -1,    -1,   390,   391,   392,   393,   394,    -1,
      -1,   397,   398,   399,    -1,   401,   402,    -1,   404,   405,
     406,    -1,    -1,   409,    -1,   411,   412,   413,    -1,   415,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,    -1,    -1,    -1,   442,    -1,    -1,    -1,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,    -1,    -1,    -1,    -1,    -1,   462,   463,    -1,   465,
      -1,    -1,   468,    -1,    -1,   471,   472,   473,    -1,    -1,
     476,   477,    -1,   479,   480,   481,   482,   483,    -1,    -1,
     486,   487,   488,   489,    -1,   491,   492,    -1,    -1,   495,
     496,   497,    -1,    -1,   500,   501,    -1,   503,   504,   505,
     506,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,
      -1,    -1,   518,   519,   520,   521,    -1,   523,   524,    -1,
     526,   527,    -1,   529,   530,    -1,    -1,   533,    -1,    -1,
     536,    -1,   538,    -1,   540,   541,    -1,    -1,    -1,    -1,
      -1,    -1,   548,    -1,    -1,   551,    -1,    -1,    -1,   555,
     556,   557,   558,    -1,    -1,    -1,    -1,   563,   564,    -1,
     566,   567,    -1,    -1,   570,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,   589,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,    -1,   374,    -1,   376,   377,
     378,   379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,
      -1,    -1,   390,   391,   392,   393,   394,    -1,    -1,   397,
     398,   399,    -1,   401,   402,    -1,   404,   405,   406,    -1,
      -1,   409,    -1,   411,   412,   413,    -1,   415,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,    -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,    -1,    -1,
      -1,    -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,
     468,    -1,    -1,   471,   472,   473,    -1,    -1,   476,   477,
      -1,   479,   480,   481,   482,   483,    -1,    -1,   486,   487,
     488,   489,    -1,   491,   492,    -1,    -1,   495,   496,   497,
      -1,    -1,   500,   501,    -1,   503,   504,   505,   506,    -1,
      -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,
     518,   519,   520,   521,    -1,   523,   524,    -1,   526,   527,
      -1,   529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,
     538,    -1,   540,   541,    -1,    -1,    -1,    -1,    -1,    -1,
     548,    -1,    -1,   551,    -1,    -1,    -1,   555,   556,   557,
     558,    -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,
      -1,    -1,   570,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,   582,    -1,    -1,    17,    -1,    -1,
      20,   589,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,    -1,   374,    -1,   376,   377,   378,   379,
      -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,    -1,
     390,   391,   392,   393,   394,    -1,    -1,   397,   398,   399,
      -1,   401,   402,    -1,   404,   405,   406,    -1,    -1,   409,
      -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,    -1,    -1,    -1,   435,   436,   437,   438,    -1,
      -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,
      -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,    -1,
      -1,   471,   472,   473,    -1,    -1,   476,   477,    -1,   479,
     480,   481,   482,   483,    -1,    -1,   486,   487,   488,   489,
      -1,   491,   492,    -1,    -1,   495,   496,   497,    -1,    -1,
     500,   501,    -1,   503,   504,   505,   506,    -1,    -1,    -1,
      -1,    -1,   512,   513,   514,    -1,    -1,    -1,   518,   519,
     520,   521,    -1,   523,   524,    -1,   526,   527,    -1,   529,
     530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,    -1,
     540,   541,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,
      -1,   551,    -1,    -1,    -1,   555,   556,   557,   558,    -1,
      -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,    -1,
     570,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,   582,    -1,    -1,    -1,    -1,    17,   588,   589,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,    -1,   374,    -1,   376,   377,   378,   379,
      -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,    -1,
     390,   391,   392,   393,   394,    -1,    -1,   397,   398,   399,
      -1,   401,   402,    -1,   404,   405,   406,    -1,    -1,   409,
      -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,    -1,    -1,    -1,   435,   436,   437,   438,    -1,
      -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,
      -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,    -1,
      -1,   471,   472,   473,    -1,    -1,   476,   477,    -1,   479,
     480,   481,   482,   483,    -1,    -1,   486,   487,   488,   489,
      -1,   491,   492,    -1,    -1,   495,   496,   497,    -1,    -1,
     500,   501,    -1,   503,   504,   505,   506,    -1,    -1,    -1,
      -1,    -1,   512,   513,   514,    -1,    -1,    -1,   518,   519,
     520,   521,    -1,   523,   524,    -1,   526,   527,    -1,   529,
     530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,    -1,
     540,   541,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,
      -1,   551,    -1,    -1,    -1,   555,   556,   557,   558,    -1,
      -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,    -1,
     570,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,   581,    -1,    -1,    -1,    17,    -1,    -1,    20,   589,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,   219,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,    -1,   374,    -1,   376,   377,   378,   379,    -1,   381,
     382,   383,    -1,    -1,   386,    -1,    -1,    -1,   390,   391,
     392,   393,   394,    -1,    -1,   397,   398,   399,    -1,   401,
     402,    -1,   404,   405,   406,    -1,    -1,   409,    -1,   411,
     412,   413,    -1,   415,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,    -1,    -1,    -1,
     442,    -1,    -1,    -1,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,    -1,    -1,    -1,    -1,    -1,    -1,
     462,   463,    -1,   465,    -1,    -1,   468,    -1,    -1,   471,
     472,   473,    -1,    -1,   476,   477,    -1,   479,   480,   481,
     482,   483,    -1,    -1,   486,   487,   488,   489,    -1,   491,
     492,    -1,    -1,   495,   496,   497,    -1,    -1,   500,   501,
      -1,   503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,
     512,   513,   514,    -1,    -1,    -1,   518,   519,   520,   521,
      -1,   523,   524,    -1,   526,   527,    -1,   529,   530,    -1,
      -1,   533,    -1,    -1,   536,    -1,   538,    -1,   540,   541,
      -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,   551,
      -1,    -1,    -1,   555,   556,   557,   558,    -1,    -1,    -1,
      -1,   563,   564,    -1,   566,   567,    -1,    -1,   570,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,   589,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,    -1,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,    -1,    -1,   409,    -1,   411,   412,   413,
      -1,   415,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,
      -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,
      -1,    -1,   476,   477,    -1,   479,   480,   481,   482,   483,
      -1,    -1,   486,   487,   488,   489,    -1,   491,   492,    -1,
      -1,   495,   496,   497,    -1,    -1,   500,   501,    -1,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,    -1,    -1,   518,   519,   520,   521,    -1,   523,
     524,    -1,   526,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,
      -1,    -1,    -1,    -1,   548,    -1,    -1,   551,    -1,    -1,
      -1,   555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,    -1,    -1,   570,    -1,    -1,    -1,
      -1,     5,   576,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,   589,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,    -1,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,    -1,    -1,   409,    -1,   411,   412,   413,
      -1,   415,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,
      -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,
      -1,    -1,   476,   477,    -1,   479,   480,   481,   482,   483,
      -1,    -1,   486,   487,   488,   489,    -1,   491,   492,    -1,
      -1,   495,   496,   497,    -1,    -1,   500,   501,    -1,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,    -1,    -1,   518,   519,   520,   521,    -1,   523,
     524,    -1,   526,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,
      -1,    -1,    -1,    -1,   548,    -1,    -1,   551,    -1,    -1,
      -1,   555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,    -1,    -1,   570,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,   581,    -1,    -1,
      -1,    17,    -1,    -1,    20,   589,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,    -1,   370,   371,   372,    -1,   374,    -1,
     376,   377,   378,   379,    -1,   381,   382,   383,    -1,    -1,
     386,    -1,    -1,    -1,   390,   391,   392,   393,   394,    -1,
      -1,   397,   398,   399,    -1,   401,   402,    -1,   404,   405,
     406,    -1,    -1,   409,    -1,   411,   412,   413,    -1,   415,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,    -1,    -1,    -1,   442,    -1,    -1,    -1,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
      -1,    -1,    -1,    -1,    -1,    -1,   462,   463,    -1,   465,
      -1,    -1,   468,    -1,    -1,   471,   472,   473,    -1,    -1,
     476,   477,    -1,   479,   480,   481,   482,   483,    -1,    -1,
     486,   487,   488,   489,    -1,   491,   492,    -1,    -1,   495,
     496,   497,    -1,    -1,   500,   501,    -1,   503,   504,   505,
     506,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,
      -1,    -1,   518,   519,   520,   521,    -1,   523,   524,    -1,
     526,   527,    -1,   529,   530,    -1,    -1,   533,    -1,    -1,
     536,    -1,   538,    -1,   540,   541,    -1,    -1,    -1,    -1,
      -1,    -1,   548,    -1,    -1,   551,    -1,    -1,    -1,   555,
     556,   557,   558,    -1,    -1,    -1,    -1,   563,   564,    -1,
     566,   567,    -1,    -1,   570,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,   588,   589,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,    -1,   370,   371,   372,    -1,   374,    -1,
     376,   377,   378,   379,    -1,   381,   382,   383,    -1,    -1,
     386,    -1,    -1,    -1,   390,   391,   392,   393,   394,    -1,
      -1,   397,   398,   399,    -1,   401,   402,    -1,   404,   405,
     406,    -1,    -1,   409,    -1,   411,   412,   413,    -1,   415,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,    -1,    -1,    -1,   442,    -1,    -1,    -1,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
      -1,    -1,    -1,    -1,    -1,    -1,   462,   463,    -1,   465,
      -1,    -1,   468,    -1,    -1,   471,   472,   473,    -1,    -1,
     476,   477,    -1,   479,   480,   481,   482,   483,    -1,    -1,
     486,   487,   488,   489,    -1,   491,   492,    -1,    -1,   495,
     496,   497,    -1,    -1,   500,   501,    -1,   503,   504,   505,
     506,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,
      -1,    -1,   518,   519,   520,   521,    -1,   523,   524,    -1,
     526,   527,    -1,   529,   530,    -1,    -1,   533,    -1,    -1,
     536,    -1,   538,    -1,   540,   541,    -1,    -1,    -1,    -1,
      -1,    -1,   548,    -1,    -1,   551,    -1,    -1,    -1,   555,
     556,   557,   558,    -1,    -1,    -1,    -1,   563,   564,    -1,
     566,   567,    -1,    -1,   570,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,   589,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,    -1,   374,    -1,   376,   377,
     378,   379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,
      -1,    -1,   390,   391,   392,   393,   394,    -1,    -1,   397,
     398,   399,    -1,   401,   402,    -1,   404,   405,   406,    -1,
      -1,   409,    -1,   411,   412,   413,    -1,   415,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,   425,   426,   427,
     428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,
     438,    -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,    -1,    -1,
      -1,    -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,
     468,    -1,    -1,   471,   472,   473,    -1,    -1,   476,   477,
      -1,   479,   480,   481,   482,   483,    -1,    -1,   486,   487,
     488,   489,    -1,   491,   492,    -1,    -1,   495,   496,   497,
      -1,    -1,   500,   501,    -1,   503,   504,   505,   506,    -1,
      -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,
     518,   519,   520,   521,    -1,   523,   524,    -1,   526,   527,
      -1,   529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,
     538,    -1,   540,   541,    -1,    -1,    -1,    -1,    -1,    -1,
     548,    -1,    -1,   551,    -1,    -1,    -1,   555,   556,   557,
     558,    -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,
      -1,    -1,   570,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,   589,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,    -1,   374,    -1,   376,   377,   378,   379,
      -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,    -1,
     390,   391,   392,   393,   394,    -1,    -1,   397,   398,   399,
      -1,   401,   402,    -1,   404,   405,   406,    -1,    -1,   409,
      -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,    -1,    -1,    -1,   435,   436,   437,   438,    -1,
      -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,
      -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,    -1,
      -1,   471,   472,   473,    -1,    -1,   476,   477,    -1,   479,
     480,   481,   482,   483,    -1,    -1,   486,   487,   488,   489,
      -1,   491,   492,    -1,    -1,   495,   496,   497,    -1,    -1,
     500,   501,    -1,   503,   504,   505,   506,    -1,    -1,    -1,
      -1,    -1,   512,   513,   514,    -1,    -1,    -1,   518,   519,
     520,   521,    -1,   523,   524,    -1,   526,   527,    -1,   529,
     530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,    -1,
     540,   541,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,
      -1,   551,    -1,    -1,    -1,   555,   556,   557,   558,    -1,
      -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,    -1,
     570,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   589,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,    -1,   374,    -1,   376,   377,   378,   379,    -1,   381,
     382,   383,    -1,    -1,   386,    -1,    -1,    -1,   390,   391,
     392,   393,   394,    -1,    -1,   397,   398,   399,    -1,   401,
     402,    -1,   404,   405,   406,    -1,    -1,   409,    -1,   411,
     412,   413,    -1,   415,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,    -1,    -1,    -1,
     442,    -1,    -1,    -1,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,    -1,    -1,    -1,    -1,    -1,    -1,
     462,   463,    -1,   465,    -1,    -1,   468,    -1,    -1,   471,
     472,   473,    -1,    -1,   476,   477,    -1,   479,   480,   481,
     482,   483,    -1,    -1,   486,   487,   488,   489,    -1,   491,
     492,    -1,    -1,   495,   496,   497,    -1,    -1,   500,   501,
      -1,   503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,
     512,   513,   514,    -1,    -1,    -1,   518,   519,   520,   521,
      -1,   523,   524,    -1,   526,   527,    -1,   529,   530,    -1,
      -1,   533,    -1,    -1,   536,    -1,   538,    -1,   540,   541,
      -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,   551,
      -1,    -1,    -1,   555,   556,   557,   558,    -1,    -1,    -1,
      -1,   563,   564,    -1,   566,   567,    -1,    -1,   570,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,   589,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,    -1,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,    -1,    -1,   409,    -1,   411,   412,   413,
      -1,   415,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,
      -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,
      -1,    -1,   476,   477,    -1,   479,   480,   481,   482,   483,
      -1,    -1,   486,   487,   488,   489,    -1,   491,   492,    -1,
      -1,   495,   496,   497,    -1,   499,   500,   501,    -1,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,    -1,    -1,   518,   519,   520,   521,    -1,   523,
     524,    -1,   526,   527,    -1,   529,   530,    -1,    -1,   533,
      -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,
      -1,    -1,    -1,    -1,   548,    -1,    -1,   551,    -1,    -1,
      -1,   555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,    -1,    -1,   570,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,   588,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
      -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,
      -1,   238,    -1,    -1,   241,   242,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
     327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,    -1,   370,   371,   372,    -1,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,   383,    -1,    -1,   386,
      -1,    -1,    -1,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,   402,    -1,   404,   405,   406,
      -1,    -1,   409,    -1,   411,   412,   413,    -1,   415,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,    -1,    -1,    -1,   442,    -1,    -1,    -1,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,    -1,    -1,    -1,    -1,   462,   463,    -1,   465,    -1,
      -1,   468,    -1,    -1,   471,   472,   473,    -1,    -1,   476,
     477,    -1,   479,   480,   481,   482,   483,    -1,    -1,   486,
     487,   488,   489,    -1,   491,   492,    -1,    -1,   495,   496,
     497,    -1,   499,   500,   501,    -1,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,
      -1,   518,   519,   520,   521,    -1,   523,   524,    -1,   526,
     527,    -1,   529,   530,    -1,    -1,   533,    -1,    -1,   536,
      -1,   538,    -1,   540,   541,    -1,    -1,    -1,    -1,    -1,
      -1,   548,    -1,    -1,   551,    -1,    -1,    -1,   555,   556,
     557,   558,    -1,    -1,    -1,    -1,   563,   564,    -1,   566,
     567,    -1,    -1,   570,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,   588,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,    -1,   374,    -1,   376,   377,   378,   379,
      -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,    -1,
     390,   391,   392,   393,   394,    -1,    -1,   397,   398,   399,
      -1,   401,   402,    -1,   404,   405,   406,    -1,    -1,   409,
      -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,    -1,    -1,    -1,   435,   436,   437,   438,    -1,
      -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,
      -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,    -1,
      -1,   471,   472,   473,    -1,    -1,   476,   477,    -1,   479,
     480,   481,   482,   483,    -1,    -1,   486,   487,   488,   489,
      -1,   491,   492,    -1,    -1,   495,   496,   497,    -1,   499,
     500,   501,    -1,   503,   504,   505,   506,    -1,    -1,    -1,
      -1,    -1,   512,   513,   514,    -1,    -1,    -1,   518,   519,
     520,   521,    -1,   523,   524,    -1,   526,   527,    -1,   529,
     530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,    -1,
     540,   541,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,
      -1,   551,    -1,    -1,    -1,   555,   556,   557,   558,    -1,
      -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,    -1,
     570,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,   588,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,
      73,    74,    75,    76,    -1,    78,    79,    -1,    -1,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
      -1,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
     163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,    -1,   190,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   201,   202,
     203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,   228,    -1,    -1,   231,    -1,
      -1,    -1,   235,    -1,    -1,   238,   239,    -1,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   352,
     353,   354,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,   365,   366,    -1,    -1,    -1,    -1,   371,   372,
      -1,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
     383,    -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,
      -1,   404,    -1,   406,   407,    -1,   409,    -1,    -1,   412,
      -1,    -1,   415,   416,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,   426,    -1,   428,    -1,   430,    -1,    -1,
      -1,    -1,   435,   436,   437,    -1,    -1,    -1,    -1,   442,
      -1,    -1,    -1,   446,    -1,   448,    -1,    -1,   451,    -1,
      -1,   454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,
     463,    -1,   465,    -1,    -1,   468,    -1,    -1,   471,    -1,
     473,    -1,    -1,    -1,   477,    -1,   479,   480,   481,   482,
     483,    -1,    -1,   486,   487,   488,   489,    -1,   491,   492,
      -1,    -1,   495,   496,   497,    -1,    -1,   500,   501,    -1,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,
     513,   514,    -1,    -1,    -1,    -1,   519,   520,   521,    -1,
     523,   524,    -1,   526,   527,    -1,    -1,    -1,    -1,    -1,
     533,    -1,    -1,   536,    -1,    -1,    -1,   540,   541,    -1,
      -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,   551,    -1,
      -1,    -1,   555,   556,   557,   558,    -1,    -1,   561,    -1,
     563,    -1,    -1,   566,    -1,    -1,     5,   570,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
     583,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,    -1,    -1,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,    -1,    -1,   476,   477,    -1,
     479,   480,   481,   482,   483,    -1,    -1,   486,   487,   488,
     489,    -1,   491,   492,    -1,    -1,   495,   496,   497,    -1,
      -1,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,   518,
     519,   520,   521,    -1,   523,   524,    -1,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,    -1,    -1,    -1,    -1,   548,
      -1,    -1,   551,    -1,    -1,    -1,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
       5,   570,     7,     8,     9,    10,    11,   576,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,    -1,   370,   371,   372,    -1,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,   383,    -1,
      -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,   394,
      -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,   404,
     405,   406,    -1,    -1,   409,    -1,   411,   412,   413,    -1,
     415,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,    -1,
      -1,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,    -1,
     465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,    -1,
      -1,   476,   477,    -1,   479,   480,   481,   482,   483,    -1,
      -1,   486,   487,   488,   489,    -1,   491,   492,    -1,    -1,
     495,   496,   497,    -1,    -1,   500,   501,    -1,   503,   504,
     505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,
      -1,    -1,    -1,   518,   519,   520,   521,    -1,   523,   524,
      -1,   526,   527,    -1,   529,   530,    -1,    -1,   533,    -1,
      -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,    -1,
      -1,    -1,    -1,   548,    -1,    -1,   551,    -1,    -1,    -1,
     555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,   564,
      -1,   566,   567,    -1,     5,   570,     7,     8,     9,    10,
      11,   576,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,
     241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,
     371,   372,    -1,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,   383,    -1,    -1,   386,    -1,    -1,    -1,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,   402,    -1,   404,   405,   406,    -1,    -1,   409,    -1,
     411,   412,   413,    -1,   415,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,    -1,    -1,
      -1,   442,    -1,    -1,    -1,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,    -1,
      -1,   462,   463,    -1,   465,    -1,    -1,   468,    -1,    -1,
     471,   472,   473,    -1,    -1,   476,   477,    -1,   479,   480,
     481,   482,   483,    -1,    -1,   486,   487,   488,   489,    -1,
     491,   492,    -1,    -1,   495,   496,   497,    -1,    -1,   500,
     501,    -1,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,   513,   514,    -1,    -1,    -1,   518,   519,   520,
     521,    -1,   523,   524,    -1,   526,   527,    -1,   529,   530,
      -1,    -1,   533,    -1,    -1,   536,    -1,   538,    -1,   540,
     541,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,
     551,    -1,    -1,    -1,   555,   556,   557,   558,    -1,    -1,
      -1,    -1,   563,   564,    -1,   566,   567,    -1,     5,   570,
       7,     8,     9,    10,    11,   576,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
      -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,
      -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
     327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,    -1,   370,   371,   372,    -1,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,   383,    -1,    -1,   386,
      -1,    -1,    -1,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,   402,    -1,   404,   405,   406,
      -1,    -1,   409,    -1,   411,   412,   413,    -1,   415,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,    -1,    -1,    -1,   442,    -1,    -1,    -1,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,    -1,    -1,    -1,    -1,   462,   463,    -1,   465,    -1,
      -1,   468,    -1,    -1,   471,   472,   473,    -1,    -1,   476,
     477,    -1,   479,   480,   481,   482,   483,    -1,    -1,   486,
     487,   488,   489,    -1,   491,   492,    -1,    -1,   495,   496,
     497,    -1,    -1,   500,   501,    -1,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,
      -1,   518,   519,   520,   521,    -1,   523,   524,    -1,   526,
     527,    -1,   529,   530,    -1,    -1,   533,    -1,    -1,   536,
      -1,   538,    -1,   540,   541,    -1,    -1,    -1,    -1,    -1,
      -1,   548,    -1,    -1,   551,    -1,    -1,    -1,   555,   556,
     557,   558,    -1,    -1,    -1,    -1,   563,   564,    -1,   566,
     567,    -1,     5,   570,     7,     8,     9,    10,    11,   576,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
     193,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,    -1,    -1,   331,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,
      -1,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
     383,    -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,   402,
      -1,   404,   405,   406,    -1,    -1,   409,    -1,   411,   412,
     413,    -1,   415,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,
      -1,    -1,    -1,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,    -1,   462,
     463,    -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,
     473,    -1,    -1,   476,   477,    -1,   479,   480,   481,   482,
     483,    -1,    -1,   486,   487,   488,   489,    -1,   491,   492,
      -1,    -1,   495,   496,   497,    -1,    -1,   500,   501,    -1,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,
     513,   514,    -1,    -1,    -1,   518,   519,   520,   521,   522,
     523,   524,    -1,   526,   527,    -1,   529,   530,    -1,    -1,
     533,    -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,
      -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,   551,    -1,
      -1,    -1,   555,   556,   557,   558,    -1,    -1,    -1,    -1,
     563,   564,    -1,   566,   567,    -1,     5,   570,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,   145,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,   243,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,    -1,    -1,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,   441,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,    -1,    -1,   476,   477,    -1,
     479,   480,   481,   482,   483,    -1,    -1,   486,   487,   488,
     489,    -1,   491,   492,    -1,    -1,   495,   496,   497,    -1,
     499,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,   518,
     519,   520,   521,    -1,   523,   524,    -1,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,    -1,    -1,    -1,    -1,   548,
      -1,    -1,   551,    -1,    -1,    -1,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
       5,   570,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,    -1,   370,   371,   372,    -1,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,   383,    -1,
      -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,   394,
      -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,   404,
     405,   406,    -1,    -1,   409,    -1,   411,   412,   413,    -1,
     415,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,    -1,
      -1,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,    -1,
     465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,    -1,
      -1,   476,   477,    -1,   479,   480,   481,   482,   483,    -1,
      -1,   486,   487,   488,   489,    -1,   491,   492,    -1,    -1,
     495,   496,   497,    -1,   499,   500,   501,    -1,   503,   504,
     505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,
      -1,    -1,    -1,   518,   519,   520,   521,    -1,   523,   524,
      -1,   526,   527,    -1,   529,   530,    -1,    -1,   533,    -1,
      -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,    -1,
      -1,    -1,    -1,   548,    -1,    -1,   551,    -1,    -1,    -1,
     555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,   564,
      -1,   566,   567,    -1,     5,   570,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,   112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,
     241,   242,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,
     371,   372,    -1,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,   383,    -1,    -1,   386,    -1,    -1,    -1,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,   402,    -1,   404,   405,   406,    -1,    -1,   409,    -1,
     411,   412,   413,    -1,   415,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,    -1,    -1,
      -1,   442,    -1,    -1,    -1,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,    -1,
      -1,   462,   463,    -1,   465,    -1,    -1,   468,    -1,    -1,
     471,   472,   473,    -1,    -1,   476,   477,    -1,   479,   480,
     481,   482,   483,    -1,    -1,   486,   487,   488,   489,    -1,
     491,   492,    -1,    -1,   495,   496,   497,    -1,   499,   500,
     501,    -1,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,   513,   514,    -1,    -1,    -1,   518,   519,   520,
     521,    -1,   523,   524,    -1,   526,   527,    -1,   529,   530,
      -1,    -1,   533,    -1,    -1,   536,    -1,   538,    -1,   540,
     541,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,
     551,    -1,    -1,    -1,   555,   556,   557,   558,    -1,    -1,
      -1,    -1,   563,   564,    -1,   566,   567,    -1,     5,   570,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    92,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
      -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,
      -1,   238,    -1,    -1,   241,   242,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
     327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,    -1,   370,   371,   372,    -1,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,   383,    -1,    -1,   386,
      -1,    -1,    -1,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,   402,    -1,   404,   405,   406,
      -1,    -1,   409,    -1,   411,   412,   413,    -1,   415,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,    -1,    -1,    -1,   442,    -1,    -1,    -1,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,    -1,    -1,    -1,    -1,   462,   463,    -1,   465,    -1,
      -1,   468,    -1,    -1,   471,   472,   473,    -1,    -1,   476,
     477,    -1,   479,   480,   481,   482,   483,    -1,    -1,   486,
     487,   488,   489,    -1,   491,   492,    -1,    -1,   495,   496,
     497,    -1,   499,   500,   501,    -1,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,
      -1,   518,   519,   520,   521,    -1,   523,   524,    -1,   526,
     527,    -1,   529,   530,    -1,    -1,   533,    -1,    -1,   536,
      -1,   538,    -1,   540,   541,    -1,    -1,    -1,    -1,    -1,
      -1,   548,    -1,    -1,   551,    -1,    -1,    -1,   555,   556,
     557,   558,    -1,    -1,    -1,    -1,   563,   564,    -1,   566,
     567,    -1,     5,   570,     7,     8,     9,    10,    11,    12,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,
     243,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,
      -1,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
     383,    -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,   402,
      -1,   404,   405,   406,    -1,    -1,   409,    -1,   411,   412,
     413,    -1,   415,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,
      -1,    -1,    -1,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,
     463,    -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,
     473,    -1,    -1,   476,   477,    -1,   479,   480,   481,   482,
     483,    -1,    -1,   486,   487,   488,   489,    -1,   491,   492,
      -1,    -1,   495,   496,   497,    -1,   499,   500,   501,    -1,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,
     513,   514,    -1,    -1,    -1,   518,   519,   520,   521,    -1,
     523,   524,    -1,   526,   527,    -1,   529,   530,    -1,    -1,
     533,    -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,
      -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,   551,    -1,
      -1,    -1,   555,   556,   557,   558,    -1,    -1,    -1,    -1,
     563,   564,    -1,   566,   567,    -1,     5,   570,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,    -1,    -1,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,    -1,    -1,   476,   477,    -1,
     479,   480,   481,   482,   483,    -1,    -1,   486,   487,   488,
     489,    -1,   491,   492,    -1,    -1,   495,   496,   497,    -1,
     499,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,   518,
     519,   520,   521,    -1,   523,   524,    -1,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,    -1,    -1,    -1,    -1,   548,
      -1,    -1,   551,    -1,    -1,    -1,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
       5,   570,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,    -1,   370,   371,   372,    -1,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,   383,    -1,
      -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,   394,
      -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,   404,
     405,   406,    -1,    -1,   409,    -1,   411,   412,   413,    -1,
     415,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,    -1,
      -1,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,    -1,
     465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,    -1,
      -1,   476,   477,    -1,   479,   480,   481,   482,   483,    -1,
      -1,   486,   487,   488,   489,    -1,   491,   492,    -1,    -1,
     495,   496,   497,    -1,   499,   500,   501,    -1,   503,   504,
     505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,
      -1,    -1,    -1,   518,   519,   520,   521,    -1,   523,   524,
      -1,   526,   527,    -1,   529,   530,    -1,    -1,   533,    -1,
      -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,    -1,
      -1,    -1,    -1,   548,    -1,    -1,   551,    -1,    -1,    -1,
     555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,   564,
      -1,   566,   567,    -1,     5,   570,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,   112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,
     241,   242,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,
     371,   372,    -1,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,   383,    -1,    -1,   386,    -1,    -1,    -1,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,   402,    -1,   404,   405,   406,    -1,    -1,   409,    -1,
     411,   412,   413,    -1,   415,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,    -1,    -1,
      -1,   442,    -1,    -1,    -1,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,    -1,
      -1,   462,   463,    -1,   465,    -1,    -1,   468,    -1,    -1,
     471,   472,   473,    -1,    -1,   476,   477,    -1,   479,   480,
     481,   482,   483,    -1,    -1,   486,   487,   488,   489,    -1,
     491,   492,    -1,    -1,   495,   496,   497,    -1,   499,   500,
     501,    -1,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,   513,   514,    -1,    -1,    -1,   518,   519,   520,
     521,    -1,   523,   524,    -1,   526,   527,    -1,   529,   530,
      -1,    -1,   533,    -1,    -1,   536,    -1,   538,    -1,   540,
     541,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,
     551,    -1,    -1,    -1,   555,   556,   557,   558,    -1,    -1,
      -1,    -1,   563,   564,    -1,   566,   567,    -1,     5,   570,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
      -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,
      -1,   238,    -1,    -1,   241,   242,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
     327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,    -1,   370,   371,   372,    -1,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,   383,    -1,    -1,   386,
      -1,    -1,    -1,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,   402,    -1,   404,   405,   406,
      -1,    -1,   409,    -1,   411,   412,   413,    -1,   415,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,    -1,    -1,    -1,   442,    -1,    -1,    -1,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,    -1,    -1,    -1,    -1,   462,   463,    -1,   465,    -1,
      -1,   468,    -1,    -1,   471,   472,   473,    -1,    -1,   476,
     477,    -1,   479,   480,   481,   482,   483,    -1,    -1,   486,
     487,   488,   489,    -1,   491,   492,    -1,    -1,   495,   496,
     497,    -1,   499,   500,   501,    -1,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,
      -1,   518,   519,   520,   521,    -1,   523,   524,    -1,   526,
     527,    -1,   529,   530,    -1,    -1,   533,    -1,    -1,   536,
      -1,   538,    -1,   540,   541,    -1,    -1,    -1,    -1,    -1,
      -1,   548,    -1,    -1,   551,    -1,    -1,    -1,   555,   556,
     557,   558,    -1,    -1,    -1,    -1,   563,   564,    -1,   566,
     567,    -1,     5,   570,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    18,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,
      -1,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
     383,    -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,   402,
      -1,   404,   405,   406,    -1,    -1,   409,    -1,   411,   412,
     413,    -1,   415,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,
      -1,    -1,    -1,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,
     463,    -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,
     473,    -1,    -1,   476,   477,    -1,   479,   480,   481,   482,
     483,    -1,    -1,   486,   487,   488,   489,    -1,   491,   492,
      -1,    -1,   495,   496,   497,    -1,   499,   500,   501,    -1,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,
     513,   514,    -1,    -1,    -1,   518,   519,   520,   521,    -1,
     523,   524,    -1,   526,   527,    -1,   529,   530,    -1,    -1,
     533,    -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,
      -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,   551,    -1,
      -1,    -1,   555,   556,   557,   558,    -1,    -1,    -1,    -1,
     563,   564,    -1,   566,   567,    -1,     5,   570,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    83,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,   155,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,    -1,    -1,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,    -1,    -1,   476,   477,    -1,
     479,   480,   481,   482,   483,    -1,    -1,   486,   487,   488,
     489,    -1,   491,   492,    -1,    -1,   495,   496,   497,    -1,
      -1,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,   518,
     519,   520,   521,    -1,   523,   524,    -1,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,    -1,    -1,    -1,    -1,   548,
      -1,    -1,   551,    -1,    -1,    -1,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
       5,   570,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,    -1,   370,   371,   372,    -1,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,   383,    -1,
      -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,   394,
      -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,   404,
     405,   406,    -1,    -1,   409,    -1,   411,   412,   413,    -1,
     415,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,    -1,
      -1,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,    -1,
     465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,    -1,
      -1,   476,   477,    -1,   479,   480,   481,   482,   483,    -1,
      -1,   486,   487,   488,   489,    -1,   491,   492,    -1,    -1,
     495,   496,   497,    -1,    -1,   500,   501,    -1,   503,   504,
     505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,
      -1,    -1,    -1,   518,   519,   520,   521,    -1,   523,   524,
      -1,   526,   527,    -1,   529,   530,    -1,    -1,   533,    -1,
      -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,    -1,
      -1,    -1,    -1,   548,    -1,    -1,   551,    -1,    -1,    -1,
     555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,   564,
      -1,   566,   567,    -1,     5,   570,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,   112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,
     241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,
     371,   372,    -1,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,   383,    -1,    -1,   386,    -1,    -1,    -1,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,   402,    -1,   404,   405,   406,    -1,    -1,   409,    -1,
     411,   412,   413,    -1,   415,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,    -1,    -1,
      -1,   442,    -1,    -1,    -1,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,    -1,
      -1,   462,   463,    -1,   465,    -1,    -1,   468,    -1,    -1,
     471,   472,   473,    -1,    -1,   476,   477,    -1,   479,   480,
     481,   482,   483,    -1,    -1,   486,   487,   488,   489,    -1,
     491,   492,    -1,    -1,   495,   496,   497,    -1,    -1,   500,
     501,    -1,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,   513,   514,    -1,    -1,    -1,   518,   519,   520,
     521,    -1,   523,   524,    -1,   526,   527,    -1,   529,   530,
      -1,    -1,   533,    -1,    -1,   536,    -1,   538,    -1,   540,
     541,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,
     551,    -1,    -1,    -1,   555,   556,   557,   558,    -1,    -1,
      -1,    -1,   563,   564,    -1,   566,   567,    -1,     5,   570,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,   108,    -1,    -1,    -1,   112,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
      -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,
      -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
     327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,    -1,   370,   371,   372,    -1,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,   383,    -1,    -1,   386,
      -1,    -1,    -1,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,   402,    -1,   404,   405,   406,
      -1,    -1,   409,    -1,   411,   412,   413,    -1,   415,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,    -1,    -1,    -1,   442,    -1,    -1,    -1,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,    -1,    -1,    -1,    -1,   462,   463,    -1,   465,    -1,
      -1,   468,    -1,    -1,   471,   472,   473,    -1,    -1,   476,
     477,    -1,   479,   480,   481,   482,   483,    -1,    -1,   486,
     487,   488,   489,    -1,   491,   492,    -1,    -1,   495,   496,
     497,    -1,    -1,   500,   501,    -1,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,
      -1,   518,   519,   520,   521,    -1,   523,   524,    -1,   526,
     527,    -1,   529,   530,    -1,    -1,   533,    -1,    -1,   536,
      -1,   538,    -1,   540,   541,    -1,    -1,    -1,    -1,    -1,
      -1,   548,    -1,    -1,   551,    -1,    -1,    -1,   555,   556,
     557,   558,    -1,    -1,    -1,    -1,   563,   564,    -1,   566,
     567,    -1,     5,   570,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
     383,    -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,   402,
      -1,   404,   405,   406,    -1,    -1,   409,    -1,   411,   412,
     413,    -1,   415,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,
      -1,    -1,    -1,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,
     463,    -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,
     473,    -1,    -1,   476,   477,    -1,   479,   480,   481,   482,
     483,    -1,    -1,   486,   487,   488,   489,    -1,   491,   492,
      -1,    -1,   495,   496,   497,    -1,    -1,   500,   501,    -1,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,
     513,   514,    -1,    -1,    -1,   518,   519,   520,   521,    -1,
     523,   524,    -1,   526,   527,    -1,   529,   530,    -1,    -1,
     533,    -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,
      -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,   551,    -1,
      -1,    -1,   555,   556,   557,   558,    -1,    -1,    -1,    -1,
     563,   564,    -1,   566,   567,    -1,     5,   570,     7,     8,
       9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
      -1,   370,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,   402,    -1,   404,   405,   406,    -1,    -1,
     409,    -1,   411,   412,   413,    -1,   415,   416,    -1,    -1,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,   472,   473,    -1,    -1,   476,   477,    -1,
     479,   480,   481,   482,   483,    -1,    -1,   486,   487,   488,
     489,    -1,   491,   492,    -1,    -1,   495,   496,   497,    -1,
      -1,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,   518,
     519,   520,   521,    -1,   523,   524,    -1,   526,   527,    -1,
     529,   530,    -1,    -1,   533,    -1,    -1,   536,    -1,   538,
      -1,   540,   541,    -1,    -1,    -1,    -1,    -1,    -1,   548,
      -1,    -1,   551,    -1,    -1,    -1,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,    -1,
       5,   570,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,    -1,   370,   371,   372,    -1,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,   383,    -1,
      -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,   394,
      -1,    -1,   397,   398,   399,    -1,   401,   402,    -1,   404,
     405,   406,    -1,    -1,   409,    -1,   411,   412,   413,    -1,
     415,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,    -1,    -1,    -1,   442,    -1,    -1,
      -1,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,    -1,
     465,    -1,    -1,   468,    -1,    -1,   471,   472,   473,    -1,
      -1,   476,   477,    -1,   479,   480,   481,   482,   483,    -1,
      -1,   486,   487,   488,   489,    -1,   491,   492,    -1,    -1,
     495,   496,   497,    -1,   499,   500,   501,    -1,   503,   504,
     505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,
      -1,    -1,    -1,   518,   519,   520,   521,    -1,   523,   524,
      -1,   526,   527,    -1,   529,   530,    -1,    -1,   533,    -1,
      -1,   536,    -1,   538,    -1,   540,   541,    -1,    -1,    -1,
      -1,    -1,    -1,   548,    -1,    -1,   551,    -1,    -1,    -1,
     555,   556,   557,   558,    -1,    -1,    -1,    -1,   563,   564,
      -1,   566,   567,    -1,     5,   570,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,   112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,
     241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,
     371,   372,    -1,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,   383,    -1,    -1,   386,    -1,    -1,    -1,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,   402,    -1,   404,   405,   406,    -1,    -1,   409,    -1,
     411,   412,   413,    -1,   415,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,    -1,    -1,
      -1,   442,    -1,    -1,    -1,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,    -1,
      -1,   462,   463,    -1,   465,    -1,    -1,   468,    -1,    -1,
     471,   472,   473,    -1,    -1,   476,   477,    -1,   479,   480,
     481,   482,   483,    -1,    -1,   486,   487,   488,   489,    -1,
     491,   492,    -1,    -1,   495,   496,   497,    -1,    -1,   500,
     501,    -1,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,   513,   514,    -1,    -1,    -1,   518,   519,   520,
     521,    -1,   523,   524,    -1,   526,   527,    -1,   529,   530,
      -1,    -1,   533,    -1,    -1,   536,    -1,   538,    -1,   540,
     541,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,
     551,    -1,    -1,    -1,   555,   556,   557,   558,    -1,    -1,
      -1,    -1,   563,   564,    -1,   566,   567,    -1,     5,   570,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
      -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,
      -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
     327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,    -1,   370,   371,   372,    -1,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,   383,    -1,    -1,   386,
      -1,    -1,    -1,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,   402,    -1,   404,   405,   406,
      -1,    -1,   409,    -1,   411,   412,   413,    -1,   415,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,    -1,    -1,    -1,   442,    -1,    -1,    -1,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,    -1,    -1,    -1,    -1,   462,   463,    -1,   465,    -1,
      -1,   468,    -1,    -1,   471,   472,   473,    -1,    -1,   476,
     477,    -1,   479,   480,   481,   482,   483,    -1,    -1,   486,
     487,   488,   489,    -1,   491,   492,    -1,    -1,   495,   496,
     497,    -1,    -1,   500,   501,    -1,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,
      -1,   518,   519,   520,   521,    -1,   523,   524,    -1,   526,
     527,    -1,   529,   530,    -1,    -1,   533,    -1,    -1,   536,
      -1,   538,    -1,   540,   541,    -1,    -1,    -1,    -1,    -1,
      -1,   548,    -1,    -1,   551,    -1,    -1,    -1,   555,   556,
     557,   558,    -1,    -1,    -1,    -1,   563,   564,    -1,   566,
     567,    -1,     5,   570,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,
      -1,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
     383,    -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,   402,
      -1,   404,   405,   406,    -1,    -1,   409,    -1,   411,   412,
     413,    -1,   415,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,    -1,    -1,    -1,   442,
      -1,    -1,    -1,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,
     463,    -1,   465,    -1,    -1,   468,    -1,    -1,   471,   472,
     473,    -1,    -1,   476,   477,    -1,   479,   480,   481,   482,
     483,    -1,    -1,   486,   487,   488,   489,    -1,   491,   492,
      -1,    -1,   495,   496,   497,    -1,    -1,   500,   501,    -1,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,
     513,   514,    -1,    -1,    -1,   518,   519,   520,   521,    -1,
     523,   524,    -1,   526,   527,    -1,   529,   530,    -1,    -1,
     533,    -1,    -1,   536,    -1,   538,    -1,   540,   541,    -1,
      -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,   551,    -1,
      -1,    -1,   555,   556,   557,   558,    -1,    -1,    -1,    -1,
     563,   564,    -1,   566,   567,    -1,     5,   570,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,    78,
      79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,    -1,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,   163,   164,   165,   166,    -1,    -1,
      -1,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
      -1,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,    -1,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,   228,
      -1,    -1,   231,    -1,    -1,    -1,   235,    -1,    -1,   238,
     239,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   352,   353,   354,    -1,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,    -1,    -1,
      -1,    -1,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,    -1,    -1,   404,    -1,   406,   407,    -1,
     409,    -1,    -1,   412,    -1,    -1,   415,   416,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,   426,    -1,   428,
      -1,   430,    -1,    -1,    -1,    -1,   435,   436,   437,    -1,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,    -1,   448,
      -1,    -1,   451,    -1,    -1,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,    -1,
     479,   480,   481,   482,   483,    -1,    -1,   486,   487,   488,
     489,    -1,   491,   492,    -1,    -1,   495,   496,   497,    -1,
      -1,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,    -1,
     519,   520,   521,    -1,   523,   524,    -1,   526,   527,    -1,
      -1,    -1,    -1,    -1,   533,    -1,    -1,   536,    -1,    -1,
      -1,   540,   541,    -1,    -1,    -1,    -1,    -1,    -1,   548,
      -1,    -1,   551,    -1,    -1,    -1,   555,   556,   557,   558,
      -1,    -1,   561,    -1,   563,    -1,    -1,   566,    -1,    -1,
       5,   570,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,
      75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,    -1,
     135,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,   163,   164,
     165,   166,    -1,    -1,    -1,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,   200,   201,   202,   203,   204,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,    -1,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,   228,    -1,    -1,   231,    -1,    -1,    -1,
     235,    -1,    -1,   238,   239,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,   261,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   352,   353,   354,
      -1,    -1,   357,   358,   359,    -1,   361,   362,   363,   364,
     365,   366,    -1,    -1,    -1,    -1,   371,   372,    -1,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,   383,    -1,
      -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,   394,
      -1,    -1,   397,   398,   399,    -1,   401,    -1,    -1,   404,
      -1,   406,   407,    -1,   409,    -1,    -1,   412,    -1,    -1,
     415,   416,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,   426,    -1,   428,    -1,   430,    -1,    -1,    -1,    -1,
     435,   436,   437,    -1,    -1,    -1,    -1,   442,    -1,    -1,
      -1,   446,    -1,   448,    -1,    -1,   451,    -1,    -1,   454,
     455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,    -1,
     465,    -1,    -1,   468,    -1,    -1,   471,    -1,   473,    -1,
      -1,    -1,   477,    -1,   479,   480,   481,   482,   483,    -1,
      -1,   486,   487,   488,   489,    -1,   491,   492,    -1,    -1,
     495,   496,   497,    -1,    -1,   500,   501,    -1,   503,   504,
     505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,
      -1,    -1,    -1,    -1,   519,   520,   521,    -1,   523,   524,
      -1,   526,   527,    -1,    -1,    -1,    -1,    -1,   533,    -1,
      -1,   536,    -1,    -1,    -1,   540,   541,    -1,    -1,    -1,
      -1,    -1,    -1,   548,    -1,    -1,   551,    -1,    -1,    -1,
     555,   556,   557,   558,   559,    -1,   561,    -1,   563,    -1,
      -1,   566,    -1,    -1,     5,   570,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    -1,
      71,    -1,    73,    74,    75,    76,    -1,    78,    79,    -1,
      -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,
      -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,
     131,   132,   133,    -1,   135,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,    -1,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,    -1,   190,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,
     201,   202,   203,   204,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,   228,    -1,    -1,
     231,    -1,    -1,    -1,   235,    -1,    -1,   238,   239,    -1,
     241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
     261,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,    -1,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   352,   353,   354,    -1,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,   365,   366,    -1,    -1,    -1,    -1,
     371,   372,    -1,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,   383,    -1,    -1,   386,    -1,    -1,    -1,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,    -1,    -1,   404,    -1,   406,   407,    -1,   409,    -1,
      -1,   412,    -1,    -1,   415,   416,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
      -1,    -1,    -1,    -1,   435,   436,   437,    -1,    -1,    -1,
      -1,   442,    -1,    -1,    -1,   446,    -1,   448,    -1,    -1,
     451,    -1,    -1,   454,   455,    -1,    -1,    -1,    -1,    -1,
      -1,   462,   463,    -1,   465,    -1,    -1,   468,    -1,    -1,
     471,    -1,   473,    -1,    -1,    -1,   477,    -1,   479,   480,
     481,   482,   483,    -1,    -1,   486,   487,   488,   489,    -1,
     491,   492,    -1,    -1,   495,   496,   497,    -1,    -1,   500,
     501,    -1,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,   513,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,    -1,   523,   524,    -1,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,    -1,    -1,   536,    -1,    -1,    -1,   540,
     541,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,
     551,    -1,    -1,    -1,   555,   556,   557,   558,   559,    -1,
     561,    -1,   563,    -1,    -1,   566,    -1,    -1,     5,   570,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,
      -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    -1,    71,    -1,    73,    74,    75,    76,
      -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,    -1,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,    -1,    -1,    -1,   156,
     157,   158,    -1,    -1,   161,   162,   163,   164,   165,   166,
      -1,    -1,    -1,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
      -1,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,   228,    -1,    -1,   231,    -1,    -1,    -1,   235,    -1,
      -1,   238,   239,    -1,   241,   242,    -1,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
      -1,   328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   352,   353,   354,    -1,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,   365,   366,
      -1,    -1,    -1,    -1,   371,   372,    -1,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,   383,    -1,    -1,   386,
      -1,    -1,    -1,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,    -1,    -1,   404,    -1,   406,
     407,    -1,   409,    -1,    -1,   412,    -1,    -1,   415,   416,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,   426,
      -1,   428,    -1,   430,    -1,    -1,    -1,    -1,   435,   436,
     437,    -1,    -1,    -1,    -1,   442,    -1,    -1,    -1,   446,
      -1,   448,    -1,    -1,   451,    -1,    -1,   454,   455,    -1,
      -1,    -1,    -1,    -1,    -1,   462,   463,    -1,   465,    -1,
      -1,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,
     477,    -1,   479,   480,   481,   482,   483,    -1,    -1,   486,
     487,   488,   489,    -1,   491,   492,    -1,    -1,   495,   496,
     497,    -1,    -1,   500,   501,    -1,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,
      -1,    -1,   519,   520,   521,    -1,   523,   524,    -1,   526,
     527,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,   536,
      -1,    -1,    -1,   540,   541,    -1,    -1,    -1,    -1,    -1,
      -1,   548,    -1,    -1,   551,    -1,    -1,    -1,   555,   556,
     557,   558,    -1,    -1,   561,    -1,   563,    -1,    -1,   566,
      -1,    -1,     5,   570,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,
      73,    74,    75,    76,    -1,    78,    79,    -1,    -1,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
      -1,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
     163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,    -1,   190,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   201,   202,
     203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,   228,    -1,    -1,   231,    -1,
      -1,    -1,   235,    -1,    -1,   238,   239,    -1,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   352,
     353,   354,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,   365,   366,    -1,    -1,    -1,    -1,   371,   372,
      -1,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
     383,    -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,
      -1,   404,    -1,   406,   407,    -1,   409,    -1,    -1,   412,
      -1,    -1,   415,   416,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,   426,    -1,   428,    -1,   430,    -1,    -1,
      -1,    -1,   435,   436,   437,    -1,    -1,    -1,    -1,   442,
      -1,    -1,    -1,   446,    -1,   448,    -1,    -1,   451,    -1,
      -1,   454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,
     463,    -1,   465,    -1,    -1,   468,    -1,    -1,   471,    -1,
     473,    -1,    -1,    -1,   477,    -1,   479,   480,   481,   482,
     483,    -1,    -1,   486,   487,   488,   489,    -1,   491,   492,
      -1,    -1,   495,   496,   497,    -1,    -1,   500,   501,    -1,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,
     513,   514,    -1,    -1,    -1,    -1,   519,   520,   521,    -1,
     523,   524,    -1,   526,   527,    -1,    -1,    -1,    -1,    -1,
     533,    -1,    -1,   536,    -1,    -1,    -1,   540,   541,    -1,
      -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,   551,    -1,
      -1,    -1,   555,   556,   557,   558,    -1,    -1,   561,    -1,
     563,    -1,    -1,   566,    -1,    -1,     5,   570,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,    78,
      79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,    -1,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,   163,   164,   165,   166,    -1,    -1,
      -1,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
      -1,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,    -1,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,   228,
      -1,    -1,   231,    -1,    -1,    -1,   235,    -1,    -1,   238,
     239,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   352,   353,   354,    -1,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,    -1,    -1,
      -1,    -1,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,    -1,    -1,   404,    -1,   406,   407,    -1,
     409,    -1,    -1,   412,    -1,    -1,   415,   416,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,   426,    -1,   428,
      -1,   430,    -1,    -1,    -1,    -1,   435,   436,   437,    -1,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,    -1,   448,
      -1,    -1,   451,    -1,    -1,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,    -1,
     479,   480,   481,   482,   483,    -1,    -1,   486,   487,   488,
     489,    -1,   491,   492,    -1,    -1,   495,   496,   497,    -1,
      -1,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,    -1,
     519,   520,   521,    -1,   523,   524,    -1,   526,   527,    -1,
      -1,    -1,    -1,    -1,   533,    -1,    -1,   536,    -1,    -1,
      -1,   540,   541,    -1,    -1,    -1,    -1,    -1,    -1,   548,
      -1,    -1,   551,    -1,    -1,    -1,   555,   556,   557,   558,
      -1,    -1,   561,    -1,   563,    -1,    -1,   566,    -1,    -1,
       5,   570,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,
      75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,   163,   164,
     165,   166,    -1,    -1,    -1,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,   200,   201,   202,   203,   204,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,    -1,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,   228,    -1,    -1,   231,    -1,    -1,    -1,
     235,    -1,    -1,   238,   239,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,   261,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   352,   353,   354,
      -1,    -1,   357,   358,   359,    -1,   361,   362,   363,   364,
     365,   366,    -1,    -1,    -1,    -1,   371,   372,    -1,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,   383,    -1,
      -1,   386,    -1,    -1,    -1,   390,   391,   392,   393,   394,
      -1,    -1,   397,   398,   399,    -1,   401,    -1,    -1,   404,
      -1,   406,   407,    -1,   409,    -1,    -1,   412,    -1,    -1,
     415,   416,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,   426,    -1,   428,    -1,   430,    -1,    -1,    -1,    -1,
     435,   436,   437,    -1,    -1,    -1,    -1,   442,    -1,    -1,
      -1,   446,    -1,   448,    -1,    -1,   451,    -1,    -1,   454,
     455,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,    -1,
     465,    -1,    -1,   468,    -1,    -1,   471,    -1,   473,    -1,
      -1,    -1,   477,    -1,   479,   480,   481,   482,   483,    -1,
      -1,   486,   487,   488,   489,    -1,   491,   492,    -1,    -1,
     495,   496,   497,    -1,    -1,   500,   501,    -1,   503,   504,
     505,   506,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,
      -1,    -1,    -1,    -1,   519,   520,   521,    -1,   523,   524,
      -1,   526,   527,    -1,    -1,    -1,    -1,    -1,   533,    -1,
      -1,   536,    -1,    -1,    -1,   540,   541,    -1,    -1,    -1,
      -1,    -1,    -1,   548,    -1,    -1,   551,    -1,    -1,    -1,
     555,   556,   557,   558,    -1,    -1,   561,    -1,   563,    -1,
      -1,   566,    -1,    -1,     5,   570,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    -1,
      71,    -1,    73,    74,    75,    76,    -1,    78,    79,    -1,
      -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,
      -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,    -1,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,    -1,   190,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,
     201,   202,   203,   204,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,   228,    -1,    -1,
     231,    -1,    -1,    -1,   235,    -1,    -1,   238,   239,    -1,
     241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
     261,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,    -1,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   352,   353,   354,    -1,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,   365,   366,    -1,    -1,    -1,    -1,
     371,   372,    -1,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,   383,    -1,    -1,   386,    -1,    -1,    -1,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,    -1,    -1,   404,    -1,   406,   407,    -1,   409,    -1,
      -1,   412,    -1,    -1,   415,   416,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
      -1,    -1,    -1,    -1,   435,   436,   437,    -1,    -1,    -1,
      -1,   442,    -1,    -1,    -1,   446,    -1,   448,    -1,    -1,
     451,    -1,    -1,   454,   455,    -1,    -1,    -1,    -1,    -1,
      -1,   462,   463,    -1,   465,    -1,    -1,   468,    -1,    -1,
     471,    -1,   473,    -1,    -1,    -1,   477,    -1,   479,   480,
     481,   482,   483,    -1,    -1,   486,   487,   488,   489,    -1,
     491,   492,    -1,    -1,   495,   496,   497,    -1,    -1,   500,
     501,    -1,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,   512,   513,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,    -1,   523,   524,    -1,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,    -1,    -1,   536,    -1,    -1,    -1,   540,
     541,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,
     551,    -1,    -1,    -1,   555,   556,   557,   558,    -1,    -1,
     561,    -1,   563,    -1,    -1,   566,    -1,    -1,     5,   570,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,
      -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    -1,    71,    -1,    73,    74,    75,    76,
      -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,    -1,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,    -1,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,    -1,    -1,    -1,   156,
     157,   158,    -1,    -1,   161,   162,   163,   164,   165,   166,
      -1,    -1,    -1,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
      -1,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,   228,    -1,    -1,   231,    -1,    -1,    -1,   235,    -1,
      -1,   238,   239,    -1,   241,   242,    -1,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
      -1,   328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   352,   353,   354,    -1,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,   365,   366,
      -1,    -1,    -1,    -1,   371,   372,    -1,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,   383,    -1,    -1,   386,
      -1,    -1,    -1,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,    -1,    -1,   404,    -1,   406,
     407,    -1,   409,    -1,    -1,   412,    -1,    -1,   415,   416,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,   426,
      -1,   428,    -1,   430,    -1,    -1,    -1,    -1,   435,   436,
     437,    -1,    -1,    -1,    -1,   442,    -1,    -1,    -1,   446,
      -1,   448,    -1,    -1,   451,    -1,    -1,   454,   455,    -1,
      -1,    -1,    -1,    -1,    -1,   462,   463,    -1,   465,    -1,
      -1,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,
     477,    -1,   479,   480,   481,   482,   483,    -1,    -1,   486,
     487,   488,   489,    -1,   491,   492,    -1,    -1,   495,   496,
     497,    -1,    -1,   500,   501,    -1,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,
      -1,    -1,   519,   520,   521,    -1,   523,   524,    -1,   526,
     527,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,   536,
      -1,    -1,    -1,   540,   541,    -1,    -1,    -1,    -1,    -1,
      -1,   548,    -1,    -1,   551,    -1,    -1,    -1,   555,   556,
     557,   558,    -1,    -1,   561,    -1,   563,    -1,    -1,   566,
      -1,    -1,     5,   570,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,
      73,    74,    75,    76,    -1,    78,    79,    -1,    -1,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
      -1,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
     163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,    -1,   190,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   201,   202,
     203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,   228,    -1,    -1,   231,    -1,
      -1,    -1,   235,    -1,    -1,   238,   239,    -1,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   352,
     353,   354,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,   365,   366,    -1,    -1,    -1,    -1,   371,   372,
      -1,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
     383,    -1,    -1,   386,    -1,    -1,    -1,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,
      -1,   404,    -1,   406,   407,    -1,   409,    -1,    -1,   412,
      -1,    -1,   415,   416,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,   426,    -1,   428,    -1,   430,    -1,    -1,
      -1,    -1,   435,   436,   437,    -1,    -1,    -1,    -1,   442,
      -1,    -1,    -1,   446,    -1,   448,    -1,    -1,   451,    -1,
      -1,   454,   455,    -1,    -1,    -1,    -1,    -1,    -1,   462,
     463,    -1,   465,    -1,    -1,   468,    -1,    -1,   471,    -1,
     473,    -1,    -1,    -1,   477,    -1,   479,   480,   481,   482,
     483,    -1,    -1,   486,   487,   488,   489,    -1,   491,   492,
      -1,    -1,   495,   496,   497,    -1,    -1,   500,   501,    -1,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,   512,
     513,   514,    -1,    -1,    -1,    -1,   519,   520,   521,    -1,
     523,   524,    -1,   526,   527,    -1,    -1,    -1,    -1,    -1,
     533,    -1,    -1,   536,    -1,    -1,    -1,   540,   541,    -1,
      -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,   551,    -1,
      -1,    -1,   555,   556,   557,   558,    -1,    -1,   561,    -1,
     563,    -1,    -1,   566,    -1,    -1,     5,   570,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    -1,    -1,
      -1,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,    78,
      79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,    -1,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
      -1,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
      -1,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,    -1,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,    -1,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   352,   353,   354,    -1,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,    -1,    -1,
      -1,    -1,   371,   372,    -1,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,    -1,    -1,   404,    -1,   406,    -1,    -1,
     409,    -1,    -1,   412,    -1,    -1,   415,   416,    -1,    -1,
      -1,    -1,   421,   422,   423,   424,   425,   426,    -1,   428,
      -1,   430,    -1,    -1,    -1,    -1,   435,   436,   437,    -1,
      -1,    -1,    -1,   442,    -1,    -1,    -1,   446,    -1,   448,
      -1,    -1,   451,    -1,    -1,   454,   455,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   463,    -1,   465,    -1,    -1,   468,
      -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,    -1,
     479,   480,   481,   482,   483,    -1,    -1,   486,   487,   488,
     489,    -1,   491,   492,    -1,    -1,   495,   496,   497,    -1,
      -1,   500,   501,    -1,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,    -1,
     519,   520,   521,    -1,   523,   524,    -1,   526,   527,    -1,
      -1,    -1,    -1,    -1,   533,    -1,    -1,   536,    -1,    -1,
      -1,   540,   541,    -1,    -1,    -1,    -1,    -1,    -1,   548,
      -1,    -1,   551,    -1,    -1,    -1,   555,   556,   557,   558,
      -1,    -1,    -1,    -1,   563,    -1,    -1,   566,    -1,    -1,
      -1,   570
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    14,    28,    30,    34,    48,    49,    55,    59,
      60,    72,    88,   108,   116,   117,   118,   128,   129,   141,
     153,   169,   184,   189,   192,   215,   217,   233,   250,   254,
     340,   360,   370,   380,   400,   403,   405,   408,   411,   413,
     418,   420,   427,   432,   440,   445,   449,   472,   476,   518,
     530,   534,   537,   542,   567,   581,   592,   595,   596,   597,
     598,   599,   601,   606,   608,   613,   641,   773,   909,   947,
     950,   958,   960,   962,   965,   970,   972,   973,   978,   981,
     986,   990,   998,   999,  1148,  1150,  1158,  1161,  1186,  1194,
    1205,  1211,  1224,  1227,  1230,  1236,  1240,  1244,  1246,  1247,
    1293,  1310,  1316,  1318,  1325,  1327,  1352,  1358,  1359,  1360,
    1361,  1408,  1416,  1417,    11,    95,   113,   178,   205,   255,
     375,   438,   492,   943,  1377,  1378,  1379,  1382,   251,   329,
     980,   491,   494,  1312,  1353,   499,  1284,   208,     5,     7,
       8,     9,    10,    11,    17,    20,    22,    23,    24,    25,
      26,    27,    28,    30,    34,    38,    41,    42,    43,    45,
      47,    48,    51,    54,    56,    57,    59,    61,    62,    63,
      64,    65,    67,    68,    70,    71,    72,    73,    74,    75,
      76,    78,    79,    81,    82,    84,    87,    90,    97,    98,
      99,   102,   107,   108,   113,   115,   119,   121,   122,   123,
     124,   128,   131,   132,   133,   137,   139,   140,   142,   143,
     144,   147,   149,   150,   151,   152,   153,   156,   157,   158,
     161,   162,   164,   165,   166,   169,   173,   174,   176,   178,
     180,   181,   182,   183,   185,   189,   190,   192,   195,   196,
     200,   201,   202,   203,   206,   207,   210,   212,   216,   217,
     221,   223,   224,   226,   227,   231,   234,   235,   238,   241,
     242,   248,   249,   251,   253,   255,   256,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     278,   279,   281,   282,   283,   284,   286,   287,   288,   292,
     293,   294,   295,   296,   299,   300,   302,   304,   306,   307,
     308,   309,   310,   311,   312,   313,   316,   317,   320,   321,
     322,   323,   327,   328,   333,   334,   335,   337,   338,   339,
     341,   351,   352,   353,   354,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   370,   371,   372,
     374,   376,   377,   378,   379,   381,   382,   383,   386,   390,
     391,   392,   393,   394,   397,   398,   399,   401,   402,   404,
     405,   406,   409,   411,   412,   413,   415,   416,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   430,   431,   435,
     436,   437,   438,   442,   446,   447,   448,   449,   451,   452,
     453,   454,   455,   462,   463,   465,   468,   471,   472,   473,
     476,   477,   479,   480,   481,   482,   483,   486,   487,   488,
     489,   491,   492,   495,   496,   497,   500,   501,   503,   504,
     505,   506,   512,   513,   514,   518,   519,   520,   521,   523,
     524,   526,   527,   529,   530,   533,   536,   538,   540,   541,
     548,   551,   555,   556,   557,   558,   563,   564,   566,   567,
     570,   635,  1283,  1287,  1291,  1292,   278,  1312,  1312,   563,
    1354,    95,   177,   255,   438,   456,   492,   496,   532,   540,
     617,   618,   821,   822,   823,   896,  1195,  1149,    95,   151,
     178,   208,   255,   375,   438,   492,   496,   515,   540,   555,
    1157,  1287,   980,   634,   589,  1281,  1282,  1287,   607,  1159,
     364,    78,   382,  1245,    98,   208,   494,  1312,   980,   774,
    1287,  1241,   427,   540,  1312,   980,  1162,  1237,  1312,   634,
    1354,  1287,  1001,  1003,  1004,   342,  1295,  1212,   472,   476,
     449,   512,   449,   494,  1206,   364,  1317,  1187,  1287,    30,
      72,   139,   370,   391,   420,   472,  1410,   432,   581,  1000,
       0,   141,   593,   370,   157,   359,  1228,  1281,  1287,   145,
     920,  1287,   145,   635,   186,   635,   243,  1284,  1287,  1289,
     722,   723,   726,   749,  1287,   494,   151,   915,  1377,  1312,
     961,  1354,   987,   988,  1281,   642,   589,   510,   963,   974,
      16,  1355,   204,   824,   186,  1289,   724,   749,   634,   347,
    1374,  1378,  1379,  1380,  1381,  1382,   494,   822,   208,   205,
     262,   383,  1203,  1204,     7,    20,    27,    33,    35,    36,
      37,    39,    52,    53,    57,    58,    64,    67,    81,    85,
      86,    91,    92,    94,    95,   100,   101,   102,   107,   109,
     112,   154,   159,   160,   167,   180,   182,   187,   193,   200,
     204,   215,   218,   240,   248,   259,   280,   285,   295,   299,
     301,   305,   306,   307,   308,   309,   315,   324,   325,   326,
     330,   331,   335,   355,   361,   365,   366,   368,   381,   407,
     408,   419,   425,   430,   474,   475,   480,   484,   485,   490,
     499,   503,   504,   505,   506,   516,   517,   518,   522,   525,
     540,   544,   545,   546,   547,   552,   554,   558,   570,   574,
     575,   580,   581,   584,   585,   588,   589,  1019,  1020,  1021,
    1022,  1026,  1029,  1030,  1031,  1032,  1033,  1034,  1042,  1046,
    1056,  1268,  1270,  1272,  1273,  1277,  1279,  1283,  1287,   204,
    1156,  1156,  1156,  1287,   186,  1156,  1156,   749,  1156,   634,
    1156,  1312,   602,  1231,    12,    13,    88,   116,   129,   151,
     153,   164,   184,   208,   215,   254,   376,   395,   401,   409,
     432,   445,   446,   486,   515,   537,   539,  1328,  1330,  1332,
    1333,  1287,   339,    63,   387,   589,  1289,   114,   194,   262,
    1164,  1287,  1019,  1248,   219,  1281,  1311,  1312,    46,   775,
     175,    33,   278,  1216,  1242,  1287,   634,   982,  1312,   114,
     262,  1165,  1193,   278,   382,   449,  1238,  1239,   959,    12,
    1326,  1330,   510,  1355,  1002,    12,   125,   194,   461,   462,
     463,   464,   465,   466,   478,  1008,  1009,  1010,  1294,    23,
      34,    57,    58,    67,    69,    84,    86,    88,    96,   143,
     147,   150,   176,   178,   183,   185,   207,   208,   212,   230,
     251,   278,   310,   320,   339,   363,   374,   375,   378,   379,
     437,   449,   477,   494,   557,   869,   895,  1213,  1216,  1217,
    1219,  1301,   952,   953,   952,   952,   562,   951,   952,  1153,
    1281,  1287,  1312,  1193,    35,   193,   499,  1269,  1285,  1409,
    1409,  1409,  1409,  1409,  1003,  1000,   582,   587,  1287,  1226,
    1225,   294,   497,   524,   911,   538,    92,  1289,  1290,   913,
     728,   750,  1287,   912,   341,     6,    55,   129,   325,   386,
     388,   751,  1281,   635,   467,  1383,  1384,   914,   971,  1152,
    1153,   222,   583,   994,   995,   581,   643,  1287,   609,  1152,
    1152,    54,   327,   327,   400,  1356,   324,   325,  1025,  1287,
     727,   750,   171,     6,  1290,  1343,  1344,   408,    10,   151,
     375,   515,   621,  1014,  1376,  1384,  1392,  1396,  1397,  1403,
     621,  1014,  1375,  1384,  1392,  1397,  1403,  1377,  1382,   824,
    1287,   175,  1196,  1200,  1201,  1287,  1203,   581,   581,   581,
    1029,   581,   581,   581,  1019,  1059,   581,   581,   581,   581,
     581,   581,   581,   581,   581,  1018,  1018,   581,  1018,   581,
     581,   581,   525,   581,  1268,   581,   581,   581,   581,   581,
     581,   581,   581,   581,   581,   581,  1019,   581,   581,   581,
    1057,  1058,  1277,  1287,   581,   581,   581,   581,   581,   581,
     581,   581,   581,  1019,   581,  1018,   581,   581,   581,   581,
     581,   581,   581,   581,   581,   581,   581,   581,   581,   581,
     581,   581,   581,  1018,   581,  1268,   581,   581,   581,  1268,
     581,   581,    35,   193,   499,   581,  1018,  1018,  1018,   581,
     581,   581,   581,   581,  1029,  1029,  1029,   432,   581,  1019,
    1371,  1287,  1047,  1287,    15,    16,   344,   347,   568,  1023,
    1024,   145,   146,   179,   188,   225,   236,   263,   318,  1027,
      31,   126,   222,   244,   305,   396,   443,   444,   454,   572,
     573,   574,   575,   576,   577,   578,   579,  1025,  1029,    66,
     346,   583,  1285,   581,   589,   154,  1287,   635,  1287,   336,
     750,   635,  1289,   760,  1217,   635,  1290,  1342,  1152,  1156,
     543,   603,   119,   196,   256,   278,   374,   382,   412,   449,
     473,   491,  1232,  1233,  1312,   374,  1331,   422,   422,   496,
     540,   555,   342,  1335,   491,  1337,    62,   449,  1334,    96,
     555,  1336,   336,   583,    18,   145,  1103,  1104,  1319,  1287,
     943,   453,    76,   175,   262,  1249,  1255,    48,   175,  1281,
    1313,  1314,   979,   246,   249,   384,   776,   780,   588,   600,
    1284,   256,   983,  1290,   984,   985,  1281,   966,   219,  1153,
    1166,  1167,    48,   583,  1152,  1331,   336,   427,  1357,  1356,
     531,  1362,  1363,   576,  1012,  1013,  1014,  1010,  1296,  1297,
    1298,   150,   440,   244,   560,  1223,   519,   581,    95,   151,
     178,   375,   494,   515,   555,  1223,    12,   832,  1289,   245,
    1122,  1124,   175,   222,  1218,  1220,    65,   473,   172,   473,
     473,   473,   278,   491,    65,   473,    12,    41,    82,    87,
     224,   293,   353,   455,   488,  1207,  1208,  1209,   196,   473,
     473,   519,  1122,  1223,  1220,   256,   142,    68,   364,   377,
     491,   514,   473,   551,   949,   399,   468,   954,   955,   948,
      79,   943,   583,   338,  1412,   487,  1413,   229,   415,  1411,
     582,  1363,  1365,  1366,  1367,   141,   594,   998,  1229,  1269,
    1287,   112,   819,   820,   829,   830,   878,    98,  1018,   588,
     636,     6,   729,   636,   581,    97,   746,   746,   746,     4,
     910,   916,   431,   555,  1384,  1152,   510,   583,   112,   989,
    1287,   988,   208,   232,   893,   996,   644,   645,  1019,   264,
     265,   266,   267,   268,   269,   271,   272,   273,   274,   275,
     276,   277,   279,   397,   398,   610,   611,   612,   157,   383,
     964,    56,   157,   161,   172,   292,   383,   975,   976,   977,
      54,   400,   154,   616,   729,    98,   746,   202,   583,  1014,
     824,  1014,  1014,   178,   178,  1384,  1281,   897,   898,  1154,
    1155,  1281,   583,  1198,   589,  1202,  1019,  1019,    12,   125,
    1052,  1105,  1052,  1052,  1052,   559,  1061,  1019,  1019,  1056,
    1056,  1019,  1019,  1019,   125,  1052,  1105,   582,  1019,   582,
    1019,  1019,  1019,  1019,  1277,   581,  1371,   103,   104,   105,
     106,   107,   197,   198,   199,   200,   295,   297,   298,   299,
     306,   381,   429,   430,   558,   569,   570,  1099,  1101,  1056,
      99,   102,   503,   506,  1102,   125,  1049,  1019,  1019,  1019,
    1019,  1099,  1019,  1056,  1058,     9,   583,   589,   125,  1052,
    1019,  1019,   125,  1052,  1019,  1019,  1056,  1056,  1056,  1019,
    1019,  1019,  1019,  1056,  1022,  1019,  1019,  1019,  1019,  1019,
    1019,  1052,  1052,  1019,  1019,   125,  1052,  1019,  1019,   174,
    1100,  1101,  1100,  1019,    44,   237,   511,  1019,  1019,   582,
    1278,  1279,  1287,  1052,  1052,  1019,  1019,  1372,  1372,   582,
     583,   582,  1019,   588,  1048,  1289,   589,  1019,  1019,  1019,
    1021,   160,   330,   517,   533,  1025,    12,    17,  1021,  1028,
    1022,  1022,   581,  1029,  1022,  1022,  1022,  1022,   244,  1022,
    1022,   218,  1022,   218,  1022,  1022,  1022,  1022,  1022,    31,
     222,   244,   396,  1289,  1029,  1019,  1035,  1287,   589,  1281,
     760,   328,   556,   761,   762,   143,   583,    50,   414,   944,
    1152,   588,   604,   605,    48,   562,   583,  1234,   491,   581,
    1345,  1345,  1345,  1345,   178,   375,   494,  1329,  1333,  1287,
     165,   321,  1287,  1320,  1321,  1166,  1284,   278,   251,  1254,
     991,   278,  1104,   583,  1152,   779,   778,   359,   786,   190,
     232,  1289,    29,   510,  1243,   583,   510,   583,   510,  1152,
    1167,  1163,  1239,   175,   583,   178,   375,  1329,  1287,    12,
     125,  1369,   583,  1005,  1016,  1019,  1275,  1287,   583,   183,
     251,   337,   437,  1299,  1300,  1303,  1304,   222,  1221,  1284,
    1019,   576,   824,   635,   635,   635,  1281,   635,  1281,   256,
     310,   473,  1215,  1215,   259,   331,   522,  1125,  1126,  1270,
    1223,  1287,   635,  1223,  1290,   172,  1218,   635,  1223,   223,
     489,   162,   172,  1210,   583,  1218,  1281,  1220,  1218,  1218,
    1223,  1223,   536,   956,   583,   956,   451,   432,   581,   585,
    1062,  1063,  1064,  1065,  1066,  1075,  1076,  1083,  1269,   362,
    1414,   345,  1118,  1124,  1368,   820,    66,   869,   121,  1289,
      70,    81,   234,   303,   327,   385,   467,   638,   640,   392,
     526,   747,   748,   210,   743,   744,   745,   752,   760,   762,
      95,   195,   351,   361,   367,   452,   540,   619,   620,  1284,
      24,   284,   737,   738,   739,   752,   753,   754,   760,   762,
     730,   731,   737,     6,    13,    14,    25,    26,    55,    59,
      60,    64,    70,    78,    85,    98,   115,   122,   123,   129,
     137,   143,   170,   206,   208,   216,   231,   283,   300,   304,
     340,   345,   352,   354,   360,   361,   390,   402,   403,   404,
     405,   424,   477,   492,   495,   513,   520,   531,   771,   826,
     828,   829,   830,   921,   925,   927,   930,   936,   937,   938,
    1114,   336,   629,   917,   113,   221,  1281,  1284,  1153,   581,
     582,   583,   145,   145,   145,   145,   145,   145,   145,   145,
     145,   145,   145,   145,   145,   145,   145,   145,   583,   538,
     976,   818,   819,    70,   322,   393,   527,   740,   741,   742,
     752,   756,   757,   758,   759,   760,   762,   564,   542,   725,
      46,  1344,   178,   635,   635,   635,   635,  1287,   614,   520,
     543,   901,   336,   583,  1199,  1197,  1201,   175,   576,  1287,
    1104,   583,   582,  1052,   582,  1053,   582,   582,   582,  1019,
     135,   559,  1060,    18,   582,   543,   582,   582,   582,   583,
     543,   583,  1043,   582,   576,   582,   583,   583,   582,   582,
     582,   582,   175,   582,   583,  1045,   582,   583,   583,   583,
     575,   583,   582,   582,   581,  1277,  1287,  1052,   582,   582,
     582,  1052,   582,   583,   582,   582,   582,   582,   582,   582,
     582,   583,   582,   222,   582,   583,   583,   583,   583,   582,
     582,   582,   583,   175,   583,  1052,   582,   582,   582,   583,
     583,   583,   582,   175,  1019,   175,  1019,   175,  1019,   175,
     582,   583,   582,   582,   582,   582,   583,   582,  1001,  1000,
    1056,   586,   183,   251,   437,  1302,   441,  1287,   160,   330,
     517,   533,   581,    16,  1019,  1371,   149,  1110,  1022,  1019,
    1019,  1022,   581,  1029,  1022,  1014,  1039,  1040,  1041,   581,
     589,  1287,  1151,   761,   145,   441,  1177,  1178,  1290,   944,
    1289,   583,   387,  1233,  1152,  1235,  1287,  1346,  1347,   576,
    1281,  1287,  1341,  1341,  1341,   145,   165,   179,   188,   235,
     236,   263,   321,   372,  1322,  1324,   560,  1106,  1160,   209,
     992,   993,  1281,   262,   387,   565,  1315,  1314,   581,   784,
     784,   109,   167,   193,   259,   331,   522,  1129,  1132,  1133,
     483,   787,   777,   581,  1019,  1284,  1290,  1290,   985,  1281,
     157,   383,   541,   967,   968,   969,   432,   440,   547,   548,
     581,   814,  1168,  1171,  1284,   184,  1341,  1341,  1341,  1364,
    1013,   175,   219,  1006,  1007,  1117,  1118,  1144,  1015,   589,
    1297,   112,   512,  1287,  1306,   311,   361,   588,   869,  1305,
    1284,   175,  1222,   582,  1287,   334,   583,   449,  1223,   382,
    1122,  1209,  1223,  1218,  1281,  1223,  1223,   612,   957,   955,
    1082,  1287,    89,   211,   229,   240,   314,   419,   478,  1074,
     440,   583,  1281,  1082,   583,   172,  1415,    46,  1122,  1178,
    1178,   312,  1284,   467,   467,   467,   467,   467,   431,  1284,
    1284,  1178,   583,   745,  1284,  1284,  1284,  1284,   109,   167,
     193,   259,   331,   522,  1128,  1284,  1284,   582,   583,  1178,
    1178,   583,   739,   732,   733,   752,   753,   754,    69,    80,
     177,   360,   456,   840,   843,   844,   891,   893,   942,   942,
     360,  1178,  1178,   942,  1178,   360,   360,  1178,  1178,   510,
     121,  1178,   230,   492,   171,   360,   373,   893,   942,   230,
    1178,   492,   121,  1178,  1178,  1178,  1178,   942,   360,    46,
    1178,  1178,   772,  1178,   360,   358,    18,   145,   510,   946,
     360,   360,  1178,   124,   293,  1287,  1178,  1178,  1178,  1178,
     826,   583,   770,   771,   925,   581,   589,   839,   845,  1280,
    1287,    74,   428,   403,   918,  1385,   373,  1095,  1096,  1097,
    1287,  1019,  1128,  1284,  1284,   109,   167,   259,   331,   522,
    1130,  1284,  1128,  1284,  1284,  1284,  1284,  1284,  1128,  1128,
    1284,  1284,  1128,   611,  1178,  1178,  1178,  1178,   583,   742,
    1289,   255,   158,   734,   735,   736,   752,   753,   754,   755,
     758,   759,   760,   762,   361,   499,  1287,   622,  1404,     8,
      29,   720,   581,   416,   244,   581,   764,   825,   827,   828,
      45,   190,   426,   903,   903,  1281,  1155,  1281,   543,  1106,
    1063,   589,  1202,   218,  1019,   582,  1019,   502,  1019,  1019,
     139,    33,    58,    99,   102,   110,   316,   447,   506,   535,
    1054,    33,   870,  1289,  1019,   870,  1054,  1056,   582,   218,
     218,  1019,  1019,  1056,  1019,  1019,  1019,  1019,  1019,  1022,
     582,   582,  1019,  1019,  1019,  1019,  1019,  1019,  1056,   218,
    1019,  1019,  1019,   582,  1019,  1019,  1019,  1019,   175,  1019,
     175,  1019,   175,  1019,  1019,  1019,  1370,  1370,   582,   589,
     589,   589,  1289,  1019,  1371,  1021,   582,   583,   582,  1029,
    1099,  1099,    16,  1019,  1371,  1110,  1019,   582,   583,  1055,
    1056,  1287,   831,  1289,   605,   254,   582,   583,   589,   589,
     510,   510,   510,  1323,  1107,  1123,  1124,  1168,   499,  1286,
     583,   994,   565,   251,  1014,    46,   581,   794,   784,   781,
     782,   783,  1287,   510,   968,   815,  1169,   581,  1174,  1179,
    1174,   582,   814,  1170,  1274,  1275,  1278,  1287,  1172,   342,
     175,   175,   175,   999,   130,  1063,  1145,   172,   254,  1011,
    1144,  1123,  1007,    18,  1017,  1284,  1287,   576,  1287,   589,
     226,   589,  1177,   112,   870,   871,  1177,   172,  1177,   588,
    1289,    33,   112,   873,   874,  1289,  1130,  1214,   147,   557,
    1126,  1126,   562,   331,  1106,  1218,   583,  1077,  1082,  1062,
     229,   229,   348,  1084,   229,   240,   419,  1084,  1075,  1062,
    1189,  1190,  1278,  1064,  1104,  1079,  1080,  1128,   296,  1119,
     112,   875,   877,  1289,   871,    98,    98,   113,   221,   201,
     763,  1129,   745,   620,   763,   763,   739,   583,   733,   906,
    1280,   893,   894,   980,   894,    60,   171,   373,   532,   842,
     892,   841,   842,   906,  1280,   980,  1130,  1128,  1280,  1128,
      12,   926,   934,   935,  1287,   980,  1284,  1284,   869,  1178,
    1128,   232,   934,   232,  1280,  1280,   831,  1178,   165,   235,
     327,   834,  1128,  1130,  1130,  1280,   980,  1115,  1116,  1278,
     112,  1128,   112,  1128,  1134,   775,  1284,   980,  1281,   980,
     980,    73,    75,   112,   133,   166,   353,   394,   833,  1128,
    1134,   831,   581,     6,   129,   938,   837,   838,   839,   840,
    1287,     8,   165,   945,   395,   841,   883,   846,   589,   325,
     371,    22,   152,   623,   510,   122,   137,   625,   581,  1386,
     582,   583,  1284,  1129,   763,   763,   742,   341,   186,  1178,
     583,   736,   499,   416,   336,   581,   116,   215,   537,   721,
    1398,   110,   220,   389,   479,   836,  1281,   244,   360,   765,
     770,   837,   770,   583,   827,   615,  1063,  1117,  1106,  1104,
    1019,   582,  1019,   502,   581,   862,   863,   863,   581,   857,
     858,   862,   863,   220,   220,   582,   582,   582,   582,   582,
    1044,  1019,  1019,   582,   582,  1051,  1118,   583,   583,   582,
     583,   582,   222,  1036,  1037,   582,   582,   582,   582,   583,
     582,   582,  1019,   582,   172,   582,   582,   583,   582,   583,
     583,   582,  1019,   582,  1019,   582,  1019,   582,   582,   582,
    1373,  1373,   589,   907,   582,  1056,  1021,   582,   583,   582,
    1015,  1041,   582,  1347,   576,   576,  1343,  1343,  1343,   581,
    1019,   336,  1184,  1250,   993,   205,   997,   792,  1022,   780,
     360,   795,   796,   582,   583,  1290,  1008,  1175,  1176,  1278,
    1180,   583,   581,  1171,   582,   582,   583,   589,  1362,   175,
    1343,  1343,  1343,  1106,  1106,   131,   349,  1140,  1141,  1146,
     537,   222,  1284,  1287,   589,  1287,   242,  1287,    12,    33,
     112,   336,  1019,  1309,    66,   876,  1019,  1290,   335,   361,
     499,  1308,  1302,  1177,  1122,   266,  1223,   612,  1365,  1078,
     586,   229,  1075,  1084,  1084,   229,   336,   336,   543,   583,
    1188,  1177,  1093,  1094,  1008,  1019,  1120,  1276,   733,   928,
    1019,   232,   232,   894,   906,   898,   129,   440,   926,   939,
     923,   583,  1129,   871,  1284,   906,   944,  1284,   940,   926,
     583,    19,   117,  1121,   926,   931,   926,  1235,   582,   583,
    1287,  1281,    32,    33,    38,    40,    42,    43,    58,    99,
     102,   110,   127,   144,   166,   168,   180,   181,   220,   248,
     257,   258,   260,   289,   290,   291,   307,   308,   309,   313,
     316,   332,   333,   365,   366,   389,   436,   440,   450,   500,
     503,   506,   507,   508,   509,   549,   550,   570,   847,   850,
     851,   852,   853,   854,   855,   856,  1287,   371,  1019,  1019,
     336,   629,   635,   336,    70,   630,  1287,  1387,    18,  1096,
     581,  1287,   763,   736,   836,   428,  1405,   336,   646,   647,
     649,  1287,   453,  1281,   814,   582,   205,   408,   767,  1256,
     827,   581,  1106,   245,  1127,  1099,  1019,   109,   259,   331,
     522,    20,    33,    47,   529,   869,   879,   331,   582,  1099,
    1099,   434,  1050,  1019,  1019,  1056,    42,   314,   582,   562,
    1038,  1019,  1099,  1019,  1019,  1019,  1019,   582,   582,   582,
     582,  1287,   582,  1056,  1017,   410,  1348,  1348,  1348,   112,
    1019,  1182,  1183,   132,  1256,   238,  1015,   190,   232,   797,
     582,   583,   783,  1012,   583,  1177,  1181,  1182,  1179,  1173,
    1171,  1274,  1287,  1343,  1123,   186,  1111,  1286,  1286,   588,
    1142,  1143,  1289,   442,   576,   387,   406,   435,  1307,   877,
    1177,   581,   581,  1306,  1019,   145,   582,  1065,  1062,  1075,
     229,   229,  1062,  1075,  1068,  1067,  1069,  1190,  1106,  1183,
    1091,  1092,  1012,   583,  1121,   359,   581,   929,   906,   898,
     581,   112,   112,   845,   975,   935,   876,   847,   922,  1116,
     932,   934,   924,   582,   838,   884,   862,   862,   863,   857,
     369,   848,   857,   857,   879,    58,   549,   851,   853,   879,
     879,    58,   550,   550,   553,   857,   849,   863,   863,   879,
     862,   863,    25,    66,    70,   112,   330,   336,   373,   436,
     532,   865,   866,   867,   882,  1025,   553,   862,   879,    33,
     862,   880,   862,   862,   863,   581,   858,   864,   589,  1099,
     449,  1284,   128,   919,   582,   583,  1388,  1389,   619,   453,
     623,   213,   222,   350,   650,   651,   652,   653,  1014,   582,
     583,   648,  1284,   582,   582,   825,    18,   817,   904,   905,
    1287,  1126,   582,   582,   582,   582,   582,   880,    20,   529,
     869,   881,   880,   870,   583,   582,   582,  1269,   582,   582,
     583,   582,   302,   234,   382,   582,   582,   582,   582,   582,
     582,   582,    61,   227,   323,   469,   481,   566,  1339,  1340,
     562,  1349,  1349,  1349,   582,   583,  1185,   219,   582,   581,
     785,   581,   798,  1287,   796,   816,  1176,  1183,   582,  1365,
      46,   191,  1108,  1147,  1289,   583,   302,    71,   523,   387,
    1308,   499,   499,  1177,  1284,  1104,   336,  1071,  1075,  1075,
     336,  1073,  1019,  1019,   581,  1117,   170,   205,   542,  1086,
    1087,  1090,  1081,  1276,  1129,   795,   581,   581,   904,   102,
     503,   506,   574,   575,  1271,  1272,   945,   865,   980,   933,
     967,   280,   336,   581,   885,   887,   888,   889,   447,   535,
     571,   859,   860,   861,   581,   859,   859,   879,   553,   859,
     581,   879,   859,   875,  1284,   326,   868,  1271,   537,   112,
     232,   867,   232,   330,   879,   880,   879,   880,   859,   331,
     859,  1287,   624,   631,   632,  1287,   432,   581,  1390,   582,
    1284,   628,   629,   582,   583,   648,  1393,  1399,   649,   847,
     766,   770,   581,   814,   582,   583,  1121,   581,   870,   880,
     331,  1019,   302,   156,   499,   499,   499,    16,  1338,   184,
     281,   282,   286,   287,  1350,  1351,  1183,   232,  1251,  1014,
     788,   790,   791,  1287,   547,   799,   835,  1007,  1123,  1112,
    1276,  1109,  1117,    68,  1257,  1143,   582,   582,  1309,    16,
    1070,   543,  1072,   543,  1098,  1287,  1127,   893,   893,  1087,
     835,  1121,   582,   904,   904,   582,  1273,  1273,   941,   219,
     176,   357,   448,   116,   537,   886,  1287,   889,   861,   908,
    1269,   908,  1018,   326,   548,   471,   626,    52,    63,   163,
     204,   228,   239,   339,   417,   633,   671,   673,   674,   675,
     677,   678,   679,   680,   681,   682,   684,   692,   693,   696,
     707,   710,   712,   713,  1283,  1288,  1292,  1001,  1000,   562,
    1391,   625,  1406,   652,  1287,  1281,   416,  1365,   767,   814,
     768,   231,   562,   899,   900,   901,   902,   905,   331,   582,
     582,  1339,   342,  1128,  1128,  1128,  1128,  1351,   537,   494,
     792,   482,   793,   582,   583,   222,   241,    70,    98,   208,
     283,   300,   322,   492,   811,   812,   813,  1217,  1011,   562,
     583,  1113,  1121,  1019,  1123,   138,   148,   343,   498,  1258,
    1259,   247,  1260,   267,  1019,   581,  1019,   581,   582,   583,
     172,  1085,  1085,   582,   582,   899,   945,   581,    50,   327,
     414,   440,   890,   890,   582,   583,   582,   583,   582,  1018,
    1019,   140,   627,   694,   697,  1287,   175,   321,   685,   672,
    1288,  1288,  1287,   676,   596,   261,   407,   561,   716,    30,
     714,   590,   582,    51,    60,   251,   630,   637,   847,   172,
    1400,   582,  1362,  1178,   356,   902,  1121,   582,  1191,  1192,
    1278,  1281,  1015,  1129,   789,   791,   581,   501,  1178,   121,
     121,  1178,  1178,  1178,  1178,   581,   806,   813,   143,    90,
     421,  1276,   375,  1135,    46,    46,   138,    46,  1259,   470,
     498,  1261,  1262,   145,  1098,  1098,  1287,   186,   229,   345,
    1089,  1088,   883,   899,   795,     5,   112,   330,   887,  1287,
     879,  1269,   879,  1019,  1019,   559,   699,   703,   175,  1287,
     687,   688,  1019,   655,   670,   671,   673,   675,   677,   679,
     680,   681,   682,   684,   692,   707,   710,   712,   655,   717,
     715,   708,   711,  1365,    60,   342,    60,   128,   120,   638,
     639,  1025,  1407,  1014,   847,   769,  1128,  1283,   583,  1177,
    1252,   582,   793,   803,   804,   805,  1022,   288,   581,   800,
     801,   802,  1284,  1178,  1178,   259,   331,   522,  1131,  1132,
    1131,  1129,  1289,   483,   807,   808,  1178,  1121,  1287,  1269,
    1269,    46,  1269,    46,    46,  1262,  1130,   582,   582,    46,
      46,   581,   581,   582,   695,   704,   135,   703,   706,   219,
     139,  1019,   139,   670,   587,   536,  1019,   656,   716,   714,
     342,   342,   631,   120,   670,  1394,  1401,  1365,  1192,  1183,
     869,   872,   582,   583,   288,   805,  1284,  1284,   809,   582,
     583,   831,  1136,  1269,  1269,  1269,    16,  1095,  1097,   559,
     698,   700,  1019,   655,   139,   683,   204,   502,   261,   587,
     719,   128,   111,   654,   657,   709,  1288,   709,   134,   637,
     871,  1253,   804,   582,   582,   810,  1289,   808,   581,   270,
     582,   582,   701,   700,   706,   705,    52,   686,  1287,   689,
    1019,   718,    83,   155,   662,   668,  1287,   139,   670,   587,
     425,  1402,  1257,   811,  1014,  1137,  1138,  1139,   145,  1019,
     139,   502,   583,   655,   139,   655,   189,   583,   658,    77,
      93,   587,  1395,   670,  1260,  1019,   582,   583,  1128,   702,
      52,   655,  1287,   690,   407,   139,   172,  1287,   847,   172,
     172,   670,   205,  1263,  1015,  1139,   502,   135,   136,   691,
     561,   659,   112,   669,   459,   665,  1128,   660,   661,   331,
     581,  1264,   655,   655,   687,   458,   460,   663,   664,   665,
     667,  1025,  1287,  1019,   548,   666,   998,   247,   582,   588,
    1265,  1266,  1278,   440,  1267,   583,   670,   173,  1285,  1289,
     582,   583,  1191,   664,  1266
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 1351 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:
#line 1363 "sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                ! lip->stmt_prepare_mode &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:
#line 1388 "sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 61:
#line 1461 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 64:
#line 1476 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 65:
#line 1486 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 66:
#line 1493 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 67:
#line 1503 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 68:
#line 1510 "sql_yacc.yy"
    {}
    break;

  case 73:
#line 1525 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 74:
#line 1537 "sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 75:
#line 1545 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 76:
#line 1556 "sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 77:
#line 1562 "sql_yacc.yy"
    {}
    break;

  case 80:
#line 1572 "sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 81:
#line 1576 "sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:
#line 1580 "sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:
#line 1584 "sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 84:
#line 1588 "sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 85:
#line 1592 "sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 86:
#line 1597 "sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:
#line 1601 "sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 88:
#line 1605 "sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:
#line 1609 "sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:
#line 1613 "sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:
#line 1617 "sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 93:
#line 1626 "sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:
#line 1630 "sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 95:
#line 1646 "sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:
#line 1650 "sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 97:
#line 1661 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.db_type= ha_default_handlerton(thd);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
          }
    break;

  case 98:
#line 1680 "sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if (!lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
          }
    break;

  case 99:
#line 1695 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_CREATE_INDEX;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(7) - (7)].table),
                                                        NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_ADD_INDEX;
            lex->col_list.empty();
            lex->change=NullS;
          }
    break;

  case 100:
#line 1708 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key;
            if ((yyvsp[(2) - (12)].key_type) != Key::FULLTEXT && lex->key_create_info.parser_name.str)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            key= new Key((yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str, &lex->key_create_info, 0,
                         lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty();
          }
    break;

  case 101:
#line 1724 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 102:
#line 1729 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 103:
#line 1736 "sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 104:
#line 1742 "sql_yacc.yy"
    {}
    break;

  case 105:
#line 1744 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 106:
#line 1748 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 107:
#line 1752 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 108:
#line 1756 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 109:
#line 1767 "sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 112:
#line 1781 "sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 113:
#line 1785 "sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 114:
#line 1789 "sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 115:
#line 1793 "sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 116:
#line 1797 "sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 117:
#line 1801 "sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 118:
#line 1805 "sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 119:
#line 1812 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->create_info.options= (yyvsp[(2) - (3)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(3) - (3)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 120:
#line 1831 "sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 121:
#line 1842 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 123:
#line 1849 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 124:
#line 1855 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 125:
#line 1857 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            (yyval.num)= 1;
          }
    break;

  case 126:
#line 1862 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            (yyval.num)= 1;
          }
    break;

  case 127:
#line 1867 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            (yyval.num)= 1;
          }
    break;

  case 128:
#line 1875 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 129:
#line 1882 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 131:
#line 1890 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 132:
#line 1896 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 134:
#line 1902 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 135:
#line 1908 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 136:
#line 1916 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 137:
#line 1918 "sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 138:
#line 1925 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 139:
#line 1968 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 153:
#line 2000 "sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 154:
#line 2015 "sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 155:
#line 2031 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 156:
#line 2049 "sql_yacc.yy"
    {}
    break;

  case 157:
#line 2050 "sql_yacc.yy"
    {}
    break;

  case 158:
#line 2054 "sql_yacc.yy"
    {}
    break;

  case 159:
#line 2055 "sql_yacc.yy"
    {}
    break;

  case 160:
#line 2061 "sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 161:
#line 2063 "sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 162:
#line 2065 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 163:
#line 2067 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 164:
#line 2069 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 165:
#line 2071 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 166:
#line 2073 "sql_yacc.yy"
    {}
    break;

  case 167:
#line 2078 "sql_yacc.yy"
    { }
    break;

  case 168:
#line 2079 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 169:
#line 2080 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 170:
#line 2085 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 171:
#line 2089 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 172:
#line 2096 "sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 173:
#line 2104 "sql_yacc.yy"
    {}
    break;

  case 178:
#line 2120 "sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 179:
#line 2124 "sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 184:
#line 2142 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 185:
#line 2162 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 190:
#line 2199 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 191:
#line 2224 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 192:
#line 2225 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 193:
#line 2226 "sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 194:
#line 2227 "sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 195:
#line 2231 "sql_yacc.yy"
    {}
    break;

  case 197:
#line 2236 "sql_yacc.yy"
    {}
    break;

  case 199:
#line 2242 "sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 200:
#line 2246 "sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 201:
#line 2272 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 202:
#line 2280 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL)
                MYSQL_YYABORT;

              lex->sphead->add_instr(is);
            }

            pctx->declare_var_boundary(0);
            lex->sphead->restore_lex(YYTHD);

            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 203:
#line 2338 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype));
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 204:
#line 2352 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
                                      ctx->current_var_count());
            if (i == NULL)
              MYSQL_YYABORT;
            sp->add_instr(i);
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 205:
#line 2368 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL)
                MYSQL_YYABORT;
              sp->add_instr(i);
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->add_instr(i);
              sp->push_backpatch(i, lex->spcont->last_label()); /* Block end */
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 206:
#line 2400 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL)
              MYSQL_YYABORT;
            sp->add_instr(i);
            ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str));
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 207:
#line 2425 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 208:
#line 2429 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            lex->sphead->restore_lex(YYTHD);
          }
    break;

  case 209:
#line 2447 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 210:
#line 2448 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 211:
#line 2454 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 212:
#line 2456 "sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 213:
#line 2461 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 214:
#line 2484 "sql_yacc.yy"
    { /* mysql errno */
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 215:
#line 2492 "sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, 5);
            (yyval.spcondtype)->sqlstate[5]= '\0';
          }
    break;

  case 216:
#line 2508 "sql_yacc.yy"
    {}
    break;

  case 217:
#line 2509 "sql_yacc.yy"
    {}
    break;

  case 218:
#line 2514 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 219:
#line 2518 "sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 220:
#line 2527 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 221:
#line 2534 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 222:
#line 2541 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 223:
#line 2551 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 224:
#line 2566 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 225:
#line 2583 "sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 226:
#line 2584 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 240:
#line 2605 "sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 241:
#line 2607 "sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 242:
#line 2611 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 243:
#line 2620 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              i->m_query.str= strmake_root(thd->mem_root,
                                           sp->m_tmp_query,
                                           i->m_query.length);
              sp->add_instr(i);
            }
            sp->restore_lex(thd);
          }
    break;

  case 244:
#line 2666 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 245:
#line 2668 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->add_instr(i);
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            sp->restore_lex(YYTHD);
          }
    break;

  case 246:
#line 2693 "sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 247:
#line 2699 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 248:
#line 2708 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 249:
#line 2761 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL)
                MYSQL_YYABORT;
              sp->add_instr(i);
            }
          }
    break;

  case 250:
#line 2804 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL)
              MYSQL_YYABORT;
            sp->add_instr(i);
          }
    break;

  case 251:
#line 2824 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL)
              MYSQL_YYABORT;
            sp->add_instr(i);
          }
    break;

  case 252:
#line 2841 "sql_yacc.yy"
    {}
    break;

  case 253:
#line 2846 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL)
              MYSQL_YYABORT;
            sp->add_instr(i);
          }
    break;

  case 257:
#line 2872 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 258:
#line 2892 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 259:
#line 2914 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 260:
#line 2916 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL)
              MYSQL_YYABORT;

            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
            sp->add_cont_backpatch(i);
            sp->add_instr(i);
            sp->restore_lex(YYTHD);
          }
    break;

  case 261:
#line 2932 "sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL)
              MYSQL_YYABORT;

            sp->add_instr(i);
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 262:
#line 2945 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 268:
#line 2965 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 269:
#line 2971 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 270:
#line 2982 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 271:
#line 2990 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 272:
#line 2998 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 277:
#line 3016 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 278:
#line 3020 "sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true);
            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 279:
#line 3029 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_then(lex);
          }
    break;

  case 280:
#line 3037 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 281:
#line 3041 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false);
            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 282:
#line 3048 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_then(lex);
          }
    break;

  case 283:
#line 3056 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL)
              MYSQL_YYABORT;
            sp->add_instr(i);
          }
    break;

  case 285:
#line 3071 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 286:
#line 3089 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 287:
#line 3106 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 288:
#line 3107 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 289:
#line 3112 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 290:
#line 3128 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 291:
#line 3144 "sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 292:
#line 3151 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 293:
#line 3159 "sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 294:
#line 3168 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->add_instr(i);
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->add_instr(i);
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 295:
#line 3196 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL)
              MYSQL_YYABORT;
            lex->sphead->add_instr(i);
          }
    break;

  case 296:
#line 3206 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 297:
#line 3208 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL)
              MYSQL_YYABORT;
            /* Jumping forward */
            sp->push_backpatch(i, lex->spcont->last_label());
            sp->new_cont_backpatch(i);
            sp->add_instr(i);
            sp->restore_lex(YYTHD);
          }
    break;

  case 298:
#line 3223 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL)
              MYSQL_YYABORT;
            lex->sphead->add_instr(i);
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 299:
#line 3234 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 300:
#line 3236 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL)
              MYSQL_YYABORT;
            lex->sphead->add_instr(i);
            lex->sphead->restore_lex(YYTHD);
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 301:
#line 3254 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 302:
#line 3256 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 303:
#line 3261 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 304:
#line 3263 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 305:
#line 3265 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 309:
#line 3299 "sql_yacc.yy"
    {}
    break;

  case 310:
#line 3301 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 311:
#line 3311 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 312:
#line 3317 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 317:
#line 3340 "sql_yacc.yy"
    {}
    break;

  case 364:
#line 3434 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 365:
#line 3442 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 366:
#line 3450 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 367:
#line 3458 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 368:
#line 3470 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 369:
#line 3482 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 370:
#line 3487 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 371:
#line 3492 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 372:
#line 3500 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 373:
#line 3508 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 374:
#line 3516 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 375:
#line 3524 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 376:
#line 3532 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 377:
#line 3540 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 378:
#line 3548 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 379:
#line 3561 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 380:
#line 3574 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 383:
#line 3593 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 384:
#line 3598 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 385:
#line 3610 "sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 386:
#line 3612 "sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 387:
#line 3662 "sql_yacc.yy"
    {}
    break;

  case 388:
#line 3665 "sql_yacc.yy"
    {}
    break;

  case 389:
#line 3667 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 390:
#line 3681 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 391:
#line 3699 "sql_yacc.yy"
    {}
    break;

  case 392:
#line 3702 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 393:
#line 3703 "sql_yacc.yy"
    {}
    break;

  case 394:
#line 3707 "sql_yacc.yy"
    {}
    break;

  case 395:
#line 3709 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 396:
#line 3710 "sql_yacc.yy"
    {}
    break;

  case 397:
#line 3712 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 398:
#line 3713 "sql_yacc.yy"
    {}
    break;

  case 399:
#line 3741 "sql_yacc.yy"
    {}
    break;

  case 401:
#line 3747 "sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX *lex= Lex;
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_FEATURE_DISABLED, MYF(0),
                      "partitioning", "--with-partition");
              MYSQL_YYABORT;
            }
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     "partitioning", "--with-partition");
            MYSQL_YYABORT;
#endif

          }
    break;

  case 403:
#line 3779 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 404:
#line 3791 "sql_yacc.yy"
    {}
    break;

  case 406:
#line 3800 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->list_of_part_fields= TRUE;
            lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 407:
#line 3806 "sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 408:
#line 3807 "sql_yacc.yy"
    {}
    break;

  case 409:
#line 3809 "sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 410:
#line 3810 "sql_yacc.yy"
    {}
    break;

  case 411:
#line 3812 "sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 412:
#line 3813 "sql_yacc.yy"
    {}
    break;

  case 413:
#line 3817 "sql_yacc.yy"
    {}
    break;

  case 414:
#line 3819 "sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 415:
#line 3823 "sql_yacc.yy"
    {}
    break;

  case 416:
#line 3824 "sql_yacc.yy"
    {}
    break;

  case 417:
#line 3828 "sql_yacc.yy"
    {}
    break;

  case 418:
#line 3829 "sql_yacc.yy"
    {}
    break;

  case 419:
#line 3834 "sql_yacc.yy"
    {
            if (Lex->part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 420:
#line 3845 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_part_fields= FALSE;
            lex->part_info->part_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->part_func_string= func_string;
            lex->part_info->part_func_len= expr_len;
          }
    break;

  case 421:
#line 3860 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_subpart_fields= FALSE;
            lex->part_info->subpart_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->subpart_func_string= func_string;        
            lex->part_info->subpart_func_len= expr_len;
          }
    break;

  case 422:
#line 3875 "sql_yacc.yy"
    {}
    break;

  case 423:
#line 3877 "sql_yacc.yy"
    { 
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            lex->part_info->no_parts= no_parts;
            lex->part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 424:
#line 3892 "sql_yacc.yy"
    {}
    break;

  case 425:
#line 3894 "sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 426:
#line 3895 "sql_yacc.yy"
    {}
    break;

  case 427:
#line 3898 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->subpart_type= HASH_PARTITION;
            lex->part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 428:
#line 3903 "sql_yacc.yy"
    {}
    break;

  case 429:
#line 3907 "sql_yacc.yy"
    {}
    break;

  case 430:
#line 3908 "sql_yacc.yy"
    {}
    break;

  case 431:
#line 3913 "sql_yacc.yy"
    {
            if (Lex->part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 432:
#line 3924 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_CONST_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 433:
#line 3939 "sql_yacc.yy"
    {}
    break;

  case 434:
#line 3941 "sql_yacc.yy"
    {
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->no_subparts= no_parts;
            lex->part_info->use_default_no_subpartitions= FALSE;
          }
    break;

  case 435:
#line 3956 "sql_yacc.yy"
    {}
    break;

  case 436:
#line 3958 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->no_parts != 0)
            {
              if (part_info->no_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->no_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 437:
#line 3980 "sql_yacc.yy"
    {}
    break;

  case 438:
#line 3981 "sql_yacc.yy"
    {}
    break;

  case 439:
#line 3986 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 440:
#line 4006 "sql_yacc.yy"
    {}
    break;

  case 441:
#line 4011 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 442:
#line 4021 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (lex->part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (lex->part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 443:
#line 4042 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 444:
#line 4057 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= LIST_PARTITION;
          }
    break;

  case 445:
#line 4075 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            lex->part_info->defined_max_value= TRUE;
            lex->part_info->curr_part_elem->max_value= TRUE;
            lex->part_info->curr_part_elem->range_value= LONGLONG_MAX;
          }
    break;

  case 446:
#line 4087 "sql_yacc.yy"
    {
            if (Lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            if (Lex->part_info->curr_part_elem->has_null_value)
            {
              my_parse_error(ER(ER_NULL_IN_VALUES_LESS_THAN));
              MYSQL_YYABORT;
            }
          }
    break;

  case 449:
#line 4108 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (!((yyvsp[(2) - (3)].p_elem_value)->unsigned_flag))
              part_info->curr_part_elem->signed_flag= TRUE;
            part_info->curr_part_elem->range_value= (yyvsp[(2) - (3)].p_elem_value)->value;
          }
    break;

  case 450:
#line 4117 "sql_yacc.yy"
    {}
    break;

  case 451:
#line 4118 "sql_yacc.yy"
    {}
    break;

  case 452:
#line 4123 "sql_yacc.yy"
    {
            part_elem_value *value_ptr= (yyvsp[(1) - (1)].p_elem_value);
            partition_info *part_info= Lex->part_info;
            if (!value_ptr->unsigned_flag)
              part_info->curr_part_elem->signed_flag= TRUE;
            if (!value_ptr->null_value &&
               part_info->curr_part_elem->
                list_val_list.push_back(value_ptr))
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
          }
    break;

  case 453:
#line 4140 "sql_yacc.yy"
    {
            Item *part_expr= (yyvsp[(1) - (1)].item);
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Name_resolution_context *context= &lex->current_select->context;
            TABLE_LIST *save_list= context->table_list;
            const char *save_where= thd->where;

            context->table_list= 0;
            thd->where= "partition function";

            part_elem_value *value_ptr= 
              (part_elem_value*)sql_alloc(sizeof(part_elem_value));
            if (!value_ptr)
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
            if (part_expr->walk(&Item::check_partition_func_processor, 0,
                                NULL))
            {
              my_error(ER_PARTITION_FUNCTION_IS_NOT_ALLOWED, MYF(0));
              MYSQL_YYABORT;
            }
            if (part_expr->fix_fields(YYTHD, (Item**)0) ||
                ((context->table_list= save_list), FALSE) ||
                (!part_expr->const_item()) ||
                (!lex->safe_to_cache_query))
            {
              my_error(ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR, MYF(0));
              MYSQL_YYABORT;
            }
            thd->where= save_where;
            value_ptr->value= part_expr->val_int();
            value_ptr->unsigned_flag= TRUE;
            if (!part_expr->unsigned_flag &&
                value_ptr->value < 0)
              value_ptr->unsigned_flag= FALSE;
            if ((value_ptr->null_value= part_expr->null_value))
            {
              if (Lex->part_info->curr_part_elem->has_null_value)
              {
                my_error(ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              Lex->part_info->curr_part_elem->has_null_value= TRUE;
            }
            else if (part_expr->result_type() != INT_RESULT)
            {
              my_parse_error(ER(ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.p_elem_value)= value_ptr; 
          }
    break;

  case 454:
#line 4198 "sql_yacc.yy"
    {
            if (Lex->part_info->no_subparts != 0 &&
                !Lex->part_info->use_default_subpartitions)
            {
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 455:
#line 4207 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (part_info->no_subparts != 0)
            {
              if (part_info->no_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->no_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 456:
#line 4233 "sql_yacc.yy"
    {}
    break;

  case 457:
#line 4234 "sql_yacc.yy"
    {}
    break;

  case 458:
#line 4239 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_no_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 459:
#line 4255 "sql_yacc.yy"
    {}
    break;

  case 460:
#line 4260 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 461:
#line 4264 "sql_yacc.yy"
    {}
    break;

  case 462:
#line 4265 "sql_yacc.yy"
    {}
    break;

  case 463:
#line 4269 "sql_yacc.yy"
    {}
    break;

  case 464:
#line 4270 "sql_yacc.yy"
    {}
    break;

  case 465:
#line 4275 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 466:
#line 4277 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            lex->part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 467:
#line 4283 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 468:
#line 4285 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 469:
#line 4287 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 470:
#line 4289 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 471:
#line 4291 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 472:
#line 4293 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 473:
#line 4302 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->lock_option= TL_READ_DEFAULT;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 474:
#line 4318 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 475:
#line 4322 "sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 476:
#line 4332 "sql_yacc.yy"
    {}
    break;

  case 477:
#line 4333 "sql_yacc.yy"
    {}
    break;

  case 478:
#line 4337 "sql_yacc.yy"
    {}
    break;

  case 479:
#line 4338 "sql_yacc.yy"
    {}
    break;

  case 480:
#line 4342 "sql_yacc.yy"
    {}
    break;

  case 481:
#line 4343 "sql_yacc.yy"
    {}
    break;

  case 482:
#line 4347 "sql_yacc.yy"
    {}
    break;

  case 483:
#line 4348 "sql_yacc.yy"
    {}
    break;

  case 484:
#line 4352 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 485:
#line 4353 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 486:
#line 4357 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 487:
#line 4358 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 488:
#line 4362 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 489:
#line 4366 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 490:
#line 4367 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 498:
#line 4388 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 499:
#line 4393 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            WARN_DEPRECATED(yythd, "6.0", "TYPE=storage_engine",
                            "'ENGINE=storage_engine'");
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 500:
#line 4400 "sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 501:
#line 4405 "sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 502:
#line 4410 "sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 503:
#line 4415 "sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 504:
#line 4420 "sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 505:
#line 4425 "sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 506:
#line 4430 "sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 507:
#line 4445 "sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 508:
#line 4451 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 509:
#line 4456 "sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 510:
#line 4461 "sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 511:
#line 4466 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 512:
#line 4471 "sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 513:
#line 4476 "sql_yacc.yy"
    {
            /* Move the union list to the merge_list */
            LEX *lex=Lex;
            TABLE_LIST *table_list= lex->select_lex.get_table_list();
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->create_info.merge_list.elements--;
            lex->create_info.merge_list.first=
              (uchar*) (table_list->next_local);
            lex->select_lex.table_list.elements=1;
            lex->select_lex.table_list.next=
              (uchar**) &(table_list->next_local);
            table_list->next_local= 0;
            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 516:
#line 4493 "sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 517:
#line 4498 "sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 518:
#line 4503 "sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 519:
#line 4508 "sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 520:
#line 4510 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 521:
#line 4512 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 522:
#line 4514 "sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 523:
#line 4520 "sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 524:
#line 4525 "sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 525:
#line 4533 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 526:
#line 4551 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
              {
                my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                         (yyvsp[(4) - (4)].charset)->name, cinfo->default_table_charset->csname);
                MYSQL_YYABORT;
              }
              Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
              Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 527:
#line 4568 "sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 528:
#line 4591 "sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 529:
#line 4604 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 530:
#line 4605 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 531:
#line 4606 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 532:
#line 4607 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 533:
#line 4608 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 534:
#line 4609 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 535:
#line 4610 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 536:
#line 4614 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 537:
#line 4615 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 538:
#line 4616 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 539:
#line 4620 "sql_yacc.yy"
    {}
    break;

  case 541:
#line 4625 "sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 542:
#line 4626 "sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 543:
#line 4627 "sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 544:
#line 4628 "sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 550:
#line 4644 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 551:
#line 4651 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((yyvsp[(1) - (7)].key_type) != Key::FULLTEXT && lex->key_create_info.parser_name.str)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Key *key= new Key((yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].simple_string), &lex->key_create_info, 0,
                              lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 552:
#line 4667 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            const char *key_name= (yyvsp[(3) - (8)].simple_string) ? (yyvsp[(3) - (8)].simple_string) : (yyvsp[(1) - (8)].simple_string);
            Key *key= new Key((yyvsp[(2) - (8)].key_type), key_name, &lex->key_create_info, 0,
                              lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 553:
#line 4678 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            const char *key_name= (yyvsp[(1) - (8)].simple_string) ? (yyvsp[(1) - (8)].simple_string) : (yyvsp[(4) - (8)].simple_string);
            const char *fkey_name = (yyvsp[(4) - (8)].simple_string) ? (yyvsp[(4) - (8)].simple_string) : key_name;
            Key *key= new Foreign_key(fkey_name, lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            key= new Key(Key::MULTIPLE, key_name,
                         &default_key_create_info, 1,
                         lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty(); /* Alloced by sql_alloc */
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 554:
#line 4702 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 555:
#line 4706 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 559:
#line 4721 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; }
    break;

  case 560:
#line 4722 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].simple_string); }
    break;

  case 561:
#line 4726 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(2) - (2)].simple_string); }
    break;

  case 562:
#line 4731 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 563:
#line 4740 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 564:
#line 4753 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 565:
#line 4754 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 566:
#line 4755 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 567:
#line 4757 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 568:
#line 4762 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 569:
#line 4766 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 570:
#line 4771 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 571:
#line 4776 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 572:
#line 4780 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 573:
#line 4785 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 574:
#line 4790 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 575:
#line 4796 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 576:
#line 4801 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 577:
#line 4807 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 578:
#line 4811 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 579:
#line 4816 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 580:
#line 4821 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_YEAR; }
    break;

  case 581:
#line 4823 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 582:
#line 4825 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 583:
#line 4827 "sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 584:
#line 4840 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 585:
#line 4842 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 586:
#line 4847 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 587:
#line 4852 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 588:
#line 4864 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 589:
#line 4869 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 590:
#line 4874 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 591:
#line 4879 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 592:
#line 4881 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 593:
#line 4883 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 594:
#line 4885 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 595:
#line 4887 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 596:
#line 4889 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 597:
#line 4891 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 598:
#line 4893 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 599:
#line 4895 "sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 600:
#line 4897 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 601:
#line 4899 "sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 602:
#line 4901 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 603:
#line 4903 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 604:
#line 4905 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 605:
#line 4913 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 606:
#line 4914 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 607:
#line 4916 "sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 608:
#line 4920 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 609:
#line 4921 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 610:
#line 4922 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 611:
#line 4923 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 612:
#line 4924 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 613:
#line 4928 "sql_yacc.yy"
    {}
    break;

  case 614:
#line 4932 "sql_yacc.yy"
    {}
    break;

  case 615:
#line 4933 "sql_yacc.yy"
    {}
    break;

  case 616:
#line 4937 "sql_yacc.yy"
    {}
    break;

  case 617:
#line 4938 "sql_yacc.yy"
    {}
    break;

  case 618:
#line 4942 "sql_yacc.yy"
    {}
    break;

  case 619:
#line 4943 "sql_yacc.yy"
    {}
    break;

  case 620:
#line 4944 "sql_yacc.yy"
    {}
    break;

  case 621:
#line 4945 "sql_yacc.yy"
    {}
    break;

  case 622:
#line 4946 "sql_yacc.yy"
    {}
    break;

  case 623:
#line 4950 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 624:
#line 4951 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 625:
#line 4952 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 626:
#line 4953 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 627:
#line 4954 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 628:
#line 4959 "sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 629:
#line 4964 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 630:
#line 4966 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 631:
#line 4971 "sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 632:
#line 4973 "sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 633:
#line 4975 "sql_yacc.yy"
    {}
    break;

  case 634:
#line 4980 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 635:
#line 4988 "sql_yacc.yy"
    {}
    break;

  case 636:
#line 4989 "sql_yacc.yy"
    {}
    break;

  case 637:
#line 4993 "sql_yacc.yy"
    {}
    break;

  case 638:
#line 4994 "sql_yacc.yy"
    {}
    break;

  case 639:
#line 4998 "sql_yacc.yy"
    {}
    break;

  case 640:
#line 4999 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 641:
#line 5000 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 642:
#line 5004 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 643:
#line 5005 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 644:
#line 5006 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 645:
#line 5007 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 646:
#line 5010 "sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 647:
#line 5011 "sql_yacc.yy"
    { }
    break;

  case 648:
#line 5014 "sql_yacc.yy"
    {}
    break;

  case 649:
#line 5015 "sql_yacc.yy"
    {}
    break;

  case 650:
#line 5019 "sql_yacc.yy"
    {}
    break;

  case 651:
#line 5020 "sql_yacc.yy"
    {}
    break;

  case 652:
#line 5024 "sql_yacc.yy"
    {}
    break;

  case 654:
#line 5029 "sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 655:
#line 5030 "sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 656:
#line 5031 "sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 657:
#line 5033 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 658:
#line 5039 "sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 659:
#line 5041 "sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 660:
#line 5047 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 661:
#line 5053 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 662:
#line 5059 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 663:
#line 5064 "sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 664:
#line 5066 "sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 665:
#line 5082 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 666:
#line 5088 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 667:
#line 5092 "sql_yacc.yy"
    {}
    break;

  case 668:
#line 5093 "sql_yacc.yy"
    {}
    break;

  case 669:
#line 5098 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 670:
#line 5105 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 671:
#line 5109 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 672:
#line 5110 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 673:
#line 5114 "sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 674:
#line 5115 "sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 675:
#line 5120 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 676:
#line 5128 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 677:
#line 5132 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 678:
#line 5133 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 679:
#line 5138 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 680:
#line 5148 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 681:
#line 5149 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 682:
#line 5153 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 683:
#line 5154 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 684:
#line 5158 "sql_yacc.yy"
    {}
    break;

  case 685:
#line 5159 "sql_yacc.yy"
    {}
    break;

  case 686:
#line 5163 "sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 687:
#line 5164 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 688:
#line 5165 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 689:
#line 5167 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 690:
#line 5175 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 691:
#line 5176 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 692:
#line 5180 "sql_yacc.yy"
    { }
    break;

  case 693:
#line 5181 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 694:
#line 5185 "sql_yacc.yy"
    { Lex->charset= NULL; }
    break;

  case 695:
#line 5186 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 696:
#line 5188 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 697:
#line 5196 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (2)].charset); }
    break;

  case 700:
#line 5206 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->fk_delete_opt= lex->fk_update_opt= lex->fk_match_option= 0;
            lex->ref_list.empty();
          }
    break;

  case 701:
#line 5212 "sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (4)].table);
          }
    break;

  case 702:
#line 5218 "sql_yacc.yy"
    {}
    break;

  case 703:
#line 5219 "sql_yacc.yy"
    {}
    break;

  case 704:
#line 5224 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 705:
#line 5231 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 706:
#line 5240 "sql_yacc.yy"
    {}
    break;

  case 707:
#line 5241 "sql_yacc.yy"
    {}
    break;

  case 708:
#line 5245 "sql_yacc.yy"
    {}
    break;

  case 709:
#line 5246 "sql_yacc.yy"
    {}
    break;

  case 710:
#line 5250 "sql_yacc.yy"
    { Lex->fk_delete_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 711:
#line 5251 "sql_yacc.yy"
    { Lex->fk_update_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 712:
#line 5252 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 713:
#line 5253 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 714:
#line 5254 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 715:
#line 5258 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 716:
#line 5259 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 717:
#line 5260 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 718:
#line 5261 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 719:
#line 5262 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 720:
#line 5266 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 721:
#line 5267 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT; }
    break;

  case 722:
#line 5269 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 723:
#line 5281 "sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 724:
#line 5282 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 725:
#line 5286 "sql_yacc.yy"
    {}
    break;

  case 726:
#line 5287 "sql_yacc.yy"
    {}
    break;

  case 727:
#line 5291 "sql_yacc.yy"
    {}
    break;

  case 729:
#line 5296 "sql_yacc.yy"
    {}
    break;

  case 730:
#line 5297 "sql_yacc.yy"
    {}
    break;

  case 731:
#line 5298 "sql_yacc.yy"
    {}
    break;

  case 732:
#line 5302 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 733:
#line 5303 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 734:
#line 5304 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 735:
#line 5306 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 736:
#line 5318 "sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 739:
#line 5335 "sql_yacc.yy"
    {}
    break;

  case 743:
#line 5345 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 744:
#line 5346 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 746:
#line 5352 "sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 747:
#line 5354 "sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 748:
#line 5366 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 749:
#line 5367 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 750:
#line 5368 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 751:
#line 5372 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 752:
#line 5373 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 753:
#line 5378 "sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 754:
#line 5384 "sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str).str,(uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 755:
#line 5397 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; /* Default length */ }
    break;

  case 756:
#line 5398 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 757:
#line 5402 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 758:
#line 5403 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 759:
#line 5407 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 760:
#line 5408 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 761:
#line 5416 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db=
              ((TABLE_LIST*) lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 762:
#line 5440 "sql_yacc.yy"
    {}
    break;

  case 763:
#line 5442 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 764:
#line 5447 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 765:
#line 5456 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 766:
#line 5467 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 767:
#line 5478 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 768:
#line 5485 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 769:
#line 5496 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 770:
#line 5503 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 771:
#line 5514 "sql_yacc.yy"
    {}
    break;

  case 772:
#line 5521 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 773:
#line 5533 "sql_yacc.yy"
    {}
    break;

  case 774:
#line 5535 "sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 775:
#line 5555 "sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 776:
#line 5568 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 777:
#line 5573 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 778:
#line 5578 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 779:
#line 5583 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 780:
#line 5588 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 781:
#line 5597 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 782:
#line 5598 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 783:
#line 5599 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 784:
#line 5600 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 785:
#line 5604 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 786:
#line 5606 "sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 787:
#line 5617 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 788:
#line 5618 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 789:
#line 5622 "sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 790:
#line 5623 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 792:
#line 5628 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 793:
#line 5629 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 799:
#line 5646 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 800:
#line 5651 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 801:
#line 5658 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 803:
#line 5668 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 804:
#line 5676 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_CHECK;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->check_opt.init();
          }
    break;

  case 806:
#line 5685 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 808:
#line 5694 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.no_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 810:
#line 5705 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 811:
#line 5712 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 813:
#line 5720 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 814:
#line 5732 "sql_yacc.yy"
    {}
    break;

  case 816:
#line 5738 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 817:
#line 5743 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 818:
#line 5751 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 820:
#line 5766 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 821:
#line 5770 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 822:
#line 5774 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 823:
#line 5781 "sql_yacc.yy"
    {}
    break;

  case 824:
#line 5782 "sql_yacc.yy"
    {}
    break;

  case 825:
#line 5787 "sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 828:
#line 5807 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 829:
#line 5815 "sql_yacc.yy"
    { }
    break;

  case 830:
#line 5817 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 831:
#line 5821 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 832:
#line 5825 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 834:
#line 5832 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 835:
#line 5841 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 837:
#line 5854 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 838:
#line 5863 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 839:
#line 5867 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 840:
#line 5876 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 841:
#line 5885 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 842:
#line 5891 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 843:
#line 5897 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 844:
#line 5906 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 845:
#line 5915 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length) ||
                (yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 846:
#line 5934 "sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 847:
#line 5955 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
          }
    break;

  case 848:
#line 5960 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_FORCE;
          }
    break;

  case 849:
#line 5964 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 850:
#line 5971 "sql_yacc.yy"
    {}
    break;

  case 851:
#line 5972 "sql_yacc.yy"
    {}
    break;

  case 852:
#line 5976 "sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 853:
#line 5977 "sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 854:
#line 5981 "sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 855:
#line 5982 "sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 856:
#line 5983 "sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 857:
#line 5987 "sql_yacc.yy"
    {}
    break;

  case 858:
#line 5988 "sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 859:
#line 5989 "sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 860:
#line 5993 "sql_yacc.yy"
    {}
    break;

  case 861:
#line 5994 "sql_yacc.yy"
    {}
    break;

  case 862:
#line 5995 "sql_yacc.yy"
    {}
    break;

  case 863:
#line 5996 "sql_yacc.yy"
    {}
    break;

  case 864:
#line 6005 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 865:
#line 6014 "sql_yacc.yy"
    {}
    break;

  case 866:
#line 6016 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 867:
#line 6023 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 868:
#line 6031 "sql_yacc.yy"
    {}
    break;

  case 869:
#line 6033 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 870:
#line 6042 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 871:
#line 6050 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 872:
#line 6052 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 873:
#line 6058 "sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 874:
#line 6060 "sql_yacc.yy"
    {}
    break;

  case 877:
#line 6069 "sql_yacc.yy"
    {}
    break;

  case 878:
#line 6070 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 879:
#line 6071 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 880:
#line 6075 "sql_yacc.yy"
    {}
    break;

  case 881:
#line 6077 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((lex->mi.log_file_name || lex->mi.pos) &&
                (lex->mi.relay_log_name || lex->mi.relay_log_pos) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 884:
#line 6098 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RESTORE_TABLE;
          }
    break;

  case 885:
#line 6102 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 886:
#line 6109 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BACKUP_TABLE;
          }
    break;

  case 887:
#line 6113 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 888:
#line 6120 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
          }
    break;

  case 889:
#line 6125 "sql_yacc.yy"
    {}
    break;

  case 890:
#line 6129 "sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 891:
#line 6130 "sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 892:
#line 6131 "sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 893:
#line 6136 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 894:
#line 6144 "sql_yacc.yy"
    {}
    break;

  case 895:
#line 6148 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 896:
#line 6149 "sql_yacc.yy"
    {}
    break;

  case 897:
#line 6153 "sql_yacc.yy"
    {}
    break;

  case 898:
#line 6154 "sql_yacc.yy"
    {}
    break;

  case 899:
#line 6158 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 900:
#line 6159 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 901:
#line 6160 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 902:
#line 6165 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 903:
#line 6173 "sql_yacc.yy"
    {}
    break;

  case 904:
#line 6178 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 905:
#line 6186 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 906:
#line 6199 "sql_yacc.yy"
    {}
    break;

  case 907:
#line 6203 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 908:
#line 6204 "sql_yacc.yy"
    {}
    break;

  case 909:
#line 6208 "sql_yacc.yy"
    {}
    break;

  case 910:
#line 6209 "sql_yacc.yy"
    {}
    break;

  case 911:
#line 6213 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 912:
#line 6214 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 913:
#line 6215 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 914:
#line 6216 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 915:
#line 6217 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 916:
#line 6218 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 917:
#line 6223 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 918:
#line 6231 "sql_yacc.yy"
    {}
    break;

  case 919:
#line 6235 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 920:
#line 6236 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 921:
#line 6237 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 922:
#line 6242 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 923:
#line 6246 "sql_yacc.yy"
    {}
    break;

  case 924:
#line 6248 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 925:
#line 6255 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 926:
#line 6260 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 929:
#line 6273 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 930:
#line 6286 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 933:
#line 6300 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ, 
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 934:
#line 6308 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 935:
#line 6309 "sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 936:
#line 6314 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
          }
    break;

  case 937:
#line 6319 "sql_yacc.yy"
    {}
    break;

  case 940:
#line 6329 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 941:
#line 6337 "sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        global_system_variables.old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 943:
#line 6348 "sql_yacc.yy"
    { }
    break;

  case 945:
#line 6354 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 946:
#line 6355 "sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 947:
#line 6365 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 950:
#line 6379 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (sel->set_braces(1))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                !sel->master_unit()->first_select()->braces &&
                sel->master_unit()->first_select()->linkage ==
                UNION_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                sel->master_unit()->fake_select_lex)
            {
 	       my_error(ER_WRONG_USAGE, MYF(0),
                        "CUBE/ROLLUP", "ORDER BY");
               MYSQL_YYABORT;
            }
            /* select in braces, can't contain global parameters */
            if (sel->master_unit()->fake_select_lex)
              sel->master_unit()->global_parameters=
                 sel->master_unit()->fake_select_lex;
          }
    break;

  case 952:
#line 6413 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 954:
#line 6432 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 955:
#line 6440 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 957:
#line 6447 "sql_yacc.yy"
    {}
    break;

  case 962:
#line 6457 "sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table= 
                (TABLE_LIST *) Select->table_list.first;
          }
    break;

  case 965:
#line 6472 "sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 968:
#line 6487 "sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 969:
#line 6489 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Lex->lock_option=  TL_READ_HIGH_PRIORITY;
            Lex->current_select->lock_option= TL_READ_HIGH_PRIORITY;
          }
    break;

  case 970:
#line 6495 "sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 971:
#line 6496 "sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 972:
#line 6497 "sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 973:
#line 6499 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 974:
#line 6505 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 975:
#line 6511 "sql_yacc.yy"
    {
            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
    break;

  case 976:
#line 6517 "sql_yacc.yy"
    {
            /*
             Honor this flag only if SQL_NO_CACHE wasn't specified AND
             we are parsing the outermost SELECT in the query.
            */
            if (Lex->select_lex.sql_cache != SELECT_LEX::SQL_NO_CACHE &&
                Lex->current_select == &Lex->select_lex)
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 977:
#line 6530 "sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 979:
#line 6536 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->current_select->lock_option= TL_WRITE;
            lex->safe_to_cache_query=0;
          }
    break;

  case 980:
#line 6543 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->current_select->lock_option= TL_READ_WITH_SHARED_LOCKS;
            lex->safe_to_cache_query=0;
          }
    break;

  case 983:
#line 6556 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 984:
#line 6571 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 985:
#line 6596 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 986:
#line 6602 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 987:
#line 6608 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); /* table.* */ }
    break;

  case 988:
#line 6609 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 989:
#line 6613 "sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 990:
#line 6614 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 991:
#line 6615 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 992:
#line 6616 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 993:
#line 6617 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 994:
#line 6621 "sql_yacc.yy"
    {}
    break;

  case 995:
#line 6622 "sql_yacc.yy"
    {}
    break;

  case 996:
#line 6628 "sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 997:
#line 6679 "sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_cond_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 998:
#line 6686 "sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 999:
#line 6729 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1000:
#line 6735 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1001:
#line 6741 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1002:
#line 6747 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1003:
#line 6753 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1004:
#line 6759 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1005:
#line 6765 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1007:
#line 6775 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1008:
#line 6781 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1009:
#line 6787 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1010:
#line 6793 "sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1011:
#line 6799 "sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1013:
#line 6809 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1014:
#line 6815 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1015:
#line 6825 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1016:
#line 6831 "sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1017:
#line 6839 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1018:
#line 6845 "sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1019:
#line 6855 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1020:
#line 6861 "sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1021:
#line 6870 "sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1022:
#line 6880 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1023:
#line 6886 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1024:
#line 6896 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1025:
#line 6902 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1027:
#line 6915 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1028:
#line 6921 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1029:
#line 6927 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1030:
#line 6933 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1031:
#line 6939 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1032:
#line 6945 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1033:
#line 6951 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1034:
#line 6957 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1035:
#line 6963 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1036:
#line 6969 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1037:
#line 6975 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1038:
#line 6981 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1039:
#line 6987 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1040:
#line 6993 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1050:
#line 7022 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1051:
#line 7023 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1052:
#line 7024 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1053:
#line 7025 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1054:
#line 7026 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1055:
#line 7027 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1056:
#line 7031 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1057:
#line 7032 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1063:
#line 7042 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1068:
#line 7058 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1069:
#line 7064 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1070:
#line 7068 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1071:
#line 7074 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1072:
#line 7080 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1073:
#line 7086 "sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1074:
#line 7092 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1075:
#line 7094 "sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1076:
#line 7101 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1077:
#line 7108 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1078:
#line 7114 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1079:
#line 7116 "sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1080:
#line 7125 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1081:
#line 7132 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:
#line 7140 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1083:
#line 7146 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1084:
#line 7153 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:
#line 7159 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1086:
#line 7173 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:
#line 7181 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1088:
#line 7196 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:
#line 7202 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1090:
#line 7208 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1091:
#line 7216 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:
#line 7222 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1093:
#line 7228 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1094:
#line 7234 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:
#line 7240 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:
#line 7255 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:
#line 7267 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:
#line 7273 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:
#line 7279 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1100:
#line 7285 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1101:
#line 7291 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1102:
#line 7297 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1103:
#line 7303 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1104:
#line 7309 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1105:
#line 7315 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1106:
#line 7321 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1107:
#line 7327 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:
#line 7333 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1109:
#line 7339 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1110:
#line 7345 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1111:
#line 7351 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1112:
#line 7357 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1113:
#line 7363 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1114:
#line 7371 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1115:
#line 7392 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1116:
#line 7399 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1117:
#line 7405 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1118:
#line 7412 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1119:
#line 7419 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1120:
#line 7427 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1121:
#line 7434 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1122:
#line 7440 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1123:
#line 7446 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1124:
#line 7452 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1125:
#line 7459 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1126:
#line 7466 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:
#line 7472 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1128:
#line 7479 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:
#line 7485 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:
#line 7491 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:
#line 7497 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1132:
#line 7503 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1133:
#line 7509 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local();
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1134:
#line 7519 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(3) - (4)].item));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1135:
#line 7529 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:
#line 7535 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1137:
#line 7541 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1138:
#line 7548 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1139:
#line 7555 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1140:
#line 7570 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:
#line 7576 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:
#line 7582 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:
#line 7588 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:
#line 7594 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1145:
#line 7601 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:
#line 7607 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:
#line 7613 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:
#line 7619 "sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:
#line 7625 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1150:
#line 7637 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:
#line 7643 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:
#line 7649 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:
#line 7655 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:
#line 7661 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:
#line 7673 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:
#line 7679 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1157:
#line 7695 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1158:
#line 7701 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1159:
#line 7708 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1160:
#line 7715 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1161:
#line 7722 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1162:
#line 7729 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1163:
#line 7736 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1164:
#line 7740 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1165:
#line 7759 "sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1166:
#line 7778 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1167:
#line 7827 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1168:
#line 7859 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1169:
#line 7861 "sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1170:
#line 7865 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1171:
#line 7866 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1172:
#line 7870 "sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1173:
#line 7871 "sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1174:
#line 7875 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1175:
#line 7876 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1176:
#line 7881 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1177:
#line 7888 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1178:
#line 7896 "sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1179:
#line 7916 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:
#line 7922 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:
#line 7928 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:
#line 7934 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:
#line 7940 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:
#line 7946 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1185:
#line 7955 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1186:
#line 7961 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1187:
#line 7963 "sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1188:
#line 7965 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count_distinct(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:
#line 7971 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:
#line 7982 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:
#line 7988 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:
#line 7994 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:
#line 8000 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:
#line 8006 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:
#line 8012 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:
#line 8018 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1197:
#line 8024 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1198:
#line 8030 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:
#line 8036 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1200:
#line 8040 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1201:
#line 8054 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1202:
#line 8062 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1203:
#line 8069 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1204:
#line 8079 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1205:
#line 8087 "sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe();
          }
    break;

  case 1206:
#line 8102 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1207:
#line 8103 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1208:
#line 8108 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:
#line 8113 "sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1210:
#line 8118 "sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1211:
#line 8122 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list=
              (SQL_LIST*) sql_memdup((char*) &select->order_list,
                                     sizeof(st_sql_list));
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1212:
#line 8135 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1213:
#line 8144 "sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1214:
#line 8152 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1215:
#line 8154 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1216:
#line 8156 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1217:
#line 8158 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1218:
#line 8160 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1219:
#line 8162 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1220:
#line 8164 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1221:
#line 8166 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1222:
#line 8168 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_TIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1223:
#line 8170 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1224:
#line 8172 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1225:
#line 8176 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1226:
#line 8177 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1227:
#line 8182 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1228:
#line 8189 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1229:
#line 8196 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1230:
#line 8197 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1231:
#line 8202 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1232:
#line 8209 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1233:
#line 8216 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1234:
#line 8217 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1235:
#line 8221 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1236:
#line 8222 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1237:
#line 8227 "sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1238:
#line 8235 "sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1239:
#line 8244 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1240:
#line 8246 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1241:
#line 8254 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1242:
#line 8265 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1243:
#line 8266 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1244:
#line 8271 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1245:
#line 8273 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1246:
#line 8293 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1247:
#line 8295 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1248:
#line 8298 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1249:
#line 8306 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1250:
#line 8313 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1251:
#line 8321 "sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1252:
#line 8329 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1253:
#line 8333 "sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1254:
#line 8335 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1255:
#line 8343 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1256:
#line 8351 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1257:
#line 8359 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1258:
#line 8363 "sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1259:
#line 8369 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1260:
#line 8379 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1261:
#line 8387 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1262:
#line 8396 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1263:
#line 8400 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1264:
#line 8407 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1265:
#line 8417 "sql_yacc.yy"
    {}
    break;

  case 1266:
#line 8418 "sql_yacc.yy"
    {}
    break;

  case 1267:
#line 8419 "sql_yacc.yy"
    {}
    break;

  case 1268:
#line 8424 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1269:
#line 8429 "sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                Lex->lock_option,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1270:
#line 8438 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1271:
#line 8460 "sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */

            if (!((yyvsp[(3) - (6)].table_list) || (yyvsp[(6) - (6)].lex_str_ptr)) && (yyvsp[(2) - (6)].select_lex)->embedding &&
                !(yyvsp[(2) - (6)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (6)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(6) - (6)].lex_str_ptr), 0,
                                               TL_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
            }
            else if ((yyvsp[(4) - (6)].num) || (yyvsp[(6) - (6)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
              (yyval.table_list)= (yyvsp[(3) - (6)].table_list);
          }
    break;

  case 1272:
#line 8507 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1273:
#line 8513 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1274:
#line 8529 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1275:
#line 8546 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1277:
#line 8553 "sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1278:
#line 8558 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1279:
#line 8583 "sql_yacc.yy"
    {}
    break;

  case 1280:
#line 8584 "sql_yacc.yy"
    {}
    break;

  case 1281:
#line 8589 "sql_yacc.yy"
    {
            (yyval.num)= global_system_variables.old_mode ? 
                  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1282:
#line 8593 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1283:
#line 8594 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1284:
#line 8595 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1285:
#line 8599 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1286:
#line 8600 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1287:
#line 8605 "sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1289:
#line 8610 "sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1294:
#line 8623 "sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1296:
#line 8627 "sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1298:
#line 8632 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1299:
#line 8633 "sql_yacc.yy"
    {}
    break;

  case 1300:
#line 8638 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1301:
#line 8640 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1304:
#line 8650 "sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1305:
#line 8661 "sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1306:
#line 8673 "sql_yacc.yy"
    {}
    break;

  case 1307:
#line 8674 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1308:
#line 8675 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1309:
#line 8676 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1310:
#line 8677 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1311:
#line 8678 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1312:
#line 8679 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1313:
#line 8680 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1314:
#line 8681 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1315:
#line 8682 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1316:
#line 8683 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1317:
#line 8684 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1318:
#line 8688 "sql_yacc.yy"
    {}
    break;

  case 1319:
#line 8689 "sql_yacc.yy"
    { 
                                  (yyval.interval_time_st)=INTERVAL_MICROSECOND; 
                                  /*
                                    FRAC_SECOND was mistakenly implemented with
                                    a wrong resolution. According to the ODBC
                                    standard it should be nanoseconds, not
                                    microseconds. Changing it to nanoseconds
                                    in MySQL would mean making TIMESTAMPDIFF
                                    and TIMESTAMPADD to return DECIMAL, since
                                    the return value would be too big for BIGINT
                                    Hence we just deprecate the incorrect
                                    implementation without changing its
                                    resolution.
                                  */
                                  WARN_DEPRECATED(yythd, "6.2", "FRAC_SECOND", "MICROSECOND");
                                }
    break;

  case 1320:
#line 8708 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1321:
#line 8709 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1322:
#line 8710 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1323:
#line 8711 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1324:
#line 8712 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1325:
#line 8713 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1326:
#line 8714 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1327:
#line 8715 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1328:
#line 8716 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1329:
#line 8720 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1330:
#line 8721 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1331:
#line 8722 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1332:
#line 8723 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1336:
#line 8733 "sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1337:
#line 8735 "sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:
#line 8748 "sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1341:
#line 8750 "sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1342:
#line 8754 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1344:
#line 8766 "sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1345:
#line 8770 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1346:
#line 8781 "sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1347:
#line 8786 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1350:
#line 8808 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1351:
#line 8810 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1352:
#line 8814 "sql_yacc.yy"
    {}
    break;

  case 1353:
#line 8816 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT; /* To be deleted in 5.1 */
          }
    break;

  case 1354:
#line 8829 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1358:
#line 8856 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1361:
#line 8875 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1363:
#line 8910 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1364:
#line 8912 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1365:
#line 8916 "sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1366:
#line 8917 "sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1367:
#line 8918 "sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1368:
#line 8923 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1369:
#line 8929 "sql_yacc.yy"
    {}
    break;

  case 1370:
#line 8933 "sql_yacc.yy"
    {}
    break;

  case 1371:
#line 8934 "sql_yacc.yy"
    {}
    break;

  case 1372:
#line 8938 "sql_yacc.yy"
    {}
    break;

  case 1373:
#line 8943 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1374:
#line 8950 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1375:
#line 8957 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1376:
#line 8967 "sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1377:
#line 8971 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1378:
#line 8977 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1379:
#line 8983 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1380:
#line 8992 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1381:
#line 8997 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1382:
#line 9005 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1383:
#line 9006 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1384:
#line 9007 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1385:
#line 9008 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1386:
#line 9009 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1387:
#line 9010 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1388:
#line 9014 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1389:
#line 9015 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1390:
#line 9016 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1391:
#line 9017 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1392:
#line 9018 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1393:
#line 9022 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1394:
#line 9023 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1395:
#line 9024 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1396:
#line 9025 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1397:
#line 9026 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1398:
#line 9030 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1399:
#line 9031 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1400:
#line 9032 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1401:
#line 9033 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1402:
#line 9038 "sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1405:
#line 9047 "sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1406:
#line 9048 "sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1408:
#line 9054 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= (uchar**) &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1410:
#line 9084 "sql_yacc.yy"
    {}
    break;

  case 1411:
#line 9085 "sql_yacc.yy"
    {}
    break;

  case 1414:
#line 9095 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1415:
#line 9106 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && 
                  (!(lex->result= new select_dumpvar(lex->nest_level))))
              MYSQL_YYABORT;
          }
    break;

  case 1416:
#line 9113 "sql_yacc.yy"
    {}
    break;

  case 1418:
#line 9118 "sql_yacc.yy"
    {}
    break;

  case 1419:
#line 9123 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1420:
#line 9142 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1421:
#line 9174 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1423:
#line 9186 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange, lex->nest_level)))
              MYSQL_YYABORT;
          }
    break;

  case 1425:
#line 9195 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange, lex->nest_level)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1426:
#line 9207 "sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1427:
#line 9218 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1428:
#line 9224 "sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1429:
#line 9235 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (6)].num);
            lex->drop_if_exists= (yyvsp[(4) - (6)].num);
          }
    break;

  case 1430:
#line 9241 "sql_yacc.yy"
    {}
    break;

  case 1431:
#line 9242 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1432:
#line 9256 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1433:
#line 9263 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1434:
#line 9286 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1435:
#line 9307 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1436:
#line 9319 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1437:
#line 9323 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (5)].num);
          }
    break;

  case 1438:
#line 9329 "sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1439:
#line 9335 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1440:
#line 9342 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1441:
#line 9347 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1442:
#line 9352 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1445:
#line 9367 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1448:
#line 9380 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option ))
              MYSQL_YYABORT;
          }
    break;

  case 1449:
#line 9389 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1450:
#line 9390 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1451:
#line 9394 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1452:
#line 9395 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1453:
#line 9403 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
            /* for subselects */
            lex->lock_option= TL_READ_DEFAULT;
          }
    break;

  case 1454:
#line 9413 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1455:
#line 9418 "sql_yacc.yy"
    {}
    break;

  case 1456:
#line 9423 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1457:
#line 9430 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1458:
#line 9435 "sql_yacc.yy"
    {}
    break;

  case 1459:
#line 9440 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1460:
#line 9452 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1461:
#line 9453 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1462:
#line 9454 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1463:
#line 9458 "sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1464:
#line 9459 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1465:
#line 9463 "sql_yacc.yy"
    {}
    break;

  case 1466:
#line 9464 "sql_yacc.yy"
    {}
    break;

  case 1467:
#line 9469 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1468:
#line 9477 "sql_yacc.yy"
    {}
    break;

  case 1469:
#line 9478 "sql_yacc.yy"
    {}
    break;

  case 1470:
#line 9479 "sql_yacc.yy"
    {}
    break;

  case 1471:
#line 9481 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1473:
#line 9491 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1474:
#line 9492 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1475:
#line 9496 "sql_yacc.yy"
    {}
    break;

  case 1476:
#line 9497 "sql_yacc.yy"
    {}
    break;

  case 1477:
#line 9499 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1478:
#line 9500 "sql_yacc.yy"
    {}
    break;

  case 1479:
#line 9502 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1480:
#line 9503 "sql_yacc.yy"
    {}
    break;

  case 1485:
#line 9518 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1486:
#line 9527 "sql_yacc.yy"
    {}
    break;

  case 1487:
#line 9528 "sql_yacc.yy"
    {}
    break;

  case 1488:
#line 9532 "sql_yacc.yy"
    {}
    break;

  case 1489:
#line 9533 "sql_yacc.yy"
    {}
    break;

  case 1490:
#line 9538 "sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1491:
#line 9543 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1492:
#line 9551 "sql_yacc.yy"
    {}
    break;

  case 1494:
#line 9557 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1495:
#line 9562 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1496:
#line 9569 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1497:
#line 9571 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1499:
#line 9580 "sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1501:
#line 9588 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->lock_option= TL_UNLOCK; /* Will be set later */
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1502:
#line 9597 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1503:
#line 9615 "sql_yacc.yy"
    {}
    break;

  case 1506:
#line 9625 "sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1509:
#line 9638 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1510:
#line 9647 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1511:
#line 9648 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1512:
#line 9655 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            lex->lock_option= TL_WRITE_DEFAULT;
            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1513:
#line 9663 "sql_yacc.yy"
    {}
    break;

  case 1514:
#line 9668 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1515:
#line 9674 "sql_yacc.yy"
    {}
    break;

  case 1516:
#line 9676 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1517:
#line 9678 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1518:
#line 9683 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1519:
#line 9685 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1520:
#line 9692 "sql_yacc.yy"
    {}
    break;

  case 1521:
#line 9693 "sql_yacc.yy"
    {}
    break;

  case 1522:
#line 9698 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (3)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(3) - (3)].lex_str_ptr),
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1523:
#line 9710 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(5) - (5)].lex_str_ptr), 
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1524:
#line 9724 "sql_yacc.yy"
    {}
    break;

  case 1525:
#line 9725 "sql_yacc.yy"
    {}
    break;

  case 1526:
#line 9729 "sql_yacc.yy"
    {}
    break;

  case 1527:
#line 9730 "sql_yacc.yy"
    {}
    break;

  case 1528:
#line 9734 "sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1529:
#line 9735 "sql_yacc.yy"
    { Lex->lock_option= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1530:
#line 9736 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1531:
#line 9741 "sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
          }
    break;

  case 1538:
#line 9765 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1539:
#line 9769 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1540:
#line 9773 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1541:
#line 9777 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1542:
#line 9781 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1543:
#line 9785 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1544:
#line 9789 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1545:
#line 9793 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1546:
#line 9797 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1547:
#line 9804 "sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1548:
#line 9808 "sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1549:
#line 9817 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1550:
#line 9826 "sql_yacc.yy"
    {}
    break;

  case 1551:
#line 9831 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1552:
#line 9838 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1553:
#line 9846 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1554:
#line 9854 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1555:
#line 9862 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1556:
#line 9870 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1557:
#line 9878 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            WARN_DEPRECATED(yythd, "6.0", "SHOW PLUGIN", "'SHOW PLUGINS'");
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1558:
#line 9886 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1559:
#line 9893 "sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1560:
#line 9895 "sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1561:
#line 9897 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1562:
#line 9912 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_NEW_MASTER;
            Lex->mi.log_file_name = (yyvsp[(8) - (16)].lex_str).str;
            Lex->mi.pos = (yyvsp[(12) - (16)].ulonglong_number);
            Lex->mi.server_id = (yyvsp[(16) - (16)].ulong_num);
          }
    break;

  case 1563:
#line 9919 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1564:
#line 9923 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1565:
#line 9927 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1567:
#line 9932 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1568:
#line 9941 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_COLUMN_TYPES;
          }
    break;

  case 1569:
#line 9946 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            WARN_DEPRECATED(yythd, "6.0", "SHOW TABLE TYPES", "'SHOW [STORAGE] ENGINES'");
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1570:
#line 9954 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1571:
#line 9961 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1572:
#line 9966 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1573:
#line 9971 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1574:
#line 9976 "sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1575:
#line 9978 "sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1576:
#line 9980 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1577:
#line 9982 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1578:
#line 9984 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1579:
#line 9986 "sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1580:
#line 9993 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1581:
#line 10001 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_STATUS;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW INNODB STATUS", "'SHOW ENGINE INNODB STATUS'");
          }
    break;

  case 1582:
#line 10013 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_MUTEX;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW MUTEX STATUS", "'SHOW ENGINE INNODB MUTEX'");
          }
    break;

  case 1583:
#line 10025 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1584:
#line 10027 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1585:
#line 10035 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1586:
#line 10042 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1587:
#line 10049 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1588:
#line 10059 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1589:
#line 10066 "sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1590:
#line 10072 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1591:
#line 10081 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1592:
#line 10089 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1593:
#line 10093 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1594:
#line 10097 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1595:
#line 10104 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1596:
#line 10111 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1597:
#line 10117 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1598:
#line 10124 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1599:
#line 10131 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1600:
#line 10141 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1601:
#line 10151 "sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1602:
#line 10159 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1603:
#line 10161 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1604:
#line 10163 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1609:
#line 10177 "sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1610:
#line 10178 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1611:
#line 10182 "sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1612:
#line 10183 "sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1615:
#line 10192 "sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1616:
#line 10193 "sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1617:
#line 10197 "sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1618:
#line 10198 "sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1620:
#line 10204 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1621:
#line 10211 "sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1622:
#line 10221 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1623:
#line 10232 "sql_yacc.yy"
    {}
    break;

  case 1624:
#line 10234 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1625:
#line 10236 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1628:
#line 10248 "sql_yacc.yy"
    {}
    break;

  case 1629:
#line 10249 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1630:
#line 10250 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1631:
#line 10254 "sql_yacc.yy"
    {}
    break;

  case 1632:
#line 10255 "sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1633:
#line 10257 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1634:
#line 10271 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1635:
#line 10278 "sql_yacc.yy"
    {}
    break;

  case 1638:
#line 10288 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES; }
    break;

  case 1639:
#line 10289 "sql_yacc.yy"
    {}
    break;

  case 1640:
#line 10291 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES | REFRESH_READ_LOCK; }
    break;

  case 1641:
#line 10293 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1642:
#line 10295 "sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1643:
#line 10297 "sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1644:
#line 10299 "sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1645:
#line 10301 "sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1646:
#line 10303 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1647:
#line 10305 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1648:
#line 10307 "sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1649:
#line 10309 "sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1650:
#line 10313 "sql_yacc.yy"
    {}
    break;

  case 1651:
#line 10314 "sql_yacc.yy"
    {}
    break;

  case 1652:
#line 10319 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1653:
#line 10324 "sql_yacc.yy"
    {}
    break;

  case 1656:
#line 10333 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1657:
#line 10334 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1658:
#line 10335 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1659:
#line 10340 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1660:
#line 10346 "sql_yacc.yy"
    {}
    break;

  case 1662:
#line 10355 "sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1663:
#line 10359 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1664:
#line 10371 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1665:
#line 10380 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1666:
#line 10381 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1667:
#line 10382 "sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1668:
#line 10389 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1669:
#line 10400 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD DATA");
              MYSQL_YYABORT;
            }
            lex->fname_start= lip->get_ptr();
          }
    break;

  case 1670:
#line 10413 "sql_yacc.yy"
    {}
    break;

  case 1671:
#line 10415 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            WARN_DEPRECATED(yythd, "6.0", "LOAD TABLE FROM MASTER",
                            "MySQL Administrator (mysqldump, mysql)");
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD TABLE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_LOAD_MASTER_TABLE;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(3) - (5)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1672:
#line 10432 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->lock_option= (yyvsp[(1) - (4)].lock_type);
            lex->local_file=  (yyvsp[(2) - (4)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(4) - (4)].lex_str).str, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 1673:
#line 10443 "sql_yacc.yy"
    {
            Lex->fname_end= YYLIP->get_ptr();
          }
    break;

  case 1674:
#line 10447 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(10) - (10)].table), NULL, TL_OPTION_UPDATING,
                                           lex->lock_option))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1675:
#line 10457 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(12) - (12)].charset); }
    break;

  case 1676:
#line 10460 "sql_yacc.yy"
    {}
    break;

  case 1677:
#line 10462 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_LOAD_MASTER_DATA;
            WARN_DEPRECATED(yythd, "6.0", "LOAD DATA FROM MASTER",
                            "mysqldump or future "
                            "BACKUP/RESTORE DATABASE facility");
          }
    break;

  case 1678:
#line 10471 "sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1679:
#line 10472 "sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1680:
#line 10476 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1681:
#line 10478 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1682:
#line 10489 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1683:
#line 10493 "sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1684:
#line 10494 "sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1685:
#line 10495 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1690:
#line 10510 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1691:
#line 10515 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1692:
#line 10522 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1693:
#line 10527 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1698:
#line 10545 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1699:
#line 10550 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1701:
#line 10559 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1702:
#line 10566 "sql_yacc.yy"
    {}
    break;

  case 1703:
#line 10567 "sql_yacc.yy"
    {}
    break;

  case 1704:
#line 10568 "sql_yacc.yy"
    {}
    break;

  case 1705:
#line 10573 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1706:
#line 10575 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1707:
#line 10579 "sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1708:
#line 10581 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1709:
#line 10589 "sql_yacc.yy"
    {}
    break;

  case 1710:
#line 10590 "sql_yacc.yy"
    {}
    break;

  case 1711:
#line 10597 "sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1712:
#line 10621 "sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1713:
#line 10633 "sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1714:
#line 10644 "sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1715:
#line 10663 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1716:
#line 10671 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1717:
#line 10683 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1718:
#line 10698 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1719:
#line 10718 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1720:
#line 10719 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1721:
#line 10721 "sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1722:
#line 10728 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1723:
#line 10729 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1724:
#line 10731 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1725:
#line 10738 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1726:
#line 10744 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1727:
#line 10750 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1728:
#line 10756 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1729:
#line 10762 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1730:
#line 10791 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1731:
#line 10818 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1732:
#line 10819 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1733:
#line 10820 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1734:
#line 10825 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1735:
#line 10835 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1736:
#line 10845 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1737:
#line 10851 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1738:
#line 10860 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1739:
#line 10874 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1740:
#line 10875 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1741:
#line 10880 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1742:
#line 10889 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1743:
#line 10904 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1744:
#line 10909 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1745:
#line 10955 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1746:
#line 10960 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1747:
#line 10977 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1748:
#line 10982 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list((uchar*) trg_fld,
                                                 (uchar**) &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1749:
#line 11061 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1750:
#line 11086 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1751:
#line 11116 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1752:
#line 11118 "sql_yacc.yy"
    {
            TABLE_LIST *table= (TABLE_LIST*) Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1753:
#line 11134 "sql_yacc.yy"
    {
            TABLE_LIST *table= (TABLE_LIST*) Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1754:
#line 11143 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1755:
#line 11148 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1756:
#line 11154 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1757:
#line 11160 "sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1758:
#line 11170 "sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1759:
#line 11179 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1760:
#line 11181 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, (yyvsp[(1) - (1)].lex_str).str + wlen);
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1761:
#line 11210 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1762:
#line 11226 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1763:
#line 11242 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1764:
#line 11258 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1765:
#line 11260 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1766:
#line 11270 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1767:
#line 11272 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1768:
#line 11282 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1769:
#line 11283 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1770:
#line 11284 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1771:
#line 11289 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1772:
#line 11303 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
          }
    break;

  case 1773:
#line 11316 "sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1774:
#line 11330 "sql_yacc.yy"
    {}
    break;

  case 1775:
#line 11331 "sql_yacc.yy"
    {}
    break;

  case 1776:
#line 11332 "sql_yacc.yy"
    {}
    break;

  case 1777:
#line 11333 "sql_yacc.yy"
    {}
    break;

  case 1778:
#line 11334 "sql_yacc.yy"
    {}
    break;

  case 1779:
#line 11335 "sql_yacc.yy"
    {}
    break;

  case 1780:
#line 11336 "sql_yacc.yy"
    {}
    break;

  case 1781:
#line 11337 "sql_yacc.yy"
    {}
    break;

  case 1782:
#line 11338 "sql_yacc.yy"
    {}
    break;

  case 1783:
#line 11339 "sql_yacc.yy"
    {}
    break;

  case 1784:
#line 11340 "sql_yacc.yy"
    {}
    break;

  case 1785:
#line 11341 "sql_yacc.yy"
    {}
    break;

  case 1786:
#line 11342 "sql_yacc.yy"
    {}
    break;

  case 1787:
#line 11343 "sql_yacc.yy"
    {}
    break;

  case 1788:
#line 11344 "sql_yacc.yy"
    {}
    break;

  case 1789:
#line 11345 "sql_yacc.yy"
    {}
    break;

  case 1790:
#line 11346 "sql_yacc.yy"
    {}
    break;

  case 1791:
#line 11347 "sql_yacc.yy"
    {}
    break;

  case 1792:
#line 11348 "sql_yacc.yy"
    {}
    break;

  case 1793:
#line 11349 "sql_yacc.yy"
    {}
    break;

  case 1794:
#line 11350 "sql_yacc.yy"
    {}
    break;

  case 1795:
#line 11351 "sql_yacc.yy"
    {}
    break;

  case 1796:
#line 11352 "sql_yacc.yy"
    {}
    break;

  case 1797:
#line 11353 "sql_yacc.yy"
    {}
    break;

  case 1798:
#line 11354 "sql_yacc.yy"
    {}
    break;

  case 1799:
#line 11355 "sql_yacc.yy"
    {}
    break;

  case 1800:
#line 11356 "sql_yacc.yy"
    {}
    break;

  case 1801:
#line 11357 "sql_yacc.yy"
    {}
    break;

  case 1802:
#line 11358 "sql_yacc.yy"
    {}
    break;

  case 1803:
#line 11359 "sql_yacc.yy"
    {}
    break;

  case 1804:
#line 11360 "sql_yacc.yy"
    {}
    break;

  case 1805:
#line 11361 "sql_yacc.yy"
    {}
    break;

  case 1806:
#line 11362 "sql_yacc.yy"
    {}
    break;

  case 1807:
#line 11363 "sql_yacc.yy"
    {}
    break;

  case 1808:
#line 11364 "sql_yacc.yy"
    {}
    break;

  case 1809:
#line 11365 "sql_yacc.yy"
    {}
    break;

  case 1810:
#line 11366 "sql_yacc.yy"
    {}
    break;

  case 1811:
#line 11367 "sql_yacc.yy"
    {}
    break;

  case 1812:
#line 11368 "sql_yacc.yy"
    {}
    break;

  case 1813:
#line 11369 "sql_yacc.yy"
    {}
    break;

  case 1814:
#line 11370 "sql_yacc.yy"
    {}
    break;

  case 1815:
#line 11371 "sql_yacc.yy"
    {}
    break;

  case 1816:
#line 11372 "sql_yacc.yy"
    {}
    break;

  case 1817:
#line 11373 "sql_yacc.yy"
    {}
    break;

  case 1818:
#line 11374 "sql_yacc.yy"
    {}
    break;

  case 1819:
#line 11375 "sql_yacc.yy"
    {}
    break;

  case 1820:
#line 11376 "sql_yacc.yy"
    {}
    break;

  case 1821:
#line 11377 "sql_yacc.yy"
    {}
    break;

  case 1822:
#line 11378 "sql_yacc.yy"
    {}
    break;

  case 1823:
#line 11379 "sql_yacc.yy"
    {}
    break;

  case 1824:
#line 11389 "sql_yacc.yy"
    {}
    break;

  case 1825:
#line 11390 "sql_yacc.yy"
    {}
    break;

  case 1826:
#line 11391 "sql_yacc.yy"
    {}
    break;

  case 1827:
#line 11392 "sql_yacc.yy"
    {}
    break;

  case 1828:
#line 11393 "sql_yacc.yy"
    {}
    break;

  case 1829:
#line 11394 "sql_yacc.yy"
    {}
    break;

  case 1830:
#line 11395 "sql_yacc.yy"
    {}
    break;

  case 1831:
#line 11396 "sql_yacc.yy"
    {}
    break;

  case 1832:
#line 11397 "sql_yacc.yy"
    {}
    break;

  case 1833:
#line 11398 "sql_yacc.yy"
    {}
    break;

  case 1834:
#line 11399 "sql_yacc.yy"
    {}
    break;

  case 1835:
#line 11400 "sql_yacc.yy"
    {}
    break;

  case 1836:
#line 11401 "sql_yacc.yy"
    {}
    break;

  case 1837:
#line 11402 "sql_yacc.yy"
    {}
    break;

  case 1838:
#line 11403 "sql_yacc.yy"
    {}
    break;

  case 1839:
#line 11404 "sql_yacc.yy"
    {}
    break;

  case 1840:
#line 11405 "sql_yacc.yy"
    {}
    break;

  case 1841:
#line 11406 "sql_yacc.yy"
    {}
    break;

  case 1842:
#line 11407 "sql_yacc.yy"
    {}
    break;

  case 1843:
#line 11408 "sql_yacc.yy"
    {}
    break;

  case 1844:
#line 11409 "sql_yacc.yy"
    {}
    break;

  case 1845:
#line 11410 "sql_yacc.yy"
    {}
    break;

  case 1846:
#line 11411 "sql_yacc.yy"
    {}
    break;

  case 1847:
#line 11412 "sql_yacc.yy"
    {}
    break;

  case 1848:
#line 11413 "sql_yacc.yy"
    {}
    break;

  case 1849:
#line 11414 "sql_yacc.yy"
    {}
    break;

  case 1850:
#line 11415 "sql_yacc.yy"
    {}
    break;

  case 1851:
#line 11416 "sql_yacc.yy"
    {}
    break;

  case 1852:
#line 11417 "sql_yacc.yy"
    {}
    break;

  case 1853:
#line 11418 "sql_yacc.yy"
    {}
    break;

  case 1854:
#line 11419 "sql_yacc.yy"
    {}
    break;

  case 1855:
#line 11420 "sql_yacc.yy"
    {}
    break;

  case 1856:
#line 11421 "sql_yacc.yy"
    {}
    break;

  case 1857:
#line 11422 "sql_yacc.yy"
    {}
    break;

  case 1858:
#line 11423 "sql_yacc.yy"
    {}
    break;

  case 1859:
#line 11424 "sql_yacc.yy"
    {}
    break;

  case 1860:
#line 11425 "sql_yacc.yy"
    {}
    break;

  case 1861:
#line 11426 "sql_yacc.yy"
    {}
    break;

  case 1862:
#line 11427 "sql_yacc.yy"
    {}
    break;

  case 1863:
#line 11428 "sql_yacc.yy"
    {}
    break;

  case 1864:
#line 11429 "sql_yacc.yy"
    {}
    break;

  case 1865:
#line 11430 "sql_yacc.yy"
    {}
    break;

  case 1866:
#line 11431 "sql_yacc.yy"
    {}
    break;

  case 1867:
#line 11432 "sql_yacc.yy"
    {}
    break;

  case 1868:
#line 11433 "sql_yacc.yy"
    {}
    break;

  case 1869:
#line 11434 "sql_yacc.yy"
    {}
    break;

  case 1870:
#line 11435 "sql_yacc.yy"
    {}
    break;

  case 1871:
#line 11436 "sql_yacc.yy"
    {}
    break;

  case 1872:
#line 11437 "sql_yacc.yy"
    {}
    break;

  case 1873:
#line 11438 "sql_yacc.yy"
    {}
    break;

  case 1874:
#line 11439 "sql_yacc.yy"
    {}
    break;

  case 1875:
#line 11440 "sql_yacc.yy"
    {}
    break;

  case 1876:
#line 11441 "sql_yacc.yy"
    {}
    break;

  case 1877:
#line 11442 "sql_yacc.yy"
    {}
    break;

  case 1878:
#line 11443 "sql_yacc.yy"
    {}
    break;

  case 1879:
#line 11444 "sql_yacc.yy"
    {}
    break;

  case 1880:
#line 11445 "sql_yacc.yy"
    {}
    break;

  case 1881:
#line 11446 "sql_yacc.yy"
    {}
    break;

  case 1882:
#line 11447 "sql_yacc.yy"
    {}
    break;

  case 1883:
#line 11448 "sql_yacc.yy"
    {}
    break;

  case 1884:
#line 11449 "sql_yacc.yy"
    {}
    break;

  case 1885:
#line 11450 "sql_yacc.yy"
    {}
    break;

  case 1886:
#line 11451 "sql_yacc.yy"
    {}
    break;

  case 1887:
#line 11452 "sql_yacc.yy"
    {}
    break;

  case 1888:
#line 11453 "sql_yacc.yy"
    {}
    break;

  case 1889:
#line 11454 "sql_yacc.yy"
    {}
    break;

  case 1890:
#line 11455 "sql_yacc.yy"
    {}
    break;

  case 1891:
#line 11456 "sql_yacc.yy"
    {}
    break;

  case 1892:
#line 11457 "sql_yacc.yy"
    {}
    break;

  case 1893:
#line 11458 "sql_yacc.yy"
    {}
    break;

  case 1894:
#line 11459 "sql_yacc.yy"
    {}
    break;

  case 1895:
#line 11460 "sql_yacc.yy"
    {}
    break;

  case 1896:
#line 11461 "sql_yacc.yy"
    {}
    break;

  case 1897:
#line 11462 "sql_yacc.yy"
    {}
    break;

  case 1898:
#line 11463 "sql_yacc.yy"
    {}
    break;

  case 1899:
#line 11464 "sql_yacc.yy"
    {}
    break;

  case 1900:
#line 11465 "sql_yacc.yy"
    {}
    break;

  case 1901:
#line 11466 "sql_yacc.yy"
    {}
    break;

  case 1902:
#line 11467 "sql_yacc.yy"
    {}
    break;

  case 1903:
#line 11468 "sql_yacc.yy"
    {}
    break;

  case 1904:
#line 11469 "sql_yacc.yy"
    {}
    break;

  case 1905:
#line 11470 "sql_yacc.yy"
    {}
    break;

  case 1906:
#line 11471 "sql_yacc.yy"
    {}
    break;

  case 1907:
#line 11472 "sql_yacc.yy"
    {}
    break;

  case 1908:
#line 11473 "sql_yacc.yy"
    {}
    break;

  case 1909:
#line 11474 "sql_yacc.yy"
    {}
    break;

  case 1910:
#line 11475 "sql_yacc.yy"
    {}
    break;

  case 1911:
#line 11476 "sql_yacc.yy"
    {}
    break;

  case 1912:
#line 11477 "sql_yacc.yy"
    {}
    break;

  case 1913:
#line 11478 "sql_yacc.yy"
    {}
    break;

  case 1914:
#line 11479 "sql_yacc.yy"
    {}
    break;

  case 1915:
#line 11480 "sql_yacc.yy"
    {}
    break;

  case 1916:
#line 11481 "sql_yacc.yy"
    {}
    break;

  case 1917:
#line 11482 "sql_yacc.yy"
    {}
    break;

  case 1918:
#line 11483 "sql_yacc.yy"
    {}
    break;

  case 1919:
#line 11484 "sql_yacc.yy"
    {}
    break;

  case 1920:
#line 11485 "sql_yacc.yy"
    {}
    break;

  case 1921:
#line 11486 "sql_yacc.yy"
    {}
    break;

  case 1922:
#line 11487 "sql_yacc.yy"
    {}
    break;

  case 1923:
#line 11488 "sql_yacc.yy"
    {}
    break;

  case 1924:
#line 11489 "sql_yacc.yy"
    {}
    break;

  case 1925:
#line 11490 "sql_yacc.yy"
    {}
    break;

  case 1926:
#line 11491 "sql_yacc.yy"
    {}
    break;

  case 1927:
#line 11492 "sql_yacc.yy"
    {}
    break;

  case 1928:
#line 11493 "sql_yacc.yy"
    {}
    break;

  case 1929:
#line 11494 "sql_yacc.yy"
    {}
    break;

  case 1930:
#line 11495 "sql_yacc.yy"
    {}
    break;

  case 1931:
#line 11496 "sql_yacc.yy"
    {}
    break;

  case 1932:
#line 11497 "sql_yacc.yy"
    {}
    break;

  case 1933:
#line 11498 "sql_yacc.yy"
    {}
    break;

  case 1934:
#line 11499 "sql_yacc.yy"
    {}
    break;

  case 1935:
#line 11500 "sql_yacc.yy"
    {}
    break;

  case 1936:
#line 11501 "sql_yacc.yy"
    {}
    break;

  case 1937:
#line 11502 "sql_yacc.yy"
    {}
    break;

  case 1938:
#line 11503 "sql_yacc.yy"
    {}
    break;

  case 1939:
#line 11504 "sql_yacc.yy"
    {}
    break;

  case 1940:
#line 11505 "sql_yacc.yy"
    {}
    break;

  case 1941:
#line 11506 "sql_yacc.yy"
    {}
    break;

  case 1942:
#line 11507 "sql_yacc.yy"
    {}
    break;

  case 1943:
#line 11508 "sql_yacc.yy"
    {}
    break;

  case 1944:
#line 11509 "sql_yacc.yy"
    {}
    break;

  case 1945:
#line 11510 "sql_yacc.yy"
    {}
    break;

  case 1946:
#line 11511 "sql_yacc.yy"
    {}
    break;

  case 1947:
#line 11512 "sql_yacc.yy"
    {}
    break;

  case 1948:
#line 11513 "sql_yacc.yy"
    {}
    break;

  case 1949:
#line 11514 "sql_yacc.yy"
    {}
    break;

  case 1950:
#line 11515 "sql_yacc.yy"
    {}
    break;

  case 1951:
#line 11516 "sql_yacc.yy"
    {}
    break;

  case 1952:
#line 11517 "sql_yacc.yy"
    {}
    break;

  case 1953:
#line 11518 "sql_yacc.yy"
    {}
    break;

  case 1954:
#line 11519 "sql_yacc.yy"
    {}
    break;

  case 1955:
#line 11520 "sql_yacc.yy"
    {}
    break;

  case 1956:
#line 11521 "sql_yacc.yy"
    {}
    break;

  case 1957:
#line 11522 "sql_yacc.yy"
    {}
    break;

  case 1958:
#line 11523 "sql_yacc.yy"
    {}
    break;

  case 1959:
#line 11524 "sql_yacc.yy"
    {}
    break;

  case 1960:
#line 11525 "sql_yacc.yy"
    {}
    break;

  case 1961:
#line 11526 "sql_yacc.yy"
    {}
    break;

  case 1962:
#line 11527 "sql_yacc.yy"
    {}
    break;

  case 1963:
#line 11528 "sql_yacc.yy"
    {}
    break;

  case 1964:
#line 11529 "sql_yacc.yy"
    {}
    break;

  case 1965:
#line 11530 "sql_yacc.yy"
    {}
    break;

  case 1966:
#line 11531 "sql_yacc.yy"
    {}
    break;

  case 1967:
#line 11532 "sql_yacc.yy"
    {}
    break;

  case 1968:
#line 11533 "sql_yacc.yy"
    {}
    break;

  case 1969:
#line 11534 "sql_yacc.yy"
    {}
    break;

  case 1970:
#line 11535 "sql_yacc.yy"
    {}
    break;

  case 1971:
#line 11536 "sql_yacc.yy"
    {}
    break;

  case 1972:
#line 11537 "sql_yacc.yy"
    {}
    break;

  case 1973:
#line 11538 "sql_yacc.yy"
    {}
    break;

  case 1974:
#line 11539 "sql_yacc.yy"
    {}
    break;

  case 1975:
#line 11540 "sql_yacc.yy"
    {}
    break;

  case 1976:
#line 11541 "sql_yacc.yy"
    {}
    break;

  case 1977:
#line 11542 "sql_yacc.yy"
    {}
    break;

  case 1978:
#line 11543 "sql_yacc.yy"
    {}
    break;

  case 1979:
#line 11544 "sql_yacc.yy"
    {}
    break;

  case 1980:
#line 11545 "sql_yacc.yy"
    {}
    break;

  case 1981:
#line 11546 "sql_yacc.yy"
    {}
    break;

  case 1982:
#line 11547 "sql_yacc.yy"
    {}
    break;

  case 1983:
#line 11548 "sql_yacc.yy"
    {}
    break;

  case 1984:
#line 11549 "sql_yacc.yy"
    {}
    break;

  case 1985:
#line 11550 "sql_yacc.yy"
    {}
    break;

  case 1986:
#line 11551 "sql_yacc.yy"
    {}
    break;

  case 1987:
#line 11552 "sql_yacc.yy"
    {}
    break;

  case 1988:
#line 11553 "sql_yacc.yy"
    {}
    break;

  case 1989:
#line 11554 "sql_yacc.yy"
    {}
    break;

  case 1990:
#line 11555 "sql_yacc.yy"
    {}
    break;

  case 1991:
#line 11556 "sql_yacc.yy"
    {}
    break;

  case 1992:
#line 11557 "sql_yacc.yy"
    {}
    break;

  case 1993:
#line 11558 "sql_yacc.yy"
    {}
    break;

  case 1994:
#line 11559 "sql_yacc.yy"
    {}
    break;

  case 1995:
#line 11560 "sql_yacc.yy"
    {}
    break;

  case 1996:
#line 11561 "sql_yacc.yy"
    {}
    break;

  case 1997:
#line 11562 "sql_yacc.yy"
    {}
    break;

  case 1998:
#line 11563 "sql_yacc.yy"
    {}
    break;

  case 1999:
#line 11564 "sql_yacc.yy"
    {}
    break;

  case 2000:
#line 11565 "sql_yacc.yy"
    {}
    break;

  case 2001:
#line 11566 "sql_yacc.yy"
    {}
    break;

  case 2002:
#line 11567 "sql_yacc.yy"
    {}
    break;

  case 2003:
#line 11568 "sql_yacc.yy"
    {}
    break;

  case 2004:
#line 11569 "sql_yacc.yy"
    {}
    break;

  case 2005:
#line 11570 "sql_yacc.yy"
    {}
    break;

  case 2006:
#line 11571 "sql_yacc.yy"
    {}
    break;

  case 2007:
#line 11572 "sql_yacc.yy"
    {}
    break;

  case 2008:
#line 11573 "sql_yacc.yy"
    {}
    break;

  case 2009:
#line 11574 "sql_yacc.yy"
    {}
    break;

  case 2010:
#line 11575 "sql_yacc.yy"
    {}
    break;

  case 2011:
#line 11576 "sql_yacc.yy"
    {}
    break;

  case 2012:
#line 11577 "sql_yacc.yy"
    {}
    break;

  case 2013:
#line 11578 "sql_yacc.yy"
    {}
    break;

  case 2014:
#line 11579 "sql_yacc.yy"
    {}
    break;

  case 2015:
#line 11580 "sql_yacc.yy"
    {}
    break;

  case 2016:
#line 11581 "sql_yacc.yy"
    {}
    break;

  case 2017:
#line 11582 "sql_yacc.yy"
    {}
    break;

  case 2018:
#line 11583 "sql_yacc.yy"
    {}
    break;

  case 2019:
#line 11584 "sql_yacc.yy"
    {}
    break;

  case 2020:
#line 11585 "sql_yacc.yy"
    {}
    break;

  case 2021:
#line 11586 "sql_yacc.yy"
    {}
    break;

  case 2022:
#line 11587 "sql_yacc.yy"
    {}
    break;

  case 2023:
#line 11588 "sql_yacc.yy"
    {}
    break;

  case 2024:
#line 11589 "sql_yacc.yy"
    {}
    break;

  case 2025:
#line 11590 "sql_yacc.yy"
    {}
    break;

  case 2026:
#line 11591 "sql_yacc.yy"
    {}
    break;

  case 2027:
#line 11592 "sql_yacc.yy"
    {}
    break;

  case 2028:
#line 11593 "sql_yacc.yy"
    {}
    break;

  case 2029:
#line 11594 "sql_yacc.yy"
    {}
    break;

  case 2030:
#line 11595 "sql_yacc.yy"
    {}
    break;

  case 2031:
#line 11596 "sql_yacc.yy"
    {}
    break;

  case 2032:
#line 11597 "sql_yacc.yy"
    {}
    break;

  case 2033:
#line 11598 "sql_yacc.yy"
    {}
    break;

  case 2034:
#line 11599 "sql_yacc.yy"
    {}
    break;

  case 2035:
#line 11600 "sql_yacc.yy"
    {}
    break;

  case 2036:
#line 11601 "sql_yacc.yy"
    {}
    break;

  case 2037:
#line 11602 "sql_yacc.yy"
    {}
    break;

  case 2038:
#line 11603 "sql_yacc.yy"
    {}
    break;

  case 2039:
#line 11604 "sql_yacc.yy"
    {}
    break;

  case 2040:
#line 11605 "sql_yacc.yy"
    {}
    break;

  case 2041:
#line 11606 "sql_yacc.yy"
    {}
    break;

  case 2042:
#line 11607 "sql_yacc.yy"
    {}
    break;

  case 2043:
#line 11608 "sql_yacc.yy"
    {}
    break;

  case 2044:
#line 11609 "sql_yacc.yy"
    {}
    break;

  case 2045:
#line 11610 "sql_yacc.yy"
    {}
    break;

  case 2046:
#line 11611 "sql_yacc.yy"
    {}
    break;

  case 2047:
#line 11612 "sql_yacc.yy"
    {}
    break;

  case 2048:
#line 11613 "sql_yacc.yy"
    {}
    break;

  case 2049:
#line 11614 "sql_yacc.yy"
    {}
    break;

  case 2050:
#line 11615 "sql_yacc.yy"
    {}
    break;

  case 2051:
#line 11616 "sql_yacc.yy"
    {}
    break;

  case 2052:
#line 11617 "sql_yacc.yy"
    {}
    break;

  case 2053:
#line 11618 "sql_yacc.yy"
    {}
    break;

  case 2054:
#line 11619 "sql_yacc.yy"
    {}
    break;

  case 2055:
#line 11620 "sql_yacc.yy"
    {}
    break;

  case 2056:
#line 11621 "sql_yacc.yy"
    {}
    break;

  case 2057:
#line 11622 "sql_yacc.yy"
    {}
    break;

  case 2058:
#line 11623 "sql_yacc.yy"
    {}
    break;

  case 2059:
#line 11624 "sql_yacc.yy"
    {}
    break;

  case 2060:
#line 11625 "sql_yacc.yy"
    {}
    break;

  case 2061:
#line 11626 "sql_yacc.yy"
    {}
    break;

  case 2062:
#line 11627 "sql_yacc.yy"
    {}
    break;

  case 2063:
#line 11628 "sql_yacc.yy"
    {}
    break;

  case 2064:
#line 11629 "sql_yacc.yy"
    {}
    break;

  case 2065:
#line 11630 "sql_yacc.yy"
    {}
    break;

  case 2066:
#line 11631 "sql_yacc.yy"
    {}
    break;

  case 2067:
#line 11632 "sql_yacc.yy"
    {}
    break;

  case 2068:
#line 11633 "sql_yacc.yy"
    {}
    break;

  case 2069:
#line 11634 "sql_yacc.yy"
    {}
    break;

  case 2070:
#line 11635 "sql_yacc.yy"
    {}
    break;

  case 2071:
#line 11636 "sql_yacc.yy"
    {}
    break;

  case 2072:
#line 11637 "sql_yacc.yy"
    {}
    break;

  case 2073:
#line 11638 "sql_yacc.yy"
    {}
    break;

  case 2074:
#line 11639 "sql_yacc.yy"
    {}
    break;

  case 2075:
#line 11640 "sql_yacc.yy"
    {}
    break;

  case 2076:
#line 11641 "sql_yacc.yy"
    {}
    break;

  case 2077:
#line 11642 "sql_yacc.yy"
    {}
    break;

  case 2078:
#line 11643 "sql_yacc.yy"
    {}
    break;

  case 2079:
#line 11644 "sql_yacc.yy"
    {}
    break;

  case 2080:
#line 11645 "sql_yacc.yy"
    {}
    break;

  case 2081:
#line 11646 "sql_yacc.yy"
    {}
    break;

  case 2082:
#line 11647 "sql_yacc.yy"
    {}
    break;

  case 2083:
#line 11648 "sql_yacc.yy"
    {}
    break;

  case 2084:
#line 11649 "sql_yacc.yy"
    {}
    break;

  case 2085:
#line 11650 "sql_yacc.yy"
    {}
    break;

  case 2086:
#line 11657 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2087:
#line 11667 "sql_yacc.yy"
    {}
    break;

  case 2088:
#line 11671 "sql_yacc.yy"
    {}
    break;

  case 2089:
#line 11672 "sql_yacc.yy"
    {}
    break;

  case 2092:
#line 11681 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2093:
#line 11712 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                sp->add_instr(i);
              }
              lex->sphead->restore_lex(thd);
            }
          }
    break;

  case 2094:
#line 11761 "sql_yacc.yy"
    {}
    break;

  case 2095:
#line 11762 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2096:
#line 11763 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2097:
#line 11764 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2098:
#line 11768 "sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2099:
#line 11769 "sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2100:
#line 11773 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2101:
#line 11774 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2102:
#line 11775 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2103:
#line 11776 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2104:
#line 11780 "sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2105:
#line 11781 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2106:
#line 11782 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2107:
#line 11783 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2110:
#line 11793 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              Item *it;
              Item_trigger_field *trg_fld;
              sp_instr_set_trigger_field *sp_fld;
              LINT_INIT(sp_fld);
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if ((yyvsp[(4) - (4)].item))
                it= (yyvsp[(4) - (4)].item);
              else
              {
                /* QQ: Shouldn't this be field's default value ? */
                it= new Item_null();
              }

              DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));

              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            Item_trigger_field::NEW_ROW,
                                            (yyvsp[(2) - (4)].variable).base_name.str,
                                            UPDATE_ACL, FALSE);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              sp_fld= new sp_instr_set_trigger_field(lex->sphead->
                                                     instructions(),
                                                     lex->spcont,
                                                     trg_fld,
                                                     it, lex);
              if (sp_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field
                objects in trigger.
              */
              lex->trg_table_fields.link_in_list((uchar *)trg_fld,
                                                 (uchar **) &trg_fld->
                                                   next_trg_field);

              lex->sphead->add_instr(sp_fld);
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            { /* System variable */
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);
              set_var *var= new set_var(lex->option_type, (yyvsp[(2) - (4)].variable).var,
                                        &(yyvsp[(2) - (4)].variable).base_name, (yyvsp[(4) - (4)].item));
              if (var == NULL)
                MYSQL_YYABORT;
              lex->var_list.push_back(var);
            }
            else
            {
              /* An SP local variable */
              sp_pcontext *ctx= lex->spcont;
              sp_variable_t *spv;
              sp_instr_set *sp_set;
              Item *it;
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              spv= ctx->find_variable(&(yyvsp[(2) - (4)].variable).base_name);

              if ((yyvsp[(4) - (4)].item))
                it= (yyvsp[(4) - (4)].item);
              else if (spv->dflt)
                it= spv->dflt;
              else
              {
                it= new (thd->mem_root) Item_null();
                if (it == NULL)
                  MYSQL_YYABORT;
              }
              sp_set= new sp_instr_set(lex->sphead->instructions(), ctx,
                                       spv->offset, it, spv->type, lex, TRUE);
              if (sp_set == NULL)
                MYSQL_YYABORT;
              lex->sphead->add_instr(sp_set);
            }
          }
    break;

  case 2111:
#line 11890 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2112:
#line 11909 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2113:
#line 11920 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            set_var *var= new set_var((yyvsp[(3) - (6)].var_type), (yyvsp[(4) - (6)].variable).var, &(yyvsp[(4) - (6)].variable).base_name, (yyvsp[(6) - (6)].item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2114:
#line 11928 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2115:
#line 11942 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2116:
#line 11957 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2117:
#line 11976 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->priv_user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2118:
#line 12003 "sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2119:
#line 12016 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            /* We have to lookup here since local vars can shadow sysvars */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* Not an SP local variable */
              sys_var *tmp=find_sys_var(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= null_lex_str;
              if (spc && tmp == &sys_autocommit)
              {
                /*
                  We don't allow setting AUTOCOMMIT from a stored function
                  or trigger.
                */
                lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
              }
            }
            else
            {
              /* An SP local variable */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2120:
#line 12048 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2121:
#line 12091 "sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2122:
#line 12104 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2123:
#line 12105 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2124:
#line 12106 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2125:
#line 12107 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2126:
#line 12111 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2127:
#line 12113 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2128:
#line 12122 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2129:
#line 12132 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2130:
#line 12133 "sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2131:
#line 12135 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2132:
#line 12141 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2133:
#line 12147 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2134:
#line 12158 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2135:
#line 12169 "sql_yacc.yy"
    {}
    break;

  case 2140:
#line 12184 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, (thr_lock_type) (yyvsp[(3) - (3)].num)))
              MYSQL_YYABORT;
          }
    break;

  case 2141:
#line 12191 "sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2142:
#line 12192 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2143:
#line 12193 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2144:
#line 12194 "sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2145:
#line 12199 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2146:
#line 12210 "sql_yacc.yy"
    {}
    break;

  case 2147:
#line 12219 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2148:
#line 12231 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2149:
#line 12243 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2150:
#line 12262 "sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
          }
    break;

  case 2151:
#line 12268 "sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2152:
#line 12269 "sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2153:
#line 12273 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2154:
#line 12274 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2155:
#line 12278 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2156:
#line 12279 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2157:
#line 12280 "sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2158:
#line 12281 "sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2159:
#line 12283 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2160:
#line 12291 "sql_yacc.yy"
    {}
    break;

  case 2161:
#line 12295 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2162:
#line 12296 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2163:
#line 12297 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2164:
#line 12298 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2165:
#line 12299 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2166:
#line 12306 "sql_yacc.yy"
    {}
    break;

  case 2167:
#line 12311 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2168:
#line 12317 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2169:
#line 12328 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2170:
#line 12339 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2171:
#line 12346 "sql_yacc.yy"
    {}
    break;

  case 2172:
#line 12352 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2173:
#line 12359 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2174:
#line 12371 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2177:
#line 12389 "sql_yacc.yy"
    {}
    break;

  case 2178:
#line 12391 "sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2183:
#line 12409 "sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2184:
#line 12410 "sql_yacc.yy"
    {}
    break;

  case 2185:
#line 12412 "sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2186:
#line 12413 "sql_yacc.yy"
    {}
    break;

  case 2187:
#line 12415 "sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2188:
#line 12416 "sql_yacc.yy"
    {}
    break;

  case 2189:
#line 12418 "sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2190:
#line 12419 "sql_yacc.yy"
    {}
    break;

  case 2191:
#line 12420 "sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2192:
#line 12421 "sql_yacc.yy"
    {}
    break;

  case 2193:
#line 12422 "sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2194:
#line 12423 "sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2195:
#line 12424 "sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2196:
#line 12425 "sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2197:
#line 12426 "sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2198:
#line 12427 "sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2199:
#line 12428 "sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2200:
#line 12429 "sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2201:
#line 12430 "sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2202:
#line 12431 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2203:
#line 12432 "sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2204:
#line 12433 "sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2205:
#line 12434 "sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2206:
#line 12435 "sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2207:
#line 12436 "sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2208:
#line 12437 "sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2209:
#line 12438 "sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2210:
#line 12439 "sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2211:
#line 12440 "sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2212:
#line 12441 "sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2213:
#line 12442 "sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2214:
#line 12443 "sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2215:
#line 12444 "sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2216:
#line 12448 "sql_yacc.yy"
    {}
    break;

  case 2217:
#line 12449 "sql_yacc.yy"
    {}
    break;

  case 2220:
#line 12459 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2221:
#line 12469 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2222:
#line 12479 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2223:
#line 12492 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2224:
#line 12507 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2225:
#line 12520 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2226:
#line 12533 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2227:
#line 12545 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2228:
#line 12550 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2229:
#line 12558 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2230:
#line 12563 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2231:
#line 12571 "sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2232:
#line 12598 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); }
    break;

  case 2233:
#line 12600 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2234:
#line 12605 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2238:
#line 12619 "sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2240:
#line 12648 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2241:
#line 12652 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2242:
#line 12656 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2243:
#line 12660 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2244:
#line 12666 "sql_yacc.yy"
    {}
    break;

  case 2246:
#line 12671 "sql_yacc.yy"
    {}
    break;

  case 2247:
#line 12672 "sql_yacc.yy"
    {}
    break;

  case 2248:
#line 12676 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2249:
#line 12678 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2250:
#line 12684 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2251:
#line 12690 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2252:
#line 12696 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2253:
#line 12705 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2254:
#line 12710 "sql_yacc.yy"
    {}
    break;

  case 2255:
#line 12714 "sql_yacc.yy"
    {}
    break;

  case 2256:
#line 12715 "sql_yacc.yy"
    {}
    break;

  case 2257:
#line 12720 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 1); }
    break;

  case 2258:
#line 12721 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2259:
#line 12722 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2260:
#line 12727 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 2); }
    break;

  case 2261:
#line 12728 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2262:
#line 12729 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2263:
#line 12733 "sql_yacc.yy"
    {}
    break;

  case 2264:
#line 12734 "sql_yacc.yy"
    {}
    break;

  case 2265:
#line 12739 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            lex->tx_chain= (yyvsp[(3) - (4)].num); 
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2266:
#line 12749 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            lex->tx_chain= (yyvsp[(3) - (4)].num); 
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2267:
#line 12757 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2268:
#line 12766 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2269:
#line 12775 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2270:
#line 12788 "sql_yacc.yy"
    {}
    break;

  case 2272:
#line 12794 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result && 
               (lex->result->get_nest_level() == -1 ||
                lex->result->get_nest_level() == lex->nest_level))
              {
                /* 
                   Only the last SELECT can have INTO unless the INTO and UNION
                   are at different nest levels. In version 5.1 and above, INTO
                   will onle be allowed at top level.
                */
                my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
                MYSQL_YYABORT;
              }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* This counter shouldn't be incremented for UNION parts */
            Lex->nest_level--;
            if (mysql_new_select(lex, 0))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage=UNION_TYPE;
            if ((yyvsp[(2) - (2)].num)) /* UNION DISTINCT - remember position */
              lex->current_select->master_unit()->union_distinct=
                lex->current_select;
          }
    break;

  case 2273:
#line 12824 "sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2274:
#line 12834 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2275:
#line 12835 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2276:
#line 12836 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2277:
#line 12840 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2278:
#line 12856 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2281:
#line 12869 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2282:
#line 12870 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2283:
#line 12871 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2284:
#line 12875 "sql_yacc.yy"
    {
          (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
        }
    break;

  case 2285:
#line 12882 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (5)].select_lex);
        }
    break;

  case 2286:
#line 12887 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (6)].select_lex);
        }
    break;

  case 2287:
#line 12892 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2288:
#line 12913 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            /*
              Set the required lock level for the tables associated with the
              current sub-select. This will overwrite previous lock options set
              using st_select_lex::add_table_to_list in any of the following
              rules: single_multi, table_wild_one, load_data, table_alias_ref,
              table_factor.
              The default lock level is TL_READ_DEFAULT but it can be modified
              with query options specific for a certain (sub-)SELECT.
            */
            lex->current_select->
              set_lock_for_tables(lex->current_select->lock_option);

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2289:
#line 12949 "sql_yacc.yy"
    {}
    break;

  case 2290:
#line 12951 "sql_yacc.yy"
    {}
    break;

  case 2291:
#line 12953 "sql_yacc.yy"
    {}
    break;

  case 2305:
#line 12986 "sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2306:
#line 13000 "sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2307:
#line 13013 "sql_yacc.yy"
    {}
    break;

  case 2308:
#line 13015 "sql_yacc.yy"
    {}
    break;

  case 2309:
#line 13017 "sql_yacc.yy"
    {}
    break;

  case 2310:
#line 13022 "sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2311:
#line 13027 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2312:
#line 13029 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2313:
#line 13031 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2314:
#line 13036 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2315:
#line 13038 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2316:
#line 13040 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2317:
#line 13045 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 2319:
#line 13058 "sql_yacc.yy"
    {}
    break;

  case 2321:
#line 13064 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2322:
#line 13069 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2323:
#line 13076 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2324:
#line 13085 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2327:
#line 13107 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2328:
#line 13109 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2329:
#line 13111 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2330:
#line 13113 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2331:
#line 13130 "sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2332:
#line 13136 "sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2333:
#line 13141 "sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2334:
#line 13171 "sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 2335:
#line 13204 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2336:
#line 13222 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2337:
#line 13245 "sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2338:
#line 13277 "sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2339:
#line 13281 "sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2340:
#line 13289 "sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2341:
#line 13312 "sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2342:
#line 13321 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2343:
#line 13377 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2344:
#line 13401 "sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2345:
#line 13410 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2346:
#line 13418 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2347:
#line 13426 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2348:
#line 13440 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2349:
#line 13444 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2350:
#line 13448 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2351:
#line 13452 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2352:
#line 13456 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2353:
#line 13460 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2354:
#line 13467 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2355:
#line 13474 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2356:
#line 13481 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2357:
#line 13490 "sql_yacc.yy"
    {}
    break;

  case 2358:
#line 13491 "sql_yacc.yy"
    {}
    break;

  case 2359:
#line 13495 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2360:
#line 13496 "sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2361:
#line 13497 "sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2362:
#line 13501 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2363:
#line 13502 "sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2364:
#line 13507 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2365:
#line 13509 "sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2367:
#line 13514 "sql_yacc.yy"
    {}
    break;

  case 2368:
#line 13515 "sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2369:
#line 13520 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2370:
#line 13530 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;


/* Line 1267 of yacc.c.  */
#line 32083 "sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



