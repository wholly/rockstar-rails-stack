.\"     Title: \fBmysqlbinlog\fR
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.70.1 <http://docbook.sf.net/>
.\"      Date: 03/13/2009
.\"    Manual: MySQL Database System
.\"    Source: MySQL 5.1
.\"
.TH "\fBMYSQLBINLOG\fR" "1" "03/13/2009" "MySQL 5.1" "MySQL Database System"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
mysqlbinlog \- utility for processing binary log files
.SH "SYNOPSIS"
.HP 35
\fBmysqlbinlog [\fR\fBoptions\fR\fB] \fR\fB\fIlog_file\fR\fR\fB ...\fR
.SH "DESCRIPTION"
.PP
The server's binary log consists of files containing
\(lqevents\(rq
that describe modifications to database contents. The server writes these files in binary format. To display their contents in text format, use the
\fBmysqlbinlog\fR
utility. You can also use
\fBmysqlbinlog\fR
to display the contents of relay log files written by a slave server in a replication setup because relay logs have the same format as binary logs. The binary log and relay log are discussed further in
Section\ 5.2.4, \(lqThe Binary Log\(rq, and
Section\ 16.4.2, \(lqReplication Relay and Status Files\(rq.
.PP
Invoke
\fBmysqlbinlog\fR
like this:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog [\fR\fB\fIoptions\fR\fR\fB] \fR\fB\fIlog_file\fR\fR\fB ...\fR
.fi
.RE
.PP
For example, to display the contents of the binary log file named
\fIbinlog.000003\fR, use this command:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog binlog.0000003\fR
.fi
.RE
.PP
The output includes events contained in
\fIbinlog.000003\fR. Event information includes the statement, the ID of the server on which it was executed, the timestamp when the statement was executed, how much time it took, and so forth.
.PP
The output from
\fBmysqlbinlog\fR
can be re\-executed (for example, by using it as input to
\fBmysql\fR) to reapply the statements in the log. This is useful for recovery operations after a server crash. For other usage examples, see the discussion later in this section.
.PP
Normally, you use
\fBmysqlbinlog\fR
to read binary log files directly and apply them to the local MySQL server. It is also possible to read binary logs from a remote server by using the
\fB\-\-read\-from\-remote\-server\fR
option. When you read remote binary logs, the connection parameter options can be given to indicate how to connect to the server. These options are
\fB\-\-host\fR,
\fB\-\-password\fR,
\fB\-\-port\fR,
\fB\-\-protocol\fR,
\fB\-\-socket\fR, and
\fB\-\-user\fR; they are ignored except when you also use the
\fB\-\-read\-from\-remote\-server\fR
option.
.PP
\fBmysqlbinlog\fR
supports the following options:
.TP 3n
\(bu
\fB\-\-help\fR,
\fB\-?\fR
.sp
Display a help message and exit.
.TP 3n
\(bu
\fB\-\-base64\-output[=\fR\fB\fIvalue\fR\fR\fB]\fR
.sp
This option determines when events should be displayed encoded as base\-64 strings using
BINLOG
statements. The option has these allowable values (not case sensitive):
.RS 3n
.TP 3n
\(bu
AUTO
("automatic") or
UNSPEC
("unspecified") displays
BINLOG
statements automatically when necessary (that is, for format description events and row events). This is the default if no
\fB\-\-base64\-output\fR
option is given.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBNote\fR
Automatic
BINLOG
display is the only safe behavior if you intend to use the output of
\fBmysqlbinlog\fR
to re\-execute binary log file contents. The other option values are intended only for debugging or testing purposes because they may produce output that does not include all events in executable form.
.TP 3n
\(bu
ALWAYS
displays
BINLOG
statements whenever possible. This is the implied value if the option is given as
\fB\-\-base64\-output\fR
without a value.
.TP 3n
\(bu
NEVER
causes
BINLOG
statements not to be displayed.
\fBmysqlbinlog\fR
exits with an error if a row event is found that must be displayed using
BINLOG.
.TP 3n
\(bu
DECODE\-ROWS
specifies to
\fBmysqlbinlog\fR
that you intend for row events to be decoded and displayed as commented SQL statements by also specifying the
\fB\-\-verbose\fR
option. Like
NEVER,
DECODE\-ROWS
suppresses display of
BINLOG
statements, but unlike
NEVER, it does not exit with an error if a row event is found.
.RE
.IP "" 3n
The
\fB\-\-base64\-output\fR
option was introduced in MySQL 5.1.5, to be given as
\fB\-\-base64\-output\fR
or
\fB\-\-skip\-base64\-output\fR
(with the sense of
AUTO
or
NEVER). The option values described in the preceding list may be used as of MySQL 5.1.24, with the exception of
UNSPEC
and
DECODE\-ROWS, which are available as of MySQL 5.1.28.
.sp
For examples that show the effect of
\fB\-\-base64\-output\fR
and
\fB\-\-verbose\fR
on row event output, see
the section called \(lq\fBMYSQLBINLOG\fR ROW EVENT DISPLAY\(rq.
.TP 3n
\(bu
\fB\-\-character\-sets\-dir=\fR\fB\fIpath\fR\fR
.sp
The directory where character sets are installed. See
Section\ 9.2, \(lqThe Character Set Used for Data and Sorting\(rq.
.TP 3n
\(bu
\fB\-\-database=\fR\fB\fIdb_name\fR\fR,
\fB\-d \fR\fB\fIdb_name\fR\fR
.sp
List entries for just this database (local log only). You can only specify one database with this option \- if you specify multiple
\fB\-\-database\fR
options, only the last one is used. This option forces
\fBmysqlbinlog\fR
to output entries from the binary log where the default database (that is, the one selected by
USE) is
\fIdb_name\fR. Note that this does not replicate cross\-database statements such as
UPDATE \fIsome_db.some_table\fR SET foo='bar'
while having selected a different database or no database.
.TP 3n
\(bu
\fB\-\-debug[=\fR\fB\fIdebug_options\fR\fR\fB]\fR,
\fB\-# [\fR\fB\fIdebug_options\fR\fR\fB]\fR
.sp
Write a debugging log. A typical
\fIdebug_options\fR
string is often
\'d:t:o,\fIfile_name\fR'.
.TP 3n
\(bu
\fB\-\-debug\-check\fR
.sp
Print some debugging information when the program exits. This option was added in MySQL 5.1.21.
.TP 3n
\(bu
\fB\-\-debug\-info\fR
.sp
Print debugging information and memory and CPU usage statistics when the program exits. This option was added in MySQL 5.1.21.
.TP 3n
\(bu
\fB\-\-disable\-log\-bin\fR,
\fB\-D\fR
.sp
Disable binary logging. This is useful for avoiding an endless loop if you use the
\fB\-\-to\-last\-log\fR
option and are sending the output to the same MySQL server. This option also is useful when restoring after a crash to avoid duplication of the statements you have logged.
.sp
This option requires that you have the
SUPER
privilege. It causes
\fBmysqlbinlog\fR
to include a
SET sql_log_bin = 0
statement in its output to disable binary logging of the remaining output. The
SET
statement is ineffective unless you have the
SUPER
privilege.
.TP 3n
\(bu
\fB\-\-force\-read\fR,
\fB\-f\fR
.sp
With this option, if
\fBmysqlbinlog\fR
reads a binary log event that it does not recognize, it prints a warning, ignores the event, and continues. Without this option,
\fBmysqlbinlog\fR
stops if it reads such an event.
.TP 3n
\(bu
\fB\-\-hexdump\fR,
\fB\-H\fR
.sp
Display a hex dump of the log in comments, as described in
the section called \(lq\fBMYSQLBINLOG\fR HEX DUMP FORMAT\(rq. This output can be helpful for replication debugging. This option was added in MySQL 5.1.2.
.TP 3n
\(bu
\fB\-\-host=\fR\fB\fIhost_name\fR\fR,
\fB\-h \fR\fB\fIhost_name\fR\fR
.sp
Get the binary log from the MySQL server on the given host.
.TP 3n
\(bu
\fB\-\-local\-load=\fR\fB\fIpath\fR\fR,
\fB\-l \fR\fB\fIpath\fR\fR
.sp
Prepare local temporary files for
LOAD DATA INFILE
in the specified directory.
.TP 3n
\(bu
\fB\-\-offset=\fR\fB\fIN\fR\fR,
\fB\-o \fR\fB\fIN\fR\fR
.sp
Skip the first
\fIN\fR
entries in the log.
.TP 3n
\(bu
\fB\-\-password[=\fR\fB\fIpassword\fR\fR\fB]\fR,
\fB\-p[\fR\fB\fIpassword\fR\fR\fB]\fR
.sp
The password to use when connecting to the server. If you use the short option form (\fB\-p\fR), you
\fIcannot\fR
have a space between the option and the password. If you omit the
\fIpassword\fR
value following the
\fB\-\-password\fR
or
\fB\-p\fR
option on the command line, you are prompted for one.
.sp
Specifying a password on the command line should be considered insecure. See
Section\ 5.5.6, \(lqKeeping Passwords Secure\(rq.
.TP 3n
\(bu
\fB\-\-port=\fR\fB\fIport_num\fR\fR,
\fB\-P \fR\fB\fIport_num\fR\fR
.sp
The TCP/IP port number to use for connecting to a remote server.
.TP 3n
\(bu
\fB\-\-position=\fR\fB\fIN\fR\fR,
\fB\-j \fR\fB\fIN\fR\fR
.sp
Deprecated. Use
\fB\-\-start\-position\fR
instead.
.TP 3n
\(bu
\fB\-\-protocol={TCP|SOCKET|PIPE|MEMORY}\fR
.sp
The connection protocol to use for connecting to the server. It is useful when the other connection parameters normally would cause a protocol to be used other than the one you want. For details on the allowable values, see
Section\ 4.2.2, \(lqConnecting to the MySQL Server\(rq.
.TP 3n
\(bu
\fB\-\-read\-from\-remote\-server\fR,
\fB\-R\fR
.sp
Read the binary log from a MySQL server rather than reading a local log file. Any connection parameter options are ignored unless this option is given as well. These options are
\fB\-\-host\fR,
\fB\-\-password\fR,
\fB\-\-port\fR,
\fB\-\-protocol\fR,
\fB\-\-socket\fR, and
\fB\-\-user\fR.
.sp
This option requires that the remote server be running. It works only for binary log files on the remote server, not relay log files.
.TP 3n
\(bu
\fB\-\-result\-file=\fR\fB\fIname\fR\fR,
\fB\-r \fR\fB\fIname\fR\fR
.sp
Direct output to the given file.
.TP 3n
\(bu
\fB\-\-server\-id=\fR\fB\fIid\fR\fR
.sp
Extract only those events created by the server having the given server ID. This option is available as of MySQL 5.1.4.
.TP 3n
\(bu
\fB\-\-set\-charset=\fR\fB\fIcharset_name\fR\fR
.sp
Add a
SET NAMES \fIcharset_name\fR
statement to the output to specify the character set to be used for processing log files. This option was added in MySQL 5.1.12.
.TP 3n
\(bu
\fB\-\-short\-form\fR,
\fB\-s\fR
.sp
Display only the statements contained in the log, without any extra information.
.TP 3n
\(bu
\fB\-\-socket=\fR\fB\fIpath\fR\fR,
\fB\-S \fR\fB\fIpath\fR\fR
.sp
For connections to
localhost, the Unix socket file to use, or, on Windows, the name of the named pipe to use.
.TP 3n
\(bu
\fB\-\-start\-datetime=\fR\fB\fIdatetime\fR\fR
.sp
Start reading the binary log at the first event having a timestamp equal to or later than the
\fIdatetime\fR
argument. The
\fIdatetime\fR
value is relative to the local time zone on the machine where you run
\fBmysqlbinlog\fR. The value should be in a format accepted for the
DATETIME
or
TIMESTAMP
data types. For example:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog \-\-start\-datetime="2005\-12\-25 11:25:56" binlog.000003\fR
.fi
.RE
This option is useful for point\-in\-time recovery. See
Section\ 6.2, \(lqExample Backup and Recovery Strategy\(rq.
.TP 3n
\(bu
\fB\-\-start\-position=\fR\fB\fIN\fR\fR
.sp
Start reading the binary log at the first event having a position equal to or greater than
\fIN\fR. This option applies to the first log file named on the command line.
.TP 3n
\(bu
\fB\-\-stop\-datetime=\fR\fB\fIdatetime\fR\fR
.sp
Stop reading the binary log at the first event having a timestamp equal to or later than the
\fIdatetime\fR
argument. This option is useful for point\-in\-time recovery. See the description of the
\fB\-\-start\-datetime\fR
option for information about the
\fIdatetime\fR
value.
.TP 3n
\(bu
\fB\-\-stop\-position=\fR\fB\fIN\fR\fR
.sp
Stop reading the binary log at the first event having a position equal to or greater than
\fIN\fR. This option applies to the last log file named on the command line.
.TP 3n
\(bu
\fB\-\-to\-last\-log\fR,
\fB\-t\fR
.sp
Do not stop at the end of the requested binary log from a MySQL server, but rather continue printing until the end of the last binary log. If you send the output to the same MySQL server, this may lead to an endless loop. This option requires
\fB\-\-read\-from\-remote\-server\fR.
.TP 3n
\(bu
\fB\-\-user=\fR\fB\fIuser_name\fR\fR,
\fB\-u \fR\fB\fIuser_name\fR\fR
.sp
The MySQL user name to use when connecting to a remote server.
.TP 3n
\(bu
\fB\-\-verbose\fR,
\fB\-v\fR
.sp
Reconstruct row events and display them as commented SQL statements. If given twice, the output includes comments to indicate column data types and some metadata. This option was added in MySQL 5.1.28.
.sp
For examples that show the effect of
\fB\-\-base64\-output\fR
and
\fB\-\-verbose\fR
on row event output, see
the section called \(lq\fBMYSQLBINLOG\fR ROW EVENT DISPLAY\(rq.
.TP 3n
\(bu
\fB\-\-version\fR,
\fB\-V\fR
.sp
Display version information and exit.
.TP 3n
\(bu
\fB\-\-write\-binlog\fR
.sp
This option is enabled by default, so that
ANALYZE TABLE,
OPTIMIZE TABLE, and
REPAIR TABLE
statements generated by
\fBmysqlcheck\fR
are written to the binary log. Use
\fB\-\-skip\-write\-binlog\fR
to cause
NO_WRITE_TO_BINLOG
to be added to the statements so that they are not logged. Use the
\fB\-\-skip\-write\-binlog\fR
when these statements should not be sent to replication slaves or run when using the binary logs for recovery from backup. This option was added in MySQL 5.1.18.
.sp
.RE
.PP
You can also set the following variable by using
\fB\-\-\fR\fB\fIvar_name\fR\fR\fB=\fR\fB\fIvalue\fR\fR
syntax:
.TP 3n
\(bu
open_files_limit
.sp
Specify the number of open file descriptors to reserve.
.sp
.RE
.PP
You can pipe the output of
\fBmysqlbinlog\fR
into the
\fBmysql\fR
client to execute the statements contained in the binary log. This is used to recover from a crash when you have an old backup (see
Section\ 6.1, \(lqDatabase Backups\(rq). For example:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog binlog.000001 | mysql\fR
.fi
.RE
.PP
Or:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog binlog.[0\-9]* | mysql\fR
.fi
.RE
.PP
You can also redirect the output of
\fBmysqlbinlog\fR
to a text file instead, if you need to modify the statement log first (for example, to remove statements that you do not want to execute for some reason). After editing the file, execute the statements that it contains by using it as input to the
\fBmysql\fR
program.
.PP
\fBmysqlbinlog\fR
has the
\fB\-\-start\-position\fR
option, which prints only those statements with an offset in the binary log greater than or equal to a given position (the given position must match the start of one event). It also has options to stop and start when it sees an event with a given date and time. This enables you to perform point\-in\-time recovery using the
\fB\-\-stop\-datetime\fR
option (to be able to say, for example,
\(lqroll forward my databases to how they were today at 10:30 a.m.\(rq).
.PP
If you have more than one binary log to execute on the MySQL server, the safe method is to process them all using a single connection to the server. Here is an example that demonstrates what may be
\fIunsafe\fR:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog binlog.000001 | mysql # DANGER!!\fR
shell> \fBmysqlbinlog binlog.000002 | mysql # DANGER!!\fR
.fi
.RE
.PP
Processing binary logs this way using different connections to the server causes problems if the first log file contains a
CREATE TEMPORARY TABLE
statement and the second log contains a statement that uses the temporary table. When the first
\fBmysql\fR
process terminates, the server drops the temporary table. When the second
\fBmysql\fR
process attempts to use the table, the server reports
\(lqunknown table.\(rq
.PP
To avoid problems like this, use a
\fIsingle\fR
connection to execute the contents of all binary logs that you want to process. Here is one way to do so:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog binlog.000001 binlog.000002 | mysql\fR
.fi
.RE
.PP
Another approach is to write all the logs to a single file and then process the file:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog binlog.000001 >  /tmp/statements.sql\fR
shell> \fBmysqlbinlog binlog.000002 >> /tmp/statements.sql\fR
shell> \fBmysql \-e "source /tmp/statements.sql"\fR
.fi
.RE
.PP
\fBmysqlbinlog\fR
can produce output that reproduces a
LOAD DATA INFILE
operation without the original data file.
\fBmysqlbinlog\fR
copies the data to a temporary file and writes a
LOAD DATA LOCAL INFILE
statement that refers to the file. The default location of the directory where these files are written is system\-specific. To specify a directory explicitly, use the
\fB\-\-local\-load\fR
option.
.PP
Because
\fBmysqlbinlog\fR
converts
LOAD DATA INFILE
statements to
LOAD DATA LOCAL INFILE
statements (that is, it adds
LOCAL), both the client and the server that you use to process the statements must be configured to allow
LOCAL
capability. See
Section\ 5.3.4, \(lqSecurity Issues with LOAD DATA LOCAL\(rq.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBWarning\fR
.PP
The temporary files created for
LOAD DATA LOCAL
statements are
\fInot\fR
automatically deleted because they are needed until you actually execute those statements. You should delete the temporary files yourself after you no longer need the statement log. The files can be found in the temporary file directory and have names like
\fIoriginal_file_name\-#\-#\fR.
.SH "\fBMYSQLBINLOG\fR HEX DUMP FORMAT"
.PP
The
\fB\-\-hexdump\fR
option produces a hex dump of the log contents:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog \-\-hexdump master\-bin.000001\fR
.fi
.RE
.PP
The hex output consists of comment lines beginning with
#, so the output might look like this for the preceding command:
.sp
.RS 3n
.nf
/*!40019 SET @@session.max_insert_delayed_threads=0*/;
/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
# at 4
#051024 17:24:13 server id 1  end_log_pos 98
# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags
# 00000004 9d fc 5c 43   0f   01 00 00 00   5e 00 00 00   62 00 00 00   00 00
# 00000017 04 00 35 2e 30 2e 31 35  2d 64 65 62 75 67 2d 6c |..5.0.15.debug.l|
# 00000027 6f 67 00 00 00 00 00 00  00 00 00 00 00 00 00 00 |og..............|
# 00000037 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 |................|
# 00000047 00 00 00 00 9d fc 5c 43  13 38 0d 00 08 00 12 00 |.......C.8......|
# 00000057 04 04 04 04 12 00 00 4b  00 04 1a                |.......K...|
#       Start: binlog v 4, server v 5.0.15\-debug\-log created 051024 17:24:13
#       at startup
ROLLBACK;
.fi
.RE
.PP
Hex dump output currently contains the following elements. This format is subject to change.
.TP 3n
\(bu
Position: The byte position within the log file.
.TP 3n
\(bu
Timestamp: The event timestamp. In the example shown,
\'9d fc 5c 43'
is the representation of
\'051024 17:24:13'
in hexadecimal.
.TP 3n
\(bu
Type: The event type code. In the example shown,
\'0f'
indicates a
FORMAT_DESCRIPTION_EVENT. The following table lists the possible type codes.
.TS
allbox tab(:);
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l
l l l.
T{
Type
T}:T{
Name
T}:T{
Meaning
T}
T{
08
T}:T{
CREATE_FILE_EVENT
T}:T{
Used for LOAD DATA
                    INFILE statements. This indicates the
                    start of execution of such a statement. A temporary
                    file is created on the slave. Used in MySQL 4 only.
T}
T{
09
T}:T{
APPEND_BLOCK_EVENT
T}:T{
Contains data for use in a
                    LOAD DATA
                    INFILE statement. The data is stored in
                    the temporary file on the slave.
T}
T{
0a
T}:T{
EXEC_LOAD_EVENT
T}:T{
Used for LOAD DATA
                    INFILE statements. The contents of the
                    temporary file is stored in the table on the slave.
                    Used in MySQL 4 only.
T}
T{
0b
T}:T{
DELETE_FILE_EVENT
T}:T{
Rollback of a LOAD DATA
                    INFILE statement. The temporary file
                    should be deleted on the slave.
T}
T{
0c
T}:T{
NEW_LOAD_EVENT
T}:T{
Used for LOAD DATA
                    INFILE in MySQL 4 and earlier.
T}
T{
0d
T}:T{
RAND_EVENT
T}:T{
Used to send information about random values if the
                    RAND() function is
                    used in the statement.
T}
T{
0e
T}:T{
USER_VAR_EVENT
T}:T{
Used to replicate user variables.
T}
T{
0f
T}:T{
FORMAT_DESCRIPTION_EVENT
T}:T{
This indicates the start of a log file written by MySQL 5 or later.
T}
T{
10
T}:T{
XID_EVENT
T}:T{
Event indicating commit of an XA transaction.
T}
T{
11
T}:T{
BEGIN_LOAD_QUERY_EVENT
T}:T{
Used for LOAD DATA
                    INFILE statements in MySQL 5 and later.
T}
T{
00
T}:T{
UNKNOWN_EVENT
T}:T{
This event should never be present in the log.
T}
T{
12
T}:T{
EXECUTE_LOAD_QUERY_EVENT
T}:T{
Used for LOAD DATA
                    INFILE statements in MySQL 5 and later.
T}
T{
13
T}:T{
TABLE_MAP_EVENT
T}:T{
Information about a table definition. Used in MySQL 5.1.5 and later.
T}
T{
14
T}:T{
PRE_GA_WRITE_ROWS_EVENT
T}:T{
Row data for a single table that should be created. Used in MySQL 5.1.5
                    to 5.1.17.
T}
T{
15
T}:T{
PRE_GA_UPDATE_ROWS_EVENT
T}:T{
Row data for a single table that needs to be updated. Used in MySQL
                    5.1.5 to 5.1.17.
T}
T{
16
T}:T{
PRE_GA_DELETE_ROWS_EVENT
T}:T{
Row data for a single table that should be deleted. Used in MySQL 5.1.5
                    to 5.1.17.
T}
T{
17
T}:T{
WRITE_ROWS_EVENT
T}:T{
Row data for a single table that should be created. Used in MySQL 5.1.18
                    and later.
T}
T{
18
T}:T{
UPDATE_ROWS_EVENT
T}:T{
Row data for a single table that needs to be updated. Used in MySQL
                    5.1.18 and later.
T}
T{
19
T}:T{
DELETE_ROWS_EVENT
T}:T{
Row data for a single table that should be deleted. Used in MySQL 5.1.18
                    and later.
T}
T{
1a
T}:T{
INCIDENT_EVENT
T}:T{
Something out of the ordinary happened. Added in MySQL 5.1.18.
T}
T{
01
T}:T{
START_EVENT_V3
T}:T{
This indicates the start of a log file written by MySQL 4 or earlier.
T}
T{
02
T}:T{
QUERY_EVENT
T}:T{
The most common type of events. These contain statements executed on the
                    master.
T}
T{
03
T}:T{
STOP_EVENT
T}:T{
Indicates that master has stopped.
T}
T{
04
T}:T{
ROTATE_EVENT
T}:T{
Written when the master switches to a new log file.
T}
T{
05
T}:T{
INTVAR_EVENT
T}:T{
Used for AUTO_INCREMENT values or when the
                    LAST_INSERT_ID()
                    function is used in the statement.
T}
T{
06
T}:T{
LOAD_EVENT
T}:T{
Used for LOAD DATA
                    INFILE in MySQL 3.23.
T}
T{
07
T}:T{
SLAVE_EVENT
T}:T{
Reserved for future use.
T}
.TE
.sp
.TP 3n
\(bu
Master ID: The server ID of the master that created the event.
.TP 3n
\(bu
Size: The size in bytes of the event.
.TP 3n
\(bu
Master Pos: The position of the next event in the original master log file.
.TP 3n
\(bu
Flags: 16 flags. Currently, the following flags are used. The others are reserved for future use.
.TS
allbox tab(:);
l l l
l l l
l l l
l l l
l l l.
T{
Flag
T}:T{
Name
T}:T{
Meaning
T}
T{
01
T}:T{
LOG_EVENT_BINLOG_IN_USE_F
T}:T{
Log file correctly closed. (Used only in
                    FORMAT_DESCRIPTION_EVENT.) If
                    this flag is set (if the flags are, for example,
                    '01 00') in a
                    FORMAT_DESCRIPTION_EVENT, the log
                    file has not been properly closed. Most probably
                    this is because of a master crash (for example, due
                    to power failure).
T}
T{
02
T}:T{
\ 
T}:T{
Reserved for future use.
T}
T{
04
T}:T{
LOG_EVENT_THREAD_SPECIFIC_F
T}:T{
Set if the event is dependent on the connection it was executed in (for
                    example, '04 00'), for example,
                    if the event uses temporary tables.
T}
T{
08
T}:T{
LOG_EVENT_SUPPRESS_USE_F
T}:T{
Set in some circumstances when the event is not dependent on the default
                    database.
T}
.TE
.sp
.SH "\fBMYSQLBINLOG\fR ROW EVENT DISPLAY"
.PP
The following examples illustrate how
\fBmysqlbinlog\fR
displays row events that specify data modifications. These correspond to events with the
WRITE_ROWS_EVENT,
UPDATE_ROWS_EVENT, and
DELETE_ROWS_EVENT
type codes. The
\fB\-\-base64\-output=DECODE\-ROWS\fR
and
\fB\-\-verbose\fR
options may be used to affect row event output. These options are available as of MySQL 5.1.28.
.PP
Suppose that the server is using row\-based binary logging and that you execute the following sequence of statements:
.sp
.RS 3n
.nf
CREATE TABLE t
(
  id   INT NOT NULL,
  name VARCHAR(20) NOT NULL,
  date DATE NULL
) ENGINE = InnoDB;
START TRANSACTION;
INSERT INTO t VALUES(1, 'apple', NULL);
UPDATE t SET name = 'pear', date = '2009\-01\-01' WHERE id = 1;
DELETE FROM t WHERE id = 1;
COMMIT;
.fi
.RE
.PP
By default,
\fBmysqlbinlog\fR
displays row events encoded as base\-64 strings using
BINLOG
statements. Omitting extraneous lines, the output for the row events produced by the preceding statement sequence looks like this:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog \fR\fB\fIlog_file\fR\fR
...
# at 218
#080828 15:03:08 server id 1  end_log_pos 258 	Write_rows: table id 17 flags: STMT_END_F
BINLOG '
fAS3SBMBAAAALAAAANoAAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
fAS3SBcBAAAAKAAAAAIBAAAQABEAAAAAAAEAA//8AQAAAAVhcHBsZQ==
\'/*!*/;
...
# at 302
#080828 15:03:08 server id 1  end_log_pos 356 	Update_rows: table id 17 flags: STMT_END_F
BINLOG '
fAS3SBMBAAAALAAAAC4BAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
fAS3SBgBAAAANgAAAGQBAAAQABEAAAAAAAEAA////AEAAAAFYXBwbGX4AQAAAARwZWFyIbIP
\'/*!*/;
...
# at 400
#080828 15:03:08 server id 1  end_log_pos 442 	Delete_rows: table id 17 flags: STMT_END_F
BINLOG '
fAS3SBMBAAAALAAAAJABAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
fAS3SBkBAAAAKgAAALoBAAAQABEAAAAAAAEAA//4AQAAAARwZWFyIbIP
\'/*!*/;
.fi
.RE
.PP
To see the row events as comments in the form of
\(lqpseudo\-SQL\(rq
statements, run
\fBmysqlbinlog\fR
with the
\fB\-\-verbose\fR
or
\fB\-v\fR
option. The output will contain lines beginning with
###:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog \-v \fR\fB\fIlog_file\fR\fR
...
# at 218
#080828 15:03:08 server id 1  end_log_pos 258 	Write_rows: table id 17 flags: STMT_END_F
BINLOG '
fAS3SBMBAAAALAAAANoAAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
fAS3SBcBAAAAKAAAAAIBAAAQABEAAAAAAAEAA//8AQAAAAVhcHBsZQ==
\'/*!*/;
### INSERT INTO test.t
### SET
###   @1=1
###   @2='apple'
###   @3=NULL
...
# at 302
#080828 15:03:08 server id 1  end_log_pos 356 	Update_rows: table id 17 flags: STMT_END_F
BINLOG '
fAS3SBMBAAAALAAAAC4BAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
fAS3SBgBAAAANgAAAGQBAAAQABEAAAAAAAEAA////AEAAAAFYXBwbGX4AQAAAARwZWFyIbIP
\'/*!*/;
### UPDATE test.t
### WHERE
###   @1=1
###   @2='apple'
###   @3=NULL
### SET
###   @1=1
###   @2='pear'
###   @3='2009:01:01'
...
# at 400
#080828 15:03:08 server id 1  end_log_pos 442 	Delete_rows: table id 17 flags: STMT_END_F
BINLOG '
fAS3SBMBAAAALAAAAJABAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
fAS3SBkBAAAAKgAAALoBAAAQABEAAAAAAAEAA//4AQAAAARwZWFyIbIP
\'/*!*/;
### DELETE FROM test.t
### WHERE
###   @1=1
###   @2='pear'
###   @3='2009:01:01'
.fi
.RE
.PP
Specify
\fB\-\-verbose\fR
or
\fB\-v\fR
twice to also display data types and some metadata for each column. The output will contain an additional comment following each column change:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog \-vv \fR\fB\fIlog_file\fR\fR
...
# at 218
#080828 15:03:08 server id 1  end_log_pos 258 	Write_rows: table id 17 flags: STMT_END_F
BINLOG '
fAS3SBMBAAAALAAAANoAAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
fAS3SBcBAAAAKAAAAAIBAAAQABEAAAAAAAEAA//8AQAAAAVhcHBsZQ==
\'/*!*/;
### INSERT INTO test.t
### SET
###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
###   @2='apple' /* VARSTRING(20) meta=20 nullable=0 is_null=0 */
###   @3=NULL /* VARSTRING(20) meta=0 nullable=1 is_null=1 */
...
# at 302
#080828 15:03:08 server id 1  end_log_pos 356 	Update_rows: table id 17 flags: STMT_END_F
BINLOG '
fAS3SBMBAAAALAAAAC4BAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
fAS3SBgBAAAANgAAAGQBAAAQABEAAAAAAAEAA////AEAAAAFYXBwbGX4AQAAAARwZWFyIbIP
\'/*!*/;
### UPDATE test.t
### WHERE
###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
###   @2='apple' /* VARSTRING(20) meta=20 nullable=0 is_null=0 */
###   @3=NULL /* VARSTRING(20) meta=0 nullable=1 is_null=1 */
### SET
###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
###   @2='pear' /* VARSTRING(20) meta=20 nullable=0 is_null=0 */
###   @3='2009:01:01' /* DATE meta=0 nullable=1 is_null=0 */
...
# at 400
#080828 15:03:08 server id 1  end_log_pos 442 	Delete_rows: table id 17 flags: STMT_END_F
BINLOG '
fAS3SBMBAAAALAAAAJABAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
fAS3SBkBAAAAKgAAALoBAAAQABEAAAAAAAEAA//4AQAAAARwZWFyIbIP
\'/*!*/;
### DELETE FROM test.t
### WHERE
###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
###   @2='pear' /* VARSTRING(20) meta=20 nullable=0 is_null=0 */
###   @3='2009:01:01' /* DATE meta=0 nullable=1 is_null=0 */
.fi
.RE
.PP
You can tell
\fBmysqlbinlog\fR
to suppress the
BINLOG
statements for row events by using the
\fB\-\-base64\-output=DECODE\-ROWS\fR
option. This is similar to
\fB\-\-base64\-output=NEVER\fR
but does not exit with an error if a row event is found. The combination of
\fB\-\-base64\-output=DECODE\-ROWS\fR
and
\fB\-\-verbose\fR
provides a convenient way to see row events only as SQL statements:
.sp
.RS 3n
.nf
shell> \fBmysqlbinlog \-v \-\-base64\-output=DECODE\-ROWS \fR\fB\fIlog_file\fR\fR
...
# at 218
#080828 15:03:08 server id 1  end_log_pos 258 	Write_rows: table id 17 flags: STMT_END_F
### INSERT INTO test.t
### SET
###   @1=1
###   @2='apple'
###   @3=NULL
...
# at 302
#080828 15:03:08 server id 1  end_log_pos 356 	Update_rows: table id 17 flags: STMT_END_F
### UPDATE test.t
### WHERE
###   @1=1
###   @2='apple'
###   @3=NULL
### SET
###   @1=1
###   @2='pear'
###   @3='2009:01:01'
...
# at 400
#080828 15:03:08 server id 1  end_log_pos 442 	Delete_rows: table id 17 flags: STMT_END_F
### DELETE FROM test.t
### WHERE
###   @1=1
###   @2='pear'
###   @3='2009:01:01'
.fi
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBNote\fR
.PP
You should not suppress
BINLOG
statements if you intend to re\-execute
\fBmysqlbinlog\fR
output.
.PP
The SQL statements produced by
\fB\-\-verbose\fR
for row events are much more readable than the corresponding
BINLOG
statements. However, they do not correspond exactly to the original SQL statements that generated the events. The following limitations apply:
.TP 3n
\(bu
The original column names are lost and replace by
@\fIN\fR, where
\fIN\fR
is a column number.
.TP 3n
\(bu
Character set information is not available in the binary log, which affects string column display:
.RS 3n
.TP 3n
\(bu
There is no distinction made between corresponding binary and non\-binary string types (BINARY
and
CHAR,
VARBINARY
and
VARCHAR,
BLOB
and
TEXT). The output uses a data type of
STRING
for fixed\-length strings and
VARSTRING
for variable\-length strings.
.TP 3n
\(bu
For multi\-byte character sets, the maximum number of bytes per character is not present in the binary log, so the length for string types is displayed in bytes rather than in characters. For example,
STRING(4)
will be used as the data type for values from either of these column types:
.sp
.RS 3n
.nf
CHAR(4) CHARACTER SET latin1
CHAR(2) CHARACTER SET ucs2
.fi
.RE
.TP 3n
\(bu
Due to the storage format for events of type
UPDATE_ROWS_EVENT,
UPDATE
statements are displayed with the
WHERE
clause preceding the
SET
clause.
.RE
.SH "COPYRIGHT"
.PP
Copyright 2007\-2008 MySQL AB, 2009 Sun Microsystems, Inc.
.PP
This documentation is free software; you can redistribute it and/or modify it only under the terms of the GNU General Public License as published by the Free Software Foundation; version 2 of the License.
.PP
This documentation is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
.PP
You should have received a copy of the GNU General Public License along with the program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110\-1301 USA or see http://www.gnu.org/licenses/.
.SH "SEE ALSO"
For more information, please refer to the MySQL Reference Manual,
which may already be installed locally and which is also available
online at http://dev.mysql.com/doc/.
.SH AUTHOR
MySQL AB (http://www.mysql.com/).
