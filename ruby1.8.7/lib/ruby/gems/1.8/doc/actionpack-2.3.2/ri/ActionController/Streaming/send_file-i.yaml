--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Sends the file, by default streaming it 4096 bytes at a time. This way the whole file doesn't need to be read into memory at once. This makes it feasible to send even large files. You can optionally turn off streaming and send the whole file at once.
- !ruby/struct:SM::Flow::P 
  body: Be careful to sanitize the path parameter if it is coming from a web page. <tt>send_file(params[:path])</tt> allows a malicious user to download any file on your server.
- !ruby/struct:SM::Flow::P 
  body: "Options:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:filename</tt> - suggests a filename for the browser to use. Defaults to <tt>File.basename(path)</tt>.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:type</tt> - specifies an HTTP content type. Defaults to 'application/octet-stream'. You can specify either a string or a symbol for a registered type register with <tt>Mime::Type.register</tt>, for example :json
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:length</tt> - used to manually override the length (in bytes) of the content that is going to be sent to the client. Defaults to <tt>File.size(path)</tt>.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:disposition</tt> - specifies whether the file will be shown inline or downloaded. Valid values are 'inline' and 'attachment' (default).
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:stream</tt> - whether to send the file to the user agent as it is read (<tt>true</tt>) or to read the entire file before sending (<tt>false</tt>). Defaults to <tt>true</tt>.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:buffer_size</tt> - specifies size (in bytes) of the buffer used to stream the file. Defaults to 4096.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:status</tt> - specifies the status code to send with the response. Defaults to '200 OK'.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:url_based_filename</tt> - set to <tt>true</tt> if you want the browser guess the filename from the URL, which is necessary for i18n filenames on certain browsers (setting <tt>:filename</tt> overrides this option).
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:x_sendfile</tt> - uses X-Sendfile to send the file when set to <tt>true</tt>. This is currently only available with Lighttpd/Apache2 and specific modules installed and activated. Since this uses the web server to send the file, this may lower memory consumption on your server and it will not block your application for further requests. See http://blog.lighttpd.net/articles/2006/07/02/x-sendfile and http://tn123.ath.cx/mod_xsendfile/ for details. Defaults to <tt>false</tt>.
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: The default Content-Type and Content-Disposition headers are set to download arbitrary binary files in as many browsers as possible. IE versions 4, 5, 5.5, and 6 are all known to have a variety of quirks (especially when downloading over SSL).
- !ruby/struct:SM::Flow::P 
  body: "Simple download:"
- !ruby/struct:SM::Flow::VERB 
  body: "  send_file '/path/to.zip'\n"
- !ruby/struct:SM::Flow::P 
  body: "Show a JPEG in the browser:"
- !ruby/struct:SM::Flow::VERB 
  body: "  send_file '/path/to.jpeg', :type =&gt; 'image/jpeg', :disposition =&gt; 'inline'\n"
- !ruby/struct:SM::Flow::P 
  body: "Show a 404 page in the browser:"
- !ruby/struct:SM::Flow::VERB 
  body: "  send_file '/path/to/404.html', :type =&gt; 'text/html; charset=utf-8', :status =&gt; 404\n"
- !ruby/struct:SM::Flow::P 
  body: Read about the other Content-* HTTP headers if you'd like to provide the user with more information (such as Content-Description) in http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11.
- !ruby/struct:SM::Flow::P 
  body: Also be aware that the document may be cached by proxies and browsers. The Pragma and Cache-Control headers declare how the file may be cached by intermediaries. They default to require clients to validate with the server before releasing cached responses. See http://www.mnot.net/cache_docs/ for an overview of web caching and http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9 for the Cache-Control header spec.
full_name: ActionController::Streaming#send_file
is_singleton: false
name: send_file
params: (path, options = {})
visibility: protected
