--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Removes fragments from the cache.
- !ruby/struct:SM::Flow::P 
  body: "<tt>key</tt> can take one of three forms:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: String - This would normally take the form of a path, like <tt>&quot;pages/45/notes&quot;</tt>.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Hash - Treated as an implicit call to <tt>url_for</tt>, like <tt>{:controller =&gt; &quot;pages&quot;, :action =&gt; &quot;notes&quot;, :id =&gt; 45}</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "Regexp - Will remove any fragment that matches, so <tt>%r{pages/\\d*/notes}</tt> might remove all notes. Make sure you don't use anchors in the regex (<tt>^</tt> or <tt>$</tt>) because the actual filename matched looks like <tt>./cache/filename/path.cache</tt>. Note: Regexp expiration is only supported on caches that can iterate over all keys (unlike memcached)."
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: <tt>options</tt> is passed through to the cache store's <tt>delete</tt> method (or <tt>delete_matched</tt>, for Regexp keys.)
full_name: ActionController::Caching::Fragments#expire_fragment
is_singleton: false
name: expire_fragment
params: (key, options = nil)
visibility: public
