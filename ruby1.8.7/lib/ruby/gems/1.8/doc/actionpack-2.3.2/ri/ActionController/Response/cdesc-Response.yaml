--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  name: assigns
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  name: layout
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  name: redirected_to
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  name: redirected_to_method_params
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  name: request
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  name: session
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  name: template
  rw: RW
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: Represents an HTTP response generated by a controller action. One can use an ActionController::Response object to retrieve the current state of the response, or customize the response. An Response object can either represent a &quot;real&quot; HTTP response (i.e. one that is meant to be sent back to the web browser) or a test response (i.e. one that is generated from integration tests). See CgiResponse and TestResponse, respectively.
- !ruby/struct:SM::Flow::P 
  body: Response is mostly a Ruby on Rails framework implement detail, and should never be used directly in controllers. Controllers should use the methods defined in ActionController::Base instead. For example, if you want to set the HTTP response's content MIME type, then use ActionControllerBase#headers instead of Response#headers.
- !ruby/struct:SM::Flow::P 
  body: Nevertheless, integration tests may want to inspect controller responses in more detail, and that's when Response can be useful for application developers. Integration test methods such as ActionController::Integration::Session#get and ActionController::Integration::Session#post return objects of type TestResponse (which are of course also of type Response).
- !ruby/struct:SM::Flow::P 
  body: "For example, the following demo integration &quot;test&quot; prints the body of the controller response to the console:"
- !ruby/struct:SM::Flow::VERB 
  body: " class DemoControllerTest &lt; ActionController::IntegrationTest\n   def test_print_root_path_to_console\n     get('/')\n     puts @response.body\n   end\n end\n"
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: DEFAULT_HEADERS
  value: "{ \"Cache-Control\" => \"no-cache\" }"
full_name: ActionController::Response
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: assign_default_content_type_and_charset!
- !ruby/object:RI::MethodSummary 
  name: charset
- !ruby/object:RI::MethodSummary 
  name: charset=
- !ruby/object:RI::MethodSummary 
  name: content_type
- !ruby/object:RI::MethodSummary 
  name: content_type=
- !ruby/object:RI::MethodSummary 
  name: each
- !ruby/object:RI::MethodSummary 
  name: etag
- !ruby/object:RI::MethodSummary 
  name: etag=
- !ruby/object:RI::MethodSummary 
  name: etag?
- !ruby/object:RI::MethodSummary 
  name: last_modified
- !ruby/object:RI::MethodSummary 
  name: last_modified=
- !ruby/object:RI::MethodSummary 
  name: last_modified?
- !ruby/object:RI::MethodSummary 
  name: location
- !ruby/object:RI::MethodSummary 
  name: location=
- !ruby/object:RI::MethodSummary 
  name: prepare!
- !ruby/object:RI::MethodSummary 
  name: redirect
- !ruby/object:RI::MethodSummary 
  name: sending_file?
- !ruby/object:RI::MethodSummary 
  name: set_cookie
- !ruby/object:RI::MethodSummary 
  name: write
name: Response
superclass: Rack::Response
