--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Creates a check box form input tag.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Options
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:disabled</tt> - If set to true, the user will not be able to use this input.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Any other key creates standard HTML options for the tag.
  type: :BULLET
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Examples
- !ruby/struct:SM::Flow::VERB 
  body: "  check_box_tag 'accept'\n  # =&gt; &lt;input id=&quot;accept&quot; name=&quot;accept&quot; type=&quot;checkbox&quot; value=&quot;1&quot; /&gt;\n\n  check_box_tag 'rock', 'rock music'\n  # =&gt; &lt;input id=&quot;rock&quot; name=&quot;rock&quot; type=&quot;checkbox&quot; value=&quot;rock music&quot; /&gt;\n\n  check_box_tag 'receive_email', 'yes', true\n  # =&gt; &lt;input checked=&quot;checked&quot; id=&quot;receive_email&quot; name=&quot;receive_email&quot; type=&quot;checkbox&quot; value=&quot;yes&quot; /&gt;\n\n  check_box_tag 'tos', 'yes', false, :class =&gt; 'accept_tos'\n  # =&gt; &lt;input class=&quot;accept_tos&quot; id=&quot;tos&quot; name=&quot;tos&quot; type=&quot;checkbox&quot; value=&quot;yes&quot; /&gt;\n\n  check_box_tag 'eula', 'accepted', false, :disabled =&gt; true\n  # =&gt; &lt;input disabled=&quot;disabled&quot; id=&quot;eula&quot; name=&quot;eula&quot; type=&quot;checkbox&quot; value=&quot;accepted&quot; /&gt;\n"
full_name: ActionView::Helpers::FormTagHelper#check_box_tag
is_singleton: false
name: check_box_tag
params: (name, value = "1", checked = false, options = {})
visibility: public
