--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Returns an HTML block tag of type <tt>name</tt> surrounding the <tt>content</tt>. Add HTML attributes by passing an attributes hash to <tt>options</tt>. Instead of passing the content as an argument, you can also use a block in which case, you pass your <tt>options</tt> as the second parameter. Set escape to false to disable attribute value escaping.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Options
- !ruby/struct:SM::Flow::P 
  body: The <tt>options</tt> hash is used with attributes with no value like (<tt>disabled</tt> and <tt>readonly</tt>), which you can give a value of true in the <tt>options</tt> hash. You can use symbols or strings for the attribute names.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Examples
- !ruby/struct:SM::Flow::VERB 
  body: "  content_tag(:p, &quot;Hello world!&quot;)\n   # =&gt; &lt;p&gt;Hello world!&lt;/p&gt;\n  content_tag(:div, content_tag(:p, &quot;Hello world!&quot;), :class =&gt; &quot;strong&quot;)\n   # =&gt; &lt;div class=&quot;strong&quot;&gt;&lt;p&gt;Hello world!&lt;/p&gt;&lt;/div&gt;\n  content_tag(&quot;select&quot;, options, :multiple =&gt; true)\n   # =&gt; &lt;select multiple=&quot;multiple&quot;&gt;...options...&lt;/select&gt;\n\n  &lt;% content_tag :div, :class =&gt; &quot;strong&quot; do -%&gt;\n    Hello world!\n  &lt;% end -%&gt;\n   # =&gt; &lt;div class=&quot;strong&quot;&gt;Hello world!&lt;/div&gt;\n"
full_name: ActionView::Helpers::TagHelper#content_tag
is_singleton: false
name: content_tag
params: (name, content_or_options_with_block = nil, options = nil, escape = true, &block)
visibility: public
