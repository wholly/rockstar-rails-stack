--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: AtomFeedBuilder.new(xml, self, options)
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Full usage example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  config/routes.rb:\n    ActionController::Routing::Routes.draw do |map|\n      map.resources :posts\n      map.root :controller =&gt; &quot;posts&quot;\n    end\n\n  app/controllers/posts_controller.rb:\n    class PostsController &lt; ApplicationController::Base\n      # GET /posts.html\n      # GET /posts.atom\n      def index\n        @posts = Post.find(:all)\n\n        respond_to do |format|\n          format.html\n          format.atom\n        end\n      end\n    end\n\n  app/views/posts/index.atom.builder:\n    atom_feed do |feed|\n      feed.title(&quot;My great blog!&quot;)\n      feed.updated(@posts.first.created_at)\n\n      for post in @posts\n        feed.entry(post) do |entry|\n          entry.title(post.title)\n          entry.content(post.body, :type =&gt; 'html')\n\n          entry.author do |author|\n            author.name(&quot;DHH&quot;)\n          end\n        end\n      end\n    end\n"
- !ruby/struct:SM::Flow::P 
  body: "The options for atom_feed are:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:language</tt>: Defaults to &quot;en-US&quot;."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:root_url</tt>: The HTML alternative that this feed is doubling for. Defaults to / on the current host."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:url</tt>: The URL for this feed. Defaults to the current URL."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:id</tt>: The id for this feed. Defaults to &quot;tag:#{request.host},#{options[:schema_date]}:#{request.request_uri.split(&quot;.&quot;)[0]}&quot;"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:schema_date</tt>: The date at which the tag scheme for the feed was first used. A good default is the year you created the feed. See http://feedvalidator.org/docs/error/InvalidTAG.html for more information. If not specified, 2005 is used (as an &quot;I don't care&quot; value)."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:instruct</tt>: Hash of XML processing instructions in the form {target =&gt; {attribute =&gt; value, }} or {target =&gt; [{attribute =&gt; value, }, ]}"
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: "Other namespaces can be added to the root element:"
- !ruby/struct:SM::Flow::VERB 
  body: "  app/views/posts/index.atom.builder:\n    atom_feed({'xmlns:app' =&gt; 'http://www.w3.org/2007/app',\n        'xmlns:openSearch' =&gt; 'http://a9.com/-/spec/opensearch/1.1/'}) do |feed|\n      feed.title(&quot;My great blog!&quot;)\n      feed.updated((@posts.first.created_at))\n      feed.tag!(openSearch:totalResults, 10)\n\n      for post in @posts\n        feed.entry(post) do |entry|\n          entry.title(post.title)\n          entry.content(post.body, :type =&gt; 'html')\n          entry.tag!('app:edited', Time.now)\n\n          entry.author do |author|\n            author.name(&quot;DHH&quot;)\n          end\n        end\n      end\n    end\n"
- !ruby/struct:SM::Flow::P 
  body: "The Atom spec defines five elements (content rights title subtitle summary) which may directly contain xhtml content if :type =&gt; 'xhtml' is specified as an attribute. If so, this helper will take care of the enclosing div and xhtml namespace declaration. Example usage:"
- !ruby/struct:SM::Flow::VERB 
  body: "   entry.summary :type =&gt; 'xhtml' do |xhtml|\n     xhtml.p pluralize(order.line_items.count, &quot;line item&quot;)\n     xhtml.p &quot;Shipped to #{order.address}&quot;\n     xhtml.p &quot;Paid by #{order.pay_type}&quot;\n   end\n"
- !ruby/struct:SM::Flow::P 
  body: atom_feed yields an AtomFeedBuilder instance. Nested elements yield an AtomBuilder instance.
full_name: ActionView::Helpers::AtomFeedHelper#atom_feed
is_singleton: false
name: atom_feed
params: (options = {}, &block) {|AtomFeedBuilder.new(xml, self, options)| ...}
visibility: public
