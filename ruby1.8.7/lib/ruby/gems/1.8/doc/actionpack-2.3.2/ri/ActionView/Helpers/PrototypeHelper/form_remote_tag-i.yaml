--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Returns a form tag that will submit using XMLHttpRequest in the background instead of the regular reloading POST arrangement. Even though it's using JavaScript to serialize the form elements, the form submission will work just like a regular submission as viewed by the receiving side (all elements available in <tt>params</tt>). The options for specifying the target with <tt>:url</tt> and defining callbacks is the same as <tt>link_to_remote</tt>.
- !ruby/struct:SM::Flow::P 
  body: A &quot;fall-through&quot; target for browsers that doesn't do JavaScript can be specified with the <tt>:action</tt>/<tt>:method</tt> options on <tt>:html</tt>.
- !ruby/struct:SM::Flow::P 
  body: "Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # Generates:\n  #      &lt;form action=&quot;/some/place&quot; method=&quot;post&quot; onsubmit=&quot;new Ajax.Request('',\n  #      {asynchronous:true, evalScripts:true, parameters:Form.serialize(this)}); return false;&quot;&gt;\n  form_remote_tag :html =&gt; { :action =&gt;\n    url_for(:controller =&gt; &quot;some&quot;, :action =&gt; &quot;place&quot;) }\n"
- !ruby/struct:SM::Flow::P 
  body: The Hash passed to the <tt>:html</tt> key is equivalent to the options (2nd) argument in the FormTagHelper.form_tag method.
- !ruby/struct:SM::Flow::P 
  body: By default the fall-through action is the same as the one specified in the <tt>:url</tt> (and the default method is <tt>:post</tt>).
- !ruby/struct:SM::Flow::P 
  body: "form_remote_tag also takes a block, like form_tag:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # Generates:\n  #     &lt;form action=&quot;/&quot; method=&quot;post&quot; onsubmit=&quot;new Ajax.Request('/',\n  #     {asynchronous:true, evalScripts:true, parameters:Form.serialize(this)});\n  #     return false;&quot;&gt; &lt;div&gt;&lt;input name=&quot;commit&quot; type=&quot;submit&quot; value=&quot;Save&quot; /&gt;&lt;/div&gt;\n  #     &lt;/form&gt;\n  &lt;% form_remote_tag :url =&gt; '/posts' do -%&gt;\n    &lt;div&gt;&lt;%= submit_tag 'Save' %&gt;&lt;/div&gt;\n  &lt;% end -%&gt;\n"
full_name: ActionView::Helpers::PrototypeHelper#form_remote_tag
is_singleton: false
name: form_remote_tag
params: (options = {}, &block)
visibility: public
